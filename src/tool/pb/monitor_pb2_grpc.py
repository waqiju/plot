# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import common_pb2 as pb_dot_common__pb2
from pb import monitor_pb2 as pb_dot_monitor__pb2


class GuardStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterService = channel.unary_unary(
                '/Guard/RegisterService',
                request_serializer=pb_dot_monitor__pb2.ServiceInfo.SerializeToString,
                response_deserializer=pb_dot_common__pb2.BaseResp.FromString,
                )
        self.JudgeTradeDay = channel.unary_unary(
                '/Guard/JudgeTradeDay',
                request_serializer=pb_dot_monitor__pb2.TradeDayRequest.SerializeToString,
                response_deserializer=pb_dot_monitor__pb2.TradeDayResponse.FromString,
                )
        self.FetchCreditStockList = channel.unary_unary(
                '/Guard/FetchCreditStockList',
                request_serializer=pb_dot_monitor__pb2.CreditStockListRequest.SerializeToString,
                response_deserializer=pb_dot_monitor__pb2.CreditStockList.FromString,
                )


class GuardServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JudgeTradeDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCreditStockList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuardServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterService,
                    request_deserializer=pb_dot_monitor__pb2.ServiceInfo.FromString,
                    response_serializer=pb_dot_common__pb2.BaseResp.SerializeToString,
            ),
            'JudgeTradeDay': grpc.unary_unary_rpc_method_handler(
                    servicer.JudgeTradeDay,
                    request_deserializer=pb_dot_monitor__pb2.TradeDayRequest.FromString,
                    response_serializer=pb_dot_monitor__pb2.TradeDayResponse.SerializeToString,
            ),
            'FetchCreditStockList': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCreditStockList,
                    request_deserializer=pb_dot_monitor__pb2.CreditStockListRequest.FromString,
                    response_serializer=pb_dot_monitor__pb2.CreditStockList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Guard', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Guard(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Guard/RegisterService',
            pb_dot_monitor__pb2.ServiceInfo.SerializeToString,
            pb_dot_common__pb2.BaseResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JudgeTradeDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Guard/JudgeTradeDay',
            pb_dot_monitor__pb2.TradeDayRequest.SerializeToString,
            pb_dot_monitor__pb2.TradeDayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchCreditStockList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Guard/FetchCreditStockList',
            pb_dot_monitor__pb2.CreditStockListRequest.SerializeToString,
            pb_dot_monitor__pb2.CreditStockList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SheepStub(object):
    """Guard => Sheep, Guard向Sheep询问是否在线，Sheep来响应。由各个被监控的服务自行实现,
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/Sheep/Heartbeat',
                request_serializer=pb_dot_monitor__pb2.HeardbeatRequest.SerializeToString,
                response_deserializer=pb_dot_monitor__pb2.HeardbeatResponse.FromString,
                )


class SheepServicer(object):
    """Guard => Sheep, Guard向Sheep询问是否在线，Sheep来响应。由各个被监控的服务自行实现,
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SheepServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=pb_dot_monitor__pb2.HeardbeatRequest.FromString,
                    response_serializer=pb_dot_monitor__pb2.HeardbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sheep', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sheep(object):
    """Guard => Sheep, Guard向Sheep询问是否在线，Sheep来响应。由各个被监控的服务自行实现,
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sheep/Heartbeat',
            pb_dot_monitor__pb2.HeardbeatRequest.SerializeToString,
            pb_dot_monitor__pb2.HeardbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
