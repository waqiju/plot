// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/trade.proto

#include "pb/trade.pb.h"
#include "pb/trade.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Trader_method_names[] = {
  "/Trader/SubmitThsStockOrder",
  "/Trader/QueryOrderStatus",
  "/Trader/CancelOrder",
  "/Trader/QueryPosition",
};

std::unique_ptr< Trader::Stub> Trader::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Trader::Stub> stub(new Trader::Stub(channel));
  return stub;
}

Trader::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SubmitThsStockOrder_(Trader_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryOrderStatus_(Trader_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(Trader_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryPosition_(Trader_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Trader::Stub::SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::ThsStockOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitThsStockOrder_, context, request, response);
}

void Trader::Stub::experimental_async::SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitThsStockOrder_, context, request, response, std::move(f));
}

void Trader::Stub::experimental_async::SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitThsStockOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>* Trader::Stub::PrepareAsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ThsStockOrderResponse>::Create(channel_.get(), cq, rpcmethod_SubmitThsStockOrder_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>* Trader::Stub::AsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitThsStockOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Trader::Stub::QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::OrderStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryOrderStatus_, context, request, response);
}

void Trader::Stub::experimental_async::QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryOrderStatus_, context, request, response, std::move(f));
}

void Trader::Stub::experimental_async::QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryOrderStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OrderStatus>* Trader::Stub::PrepareAsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OrderStatus>::Create(channel_.get(), cq, rpcmethod_QueryOrderStatus_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OrderStatus>* Trader::Stub::AsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryOrderStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Trader::Stub::CancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::BaseResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void Trader::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void Trader::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BaseResp>* Trader::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::BaseResp>::Create(channel_.get(), cq, rpcmethod_CancelOrder_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::BaseResp>* Trader::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Trader::Stub::QueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::PositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryPosition_, context, request, response);
}

void Trader::Stub::experimental_async::QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryPosition_, context, request, response, std::move(f));
}

void Trader::Stub::experimental_async::QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PositionResponse>* Trader::Stub::PrepareAsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PositionResponse>::Create(channel_.get(), cq, rpcmethod_QueryPosition_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::PositionResponse>* Trader::Stub::AsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Trader::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trader_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trader::Service, ::ThsStockOrderRequest, ::ThsStockOrderResponse>(
          [](Trader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ThsStockOrderRequest* req,
             ::ThsStockOrderResponse* resp) {
               return service->SubmitThsStockOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trader_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trader::Service, ::OrderInfo, ::OrderStatus>(
          [](Trader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OrderInfo* req,
             ::OrderStatus* resp) {
               return service->QueryOrderStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trader_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trader::Service, ::OrderInfo, ::BaseResp>(
          [](Trader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OrderInfo* req,
             ::BaseResp* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trader_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trader::Service, ::PositionRequest, ::PositionResponse>(
          [](Trader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PositionRequest* req,
             ::PositionResponse* resp) {
               return service->QueryPosition(ctx, req, resp);
             }, this)));
}

Trader::Service::~Service() {
}

::grpc::Status Trader::Service::SubmitThsStockOrder(::grpc::ServerContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trader::Service::QueryOrderStatus(::grpc::ServerContext* context, const ::OrderInfo* request, ::OrderStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trader::Service::CancelOrder(::grpc::ServerContext* context, const ::OrderInfo* request, ::BaseResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trader::Service::QueryPosition(::grpc::ServerContext* context, const ::PositionRequest* request, ::PositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


