// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/prefab.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fprefab_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fprefab_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fprefab_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fprefab_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fprefab_2eproto;
namespace pb {
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class Prefab;
class PrefabDefaultTypeInternal;
extern PrefabDefaultTypeInternal _Prefab_default_instance_;
class WorldObject;
class WorldObjectDefaultTypeInternal;
extern WorldObjectDefaultTypeInternal _WorldObject_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Member* Arena::CreateMaybeMessage<::pb::Member>(Arena*);
template<> ::pb::Prefab* Arena::CreateMaybeMessage<::pb::Prefab>(Arena*);
template<> ::pb::WorldObject* Arena::CreateMaybeMessage<::pb::WorldObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Prefab PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Prefab) */ {
 public:
  inline Prefab() : Prefab(nullptr) {}
  virtual ~Prefab();

  Prefab(const Prefab& from);
  Prefab(Prefab&& from) noexcept
    : Prefab() {
    *this = ::std::move(from);
  }

  inline Prefab& operator=(const Prefab& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prefab& operator=(Prefab&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prefab& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prefab* internal_default_instance() {
    return reinterpret_cast<const Prefab*>(
               &_Prefab_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Prefab& a, Prefab& b) {
    a.Swap(&b);
  }
  inline void Swap(Prefab* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prefab* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prefab* New() const final {
    return CreateMaybeMessage<Prefab>(nullptr);
  }

  Prefab* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prefab>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prefab& from);
  void MergeFrom(const Prefab& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prefab* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Prefab";
  }
  protected:
  explicit Prefab(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprefab_2eproto);
    return ::descriptor_table_pb_2fprefab_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldObjectPoolFieldNumber = 1,
    kFloatPoolFieldNumber = 2,
    kDoublePoolFieldNumber = 3,
    kStringPoolFieldNumber = 4,
    kBytesPoolFieldNumber = 5,
  };
  // repeated .pb.WorldObject world_object_pool = 1;
  int world_object_pool_size() const;
  private:
  int _internal_world_object_pool_size() const;
  public:
  void clear_world_object_pool();
  ::pb::WorldObject* mutable_world_object_pool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::WorldObject >*
      mutable_world_object_pool();
  private:
  const ::pb::WorldObject& _internal_world_object_pool(int index) const;
  ::pb::WorldObject* _internal_add_world_object_pool();
  public:
  const ::pb::WorldObject& world_object_pool(int index) const;
  ::pb::WorldObject* add_world_object_pool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::WorldObject >&
      world_object_pool() const;

  // repeated float float_pool = 2;
  int float_pool_size() const;
  private:
  int _internal_float_pool_size() const;
  public:
  void clear_float_pool();
  private:
  float _internal_float_pool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_pool() const;
  void _internal_add_float_pool(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_pool();
  public:
  float float_pool(int index) const;
  void set_float_pool(int index, float value);
  void add_float_pool(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_pool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_pool();

  // repeated double double_pool = 3;
  int double_pool_size() const;
  private:
  int _internal_double_pool_size() const;
  public:
  void clear_double_pool();
  private:
  double _internal_double_pool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_pool() const;
  void _internal_add_double_pool(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_pool();
  public:
  double double_pool(int index) const;
  void set_double_pool(int index, double value);
  void add_double_pool(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_pool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_pool();

  // repeated string string_pool = 4;
  int string_pool_size() const;
  private:
  int _internal_string_pool_size() const;
  public:
  void clear_string_pool();
  const std::string& string_pool(int index) const;
  std::string* mutable_string_pool(int index);
  void set_string_pool(int index, const std::string& value);
  void set_string_pool(int index, std::string&& value);
  void set_string_pool(int index, const char* value);
  void set_string_pool(int index, const char* value, size_t size);
  std::string* add_string_pool();
  void add_string_pool(const std::string& value);
  void add_string_pool(std::string&& value);
  void add_string_pool(const char* value);
  void add_string_pool(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_pool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_pool();
  private:
  const std::string& _internal_string_pool(int index) const;
  std::string* _internal_add_string_pool();
  public:

  // repeated bytes bytes_pool = 5;
  int bytes_pool_size() const;
  private:
  int _internal_bytes_pool_size() const;
  public:
  void clear_bytes_pool();
  const std::string& bytes_pool(int index) const;
  std::string* mutable_bytes_pool(int index);
  void set_bytes_pool(int index, const std::string& value);
  void set_bytes_pool(int index, std::string&& value);
  void set_bytes_pool(int index, const char* value);
  void set_bytes_pool(int index, const void* value, size_t size);
  std::string* add_bytes_pool();
  void add_bytes_pool(const std::string& value);
  void add_bytes_pool(std::string&& value);
  void add_bytes_pool(const char* value);
  void add_bytes_pool(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes_pool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes_pool();
  private:
  const std::string& _internal_bytes_pool(int index) const;
  std::string* _internal_add_bytes_pool();
  public:

  // @@protoc_insertion_point(class_scope:pb.Prefab)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::WorldObject > world_object_pool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_pool_;
  mutable std::atomic<int> _float_pool_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_pool_;
  mutable std::atomic<int> _double_pool_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_pool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprefab_2eproto;
};
// -------------------------------------------------------------------

class WorldObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.WorldObject) */ {
 public:
  inline WorldObject() : WorldObject(nullptr) {}
  virtual ~WorldObject();

  WorldObject(const WorldObject& from);
  WorldObject(WorldObject&& from) noexcept
    : WorldObject() {
    *this = ::std::move(from);
  }

  inline WorldObject& operator=(const WorldObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldObject& operator=(WorldObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldObject* internal_default_instance() {
    return reinterpret_cast<const WorldObject*>(
               &_WorldObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorldObject& a, WorldObject& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldObject* New() const final {
    return CreateMaybeMessage<WorldObject>(nullptr);
  }

  WorldObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldObject& from);
  void MergeFrom(const WorldObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.WorldObject";
  }
  protected:
  explicit WorldObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprefab_2eproto);
    return ::descriptor_table_pb_2fprefab_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .pb.Member members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::pb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Member >*
      mutable_members();
  private:
  const ::pb::Member& _internal_members(int index) const;
  ::pb::Member* _internal_add_members();
  public:
  const ::pb::Member& members(int index) const;
  ::pb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Member >&
      members() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.WorldObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Member > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprefab_2eproto;
};
// -------------------------------------------------------------------

class Member PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Member) */ {
 public:
  inline Member() : Member(nullptr) {}
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Member";
  }
  protected:
  explicit Member(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprefab_2eproto);
    return ::descriptor_table_pb_2fprefab_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprefab_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Prefab

// repeated .pb.WorldObject world_object_pool = 1;
inline int Prefab::_internal_world_object_pool_size() const {
  return world_object_pool_.size();
}
inline int Prefab::world_object_pool_size() const {
  return _internal_world_object_pool_size();
}
inline void Prefab::clear_world_object_pool() {
  world_object_pool_.Clear();
}
inline ::pb::WorldObject* Prefab::mutable_world_object_pool(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Prefab.world_object_pool)
  return world_object_pool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::WorldObject >*
Prefab::mutable_world_object_pool() {
  // @@protoc_insertion_point(field_mutable_list:pb.Prefab.world_object_pool)
  return &world_object_pool_;
}
inline const ::pb::WorldObject& Prefab::_internal_world_object_pool(int index) const {
  return world_object_pool_.Get(index);
}
inline const ::pb::WorldObject& Prefab::world_object_pool(int index) const {
  // @@protoc_insertion_point(field_get:pb.Prefab.world_object_pool)
  return _internal_world_object_pool(index);
}
inline ::pb::WorldObject* Prefab::_internal_add_world_object_pool() {
  return world_object_pool_.Add();
}
inline ::pb::WorldObject* Prefab::add_world_object_pool() {
  // @@protoc_insertion_point(field_add:pb.Prefab.world_object_pool)
  return _internal_add_world_object_pool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::WorldObject >&
Prefab::world_object_pool() const {
  // @@protoc_insertion_point(field_list:pb.Prefab.world_object_pool)
  return world_object_pool_;
}

// repeated float float_pool = 2;
inline int Prefab::_internal_float_pool_size() const {
  return float_pool_.size();
}
inline int Prefab::float_pool_size() const {
  return _internal_float_pool_size();
}
inline void Prefab::clear_float_pool() {
  float_pool_.Clear();
}
inline float Prefab::_internal_float_pool(int index) const {
  return float_pool_.Get(index);
}
inline float Prefab::float_pool(int index) const {
  // @@protoc_insertion_point(field_get:pb.Prefab.float_pool)
  return _internal_float_pool(index);
}
inline void Prefab::set_float_pool(int index, float value) {
  float_pool_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Prefab.float_pool)
}
inline void Prefab::_internal_add_float_pool(float value) {
  float_pool_.Add(value);
}
inline void Prefab::add_float_pool(float value) {
  _internal_add_float_pool(value);
  // @@protoc_insertion_point(field_add:pb.Prefab.float_pool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Prefab::_internal_float_pool() const {
  return float_pool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Prefab::float_pool() const {
  // @@protoc_insertion_point(field_list:pb.Prefab.float_pool)
  return _internal_float_pool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Prefab::_internal_mutable_float_pool() {
  return &float_pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Prefab::mutable_float_pool() {
  // @@protoc_insertion_point(field_mutable_list:pb.Prefab.float_pool)
  return _internal_mutable_float_pool();
}

// repeated double double_pool = 3;
inline int Prefab::_internal_double_pool_size() const {
  return double_pool_.size();
}
inline int Prefab::double_pool_size() const {
  return _internal_double_pool_size();
}
inline void Prefab::clear_double_pool() {
  double_pool_.Clear();
}
inline double Prefab::_internal_double_pool(int index) const {
  return double_pool_.Get(index);
}
inline double Prefab::double_pool(int index) const {
  // @@protoc_insertion_point(field_get:pb.Prefab.double_pool)
  return _internal_double_pool(index);
}
inline void Prefab::set_double_pool(int index, double value) {
  double_pool_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Prefab.double_pool)
}
inline void Prefab::_internal_add_double_pool(double value) {
  double_pool_.Add(value);
}
inline void Prefab::add_double_pool(double value) {
  _internal_add_double_pool(value);
  // @@protoc_insertion_point(field_add:pb.Prefab.double_pool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Prefab::_internal_double_pool() const {
  return double_pool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Prefab::double_pool() const {
  // @@protoc_insertion_point(field_list:pb.Prefab.double_pool)
  return _internal_double_pool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Prefab::_internal_mutable_double_pool() {
  return &double_pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Prefab::mutable_double_pool() {
  // @@protoc_insertion_point(field_mutable_list:pb.Prefab.double_pool)
  return _internal_mutable_double_pool();
}

// repeated string string_pool = 4;
inline int Prefab::_internal_string_pool_size() const {
  return string_pool_.size();
}
inline int Prefab::string_pool_size() const {
  return _internal_string_pool_size();
}
inline void Prefab::clear_string_pool() {
  string_pool_.Clear();
}
inline std::string* Prefab::add_string_pool() {
  // @@protoc_insertion_point(field_add_mutable:pb.Prefab.string_pool)
  return _internal_add_string_pool();
}
inline const std::string& Prefab::_internal_string_pool(int index) const {
  return string_pool_.Get(index);
}
inline const std::string& Prefab::string_pool(int index) const {
  // @@protoc_insertion_point(field_get:pb.Prefab.string_pool)
  return _internal_string_pool(index);
}
inline std::string* Prefab::mutable_string_pool(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Prefab.string_pool)
  return string_pool_.Mutable(index);
}
inline void Prefab::set_string_pool(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Prefab.string_pool)
  string_pool_.Mutable(index)->assign(value);
}
inline void Prefab::set_string_pool(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Prefab.string_pool)
  string_pool_.Mutable(index)->assign(std::move(value));
}
inline void Prefab::set_string_pool(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_pool_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Prefab.string_pool)
}
inline void Prefab::set_string_pool(int index, const char* value, size_t size) {
  string_pool_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Prefab.string_pool)
}
inline std::string* Prefab::_internal_add_string_pool() {
  return string_pool_.Add();
}
inline void Prefab::add_string_pool(const std::string& value) {
  string_pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Prefab.string_pool)
}
inline void Prefab::add_string_pool(std::string&& value) {
  string_pool_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Prefab.string_pool)
}
inline void Prefab::add_string_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Prefab.string_pool)
}
inline void Prefab::add_string_pool(const char* value, size_t size) {
  string_pool_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Prefab.string_pool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Prefab::string_pool() const {
  // @@protoc_insertion_point(field_list:pb.Prefab.string_pool)
  return string_pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Prefab::mutable_string_pool() {
  // @@protoc_insertion_point(field_mutable_list:pb.Prefab.string_pool)
  return &string_pool_;
}

// repeated bytes bytes_pool = 5;
inline int Prefab::_internal_bytes_pool_size() const {
  return bytes_pool_.size();
}
inline int Prefab::bytes_pool_size() const {
  return _internal_bytes_pool_size();
}
inline void Prefab::clear_bytes_pool() {
  bytes_pool_.Clear();
}
inline std::string* Prefab::add_bytes_pool() {
  // @@protoc_insertion_point(field_add_mutable:pb.Prefab.bytes_pool)
  return _internal_add_bytes_pool();
}
inline const std::string& Prefab::_internal_bytes_pool(int index) const {
  return bytes_pool_.Get(index);
}
inline const std::string& Prefab::bytes_pool(int index) const {
  // @@protoc_insertion_point(field_get:pb.Prefab.bytes_pool)
  return _internal_bytes_pool(index);
}
inline std::string* Prefab::mutable_bytes_pool(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Prefab.bytes_pool)
  return bytes_pool_.Mutable(index);
}
inline void Prefab::set_bytes_pool(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.Prefab.bytes_pool)
  bytes_pool_.Mutable(index)->assign(value);
}
inline void Prefab::set_bytes_pool(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.Prefab.bytes_pool)
  bytes_pool_.Mutable(index)->assign(std::move(value));
}
inline void Prefab::set_bytes_pool(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_pool_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Prefab.bytes_pool)
}
inline void Prefab::set_bytes_pool(int index, const void* value, size_t size) {
  bytes_pool_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Prefab.bytes_pool)
}
inline std::string* Prefab::_internal_add_bytes_pool() {
  return bytes_pool_.Add();
}
inline void Prefab::add_bytes_pool(const std::string& value) {
  bytes_pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.Prefab.bytes_pool)
}
inline void Prefab::add_bytes_pool(std::string&& value) {
  bytes_pool_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.Prefab.bytes_pool)
}
inline void Prefab::add_bytes_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.Prefab.bytes_pool)
}
inline void Prefab::add_bytes_pool(const void* value, size_t size) {
  bytes_pool_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.Prefab.bytes_pool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Prefab::bytes_pool() const {
  // @@protoc_insertion_point(field_list:pb.Prefab.bytes_pool)
  return bytes_pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Prefab::mutable_bytes_pool() {
  // @@protoc_insertion_point(field_mutable_list:pb.Prefab.bytes_pool)
  return &bytes_pool_;
}

// -------------------------------------------------------------------

// WorldObject

// int32 id = 1;
inline void WorldObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldObject::id() const {
  // @@protoc_insertion_point(field_get:pb.WorldObject.id)
  return _internal_id();
}
inline void WorldObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void WorldObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.WorldObject.id)
}

// string name = 2;
inline void WorldObject::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorldObject::name() const {
  // @@protoc_insertion_point(field_get:pb.WorldObject.name)
  return _internal_name();
}
inline void WorldObject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.WorldObject.name)
}
inline std::string* WorldObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.WorldObject.name)
  return _internal_mutable_name();
}
inline const std::string& WorldObject::_internal_name() const {
  return name_.Get();
}
inline void WorldObject::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorldObject::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.WorldObject.name)
}
inline void WorldObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.WorldObject.name)
}
inline void WorldObject::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.WorldObject.name)
}
inline std::string* WorldObject::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorldObject::release_name() {
  // @@protoc_insertion_point(field_release:pb.WorldObject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorldObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.WorldObject.name)
}

// string type = 3;
inline void WorldObject::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorldObject::type() const {
  // @@protoc_insertion_point(field_get:pb.WorldObject.type)
  return _internal_type();
}
inline void WorldObject::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.WorldObject.type)
}
inline std::string* WorldObject::mutable_type() {
  // @@protoc_insertion_point(field_mutable:pb.WorldObject.type)
  return _internal_mutable_type();
}
inline const std::string& WorldObject::_internal_type() const {
  return type_.Get();
}
inline void WorldObject::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorldObject::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.WorldObject.type)
}
inline void WorldObject::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.WorldObject.type)
}
inline void WorldObject::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.WorldObject.type)
}
inline std::string* WorldObject::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorldObject::release_type() {
  // @@protoc_insertion_point(field_release:pb.WorldObject.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorldObject::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.WorldObject.type)
}

// repeated .pb.Member members = 4;
inline int WorldObject::_internal_members_size() const {
  return members_.size();
}
inline int WorldObject::members_size() const {
  return _internal_members_size();
}
inline void WorldObject::clear_members() {
  members_.Clear();
}
inline ::pb::Member* WorldObject::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:pb.WorldObject.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Member >*
WorldObject::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:pb.WorldObject.members)
  return &members_;
}
inline const ::pb::Member& WorldObject::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::pb::Member& WorldObject::members(int index) const {
  // @@protoc_insertion_point(field_get:pb.WorldObject.members)
  return _internal_members(index);
}
inline ::pb::Member* WorldObject::_internal_add_members() {
  return members_.Add();
}
inline ::pb::Member* WorldObject::add_members() {
  // @@protoc_insertion_point(field_add:pb.WorldObject.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Member >&
WorldObject::members() const {
  // @@protoc_insertion_point(field_list:pb.WorldObject.members)
  return members_;
}

// -------------------------------------------------------------------

// Member

// string key = 1;
inline void Member::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Member::key() const {
  // @@protoc_insertion_point(field_get:pb.Member.key)
  return _internal_key();
}
inline void Member::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:pb.Member.key)
}
inline std::string* Member::mutable_key() {
  // @@protoc_insertion_point(field_mutable:pb.Member.key)
  return _internal_mutable_key();
}
inline const std::string& Member::_internal_key() const {
  return key_.Get();
}
inline void Member::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Member::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Member.key)
}
inline void Member::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Member.key)
}
inline void Member::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Member.key)
}
inline std::string* Member::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Member::release_key() {
  // @@protoc_insertion_point(field_release:pb.Member.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Member::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Member.key)
}

// int32 value = 2;
inline void Member::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Member::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Member::value() const {
  // @@protoc_insertion_point(field_get:pb.Member.value)
  return _internal_value();
}
inline void Member::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Member::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pb.Member.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fprefab_2eproto
