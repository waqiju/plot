// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/prophet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fprophet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fprophet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pb/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fprophet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fprophet_2eproto;
namespace pb {
class DailyMinute;
class DailyMinuteDefaultTypeInternal;
extern DailyMinuteDefaultTypeInternal _DailyMinute_default_instance_;
class FetchIndicatorResponse;
class FetchIndicatorResponseDefaultTypeInternal;
extern FetchIndicatorResponseDefaultTypeInternal _FetchIndicatorResponse_default_instance_;
class IndicatorSet;
class IndicatorSetDefaultTypeInternal;
extern IndicatorSetDefaultTypeInternal _IndicatorSet_default_instance_;
class KChart;
class KChartDefaultTypeInternal;
extern KChartDefaultTypeInternal _KChart_default_instance_;
class LiveSet;
class LiveSetDefaultTypeInternal;
extern LiveSetDefaultTypeInternal _LiveSet_default_instance_;
class MA;
class MADefaultTypeInternal;
extern MADefaultTypeInternal _MA_default_instance_;
class Segment;
class SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class StockDateInterval;
class StockDateIntervalDefaultTypeInternal;
extern StockDateIntervalDefaultTypeInternal _StockDateInterval_default_instance_;
class TrueRange;
class TrueRangeDefaultTypeInternal;
extern TrueRangeDefaultTypeInternal _TrueRange_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::DailyMinute* Arena::CreateMaybeMessage<::pb::DailyMinute>(Arena*);
template<> ::pb::FetchIndicatorResponse* Arena::CreateMaybeMessage<::pb::FetchIndicatorResponse>(Arena*);
template<> ::pb::IndicatorSet* Arena::CreateMaybeMessage<::pb::IndicatorSet>(Arena*);
template<> ::pb::KChart* Arena::CreateMaybeMessage<::pb::KChart>(Arena*);
template<> ::pb::LiveSet* Arena::CreateMaybeMessage<::pb::LiveSet>(Arena*);
template<> ::pb::MA* Arena::CreateMaybeMessage<::pb::MA>(Arena*);
template<> ::pb::Segment* Arena::CreateMaybeMessage<::pb::Segment>(Arena*);
template<> ::pb::StockDateInterval* Arena::CreateMaybeMessage<::pb::StockDateInterval>(Arena*);
template<> ::pb::TrueRange* Arena::CreateMaybeMessage<::pb::TrueRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class StockDateInterval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.StockDateInterval) */ {
 public:
  inline StockDateInterval() : StockDateInterval(nullptr) {}
  virtual ~StockDateInterval();

  StockDateInterval(const StockDateInterval& from);
  StockDateInterval(StockDateInterval&& from) noexcept
    : StockDateInterval() {
    *this = ::std::move(from);
  }

  inline StockDateInterval& operator=(const StockDateInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockDateInterval& operator=(StockDateInterval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StockDateInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StockDateInterval* internal_default_instance() {
    return reinterpret_cast<const StockDateInterval*>(
               &_StockDateInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StockDateInterval& a, StockDateInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(StockDateInterval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockDateInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StockDateInterval* New() const final {
    return CreateMaybeMessage<StockDateInterval>(nullptr);
  }

  StockDateInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StockDateInterval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StockDateInterval& from);
  void MergeFrom(const StockDateInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockDateInterval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.StockDateInterval";
  }
  protected:
  explicit StockDateInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // uint32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.StockDateInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class IndicatorSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.IndicatorSet) */ {
 public:
  inline IndicatorSet() : IndicatorSet(nullptr) {}
  virtual ~IndicatorSet();

  IndicatorSet(const IndicatorSet& from);
  IndicatorSet(IndicatorSet&& from) noexcept
    : IndicatorSet() {
    *this = ::std::move(from);
  }

  inline IndicatorSet& operator=(const IndicatorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicatorSet& operator=(IndicatorSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndicatorSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndicatorSet* internal_default_instance() {
    return reinterpret_cast<const IndicatorSet*>(
               &_IndicatorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndicatorSet& a, IndicatorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(IndicatorSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicatorSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndicatorSet* New() const final {
    return CreateMaybeMessage<IndicatorSet>(nullptr);
  }

  IndicatorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndicatorSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndicatorSet& from);
  void MergeFrom(const IndicatorSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndicatorSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.IndicatorSet";
  }
  protected:
  explicit IndicatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateListFieldNumber = 3,
    kDailyListFieldNumber = 4,
    kDailyMaListFieldNumber = 5,
    kWeeklyListFieldNumber = 6,
    kWeeklyMaListFieldNumber = 7,
    kTrueRangeListFieldNumber = 8,
    kSegmentListFieldNumber = 9,
    kDailyMinuteListFieldNumber = 10,
    kTimestampFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated uint32 date_list = 3;
  int date_list_size() const;
  private:
  int _internal_date_list_size() const;
  public:
  void clear_date_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_date_list() const;
  void _internal_add_date_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_date_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 date_list(int index) const;
  void set_date_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_date_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      date_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_date_list();

  // repeated .pb.KChart daily_list = 4;
  int daily_list_size() const;
  private:
  int _internal_daily_list_size() const;
  public:
  void clear_daily_list();
  ::pb::KChart* mutable_daily_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
      mutable_daily_list();
  private:
  const ::pb::KChart& _internal_daily_list(int index) const;
  ::pb::KChart* _internal_add_daily_list();
  public:
  const ::pb::KChart& daily_list(int index) const;
  ::pb::KChart* add_daily_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
      daily_list() const;

  // repeated .pb.MA daily_ma_list = 5;
  int daily_ma_list_size() const;
  private:
  int _internal_daily_ma_list_size() const;
  public:
  void clear_daily_ma_list();
  ::pb::MA* mutable_daily_ma_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >*
      mutable_daily_ma_list();
  private:
  const ::pb::MA& _internal_daily_ma_list(int index) const;
  ::pb::MA* _internal_add_daily_ma_list();
  public:
  const ::pb::MA& daily_ma_list(int index) const;
  ::pb::MA* add_daily_ma_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >&
      daily_ma_list() const;

  // repeated .pb.KChart weekly_list = 6;
  int weekly_list_size() const;
  private:
  int _internal_weekly_list_size() const;
  public:
  void clear_weekly_list();
  ::pb::KChart* mutable_weekly_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
      mutable_weekly_list();
  private:
  const ::pb::KChart& _internal_weekly_list(int index) const;
  ::pb::KChart* _internal_add_weekly_list();
  public:
  const ::pb::KChart& weekly_list(int index) const;
  ::pb::KChart* add_weekly_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
      weekly_list() const;

  // repeated .pb.MA weekly_ma_list = 7;
  int weekly_ma_list_size() const;
  private:
  int _internal_weekly_ma_list_size() const;
  public:
  void clear_weekly_ma_list();
  ::pb::MA* mutable_weekly_ma_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >*
      mutable_weekly_ma_list();
  private:
  const ::pb::MA& _internal_weekly_ma_list(int index) const;
  ::pb::MA* _internal_add_weekly_ma_list();
  public:
  const ::pb::MA& weekly_ma_list(int index) const;
  ::pb::MA* add_weekly_ma_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >&
      weekly_ma_list() const;

  // repeated .pb.TrueRange true_range_list = 8;
  int true_range_list_size() const;
  private:
  int _internal_true_range_list_size() const;
  public:
  void clear_true_range_list();
  ::pb::TrueRange* mutable_true_range_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TrueRange >*
      mutable_true_range_list();
  private:
  const ::pb::TrueRange& _internal_true_range_list(int index) const;
  ::pb::TrueRange* _internal_add_true_range_list();
  public:
  const ::pb::TrueRange& true_range_list(int index) const;
  ::pb::TrueRange* add_true_range_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TrueRange >&
      true_range_list() const;

  // repeated .pb.Segment segment_list = 9;
  int segment_list_size() const;
  private:
  int _internal_segment_list_size() const;
  public:
  void clear_segment_list();
  ::pb::Segment* mutable_segment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Segment >*
      mutable_segment_list();
  private:
  const ::pb::Segment& _internal_segment_list(int index) const;
  ::pb::Segment* _internal_add_segment_list();
  public:
  const ::pb::Segment& segment_list(int index) const;
  ::pb::Segment* add_segment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Segment >&
      segment_list() const;

  // repeated .pb.DailyMinute daily_minute_list = 10;
  int daily_minute_list_size() const;
  private:
  int _internal_daily_minute_list_size() const;
  public:
  void clear_daily_minute_list();
  ::pb::DailyMinute* mutable_daily_minute_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::DailyMinute >*
      mutable_daily_minute_list();
  private:
  const ::pb::DailyMinute& _internal_daily_minute_list(int index) const;
  ::pb::DailyMinute* _internal_add_daily_minute_list();
  public:
  const ::pb::DailyMinute& daily_minute_list(int index) const;
  ::pb::DailyMinute* add_daily_minute_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::DailyMinute >&
      daily_minute_list() const;

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.IndicatorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > date_list_;
  mutable std::atomic<int> _date_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart > daily_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA > daily_ma_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart > weekly_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA > weekly_ma_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TrueRange > true_range_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Segment > segment_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::DailyMinute > daily_minute_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class FetchIndicatorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.FetchIndicatorResponse) */ {
 public:
  inline FetchIndicatorResponse() : FetchIndicatorResponse(nullptr) {}
  virtual ~FetchIndicatorResponse();

  FetchIndicatorResponse(const FetchIndicatorResponse& from);
  FetchIndicatorResponse(FetchIndicatorResponse&& from) noexcept
    : FetchIndicatorResponse() {
    *this = ::std::move(from);
  }

  inline FetchIndicatorResponse& operator=(const FetchIndicatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchIndicatorResponse& operator=(FetchIndicatorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchIndicatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchIndicatorResponse* internal_default_instance() {
    return reinterpret_cast<const FetchIndicatorResponse*>(
               &_FetchIndicatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchIndicatorResponse& a, FetchIndicatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchIndicatorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchIndicatorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchIndicatorResponse* New() const final {
    return CreateMaybeMessage<FetchIndicatorResponse>(nullptr);
  }

  FetchIndicatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchIndicatorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchIndicatorResponse& from);
  void MergeFrom(const FetchIndicatorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchIndicatorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.FetchIndicatorResponse";
  }
  protected:
  explicit FetchIndicatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kIndicatorSetFieldNumber = 2,
  };
  // .pb.ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::pb::ResultInfo& result() const;
  ::pb::ResultInfo* release_result();
  ::pb::ResultInfo* mutable_result();
  void set_allocated_result(::pb::ResultInfo* result);
  private:
  const ::pb::ResultInfo& _internal_result() const;
  ::pb::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::pb::ResultInfo* result);
  ::pb::ResultInfo* unsafe_arena_release_result();

  // .pb.IndicatorSet indicator_set = 2;
  bool has_indicator_set() const;
  private:
  bool _internal_has_indicator_set() const;
  public:
  void clear_indicator_set();
  const ::pb::IndicatorSet& indicator_set() const;
  ::pb::IndicatorSet* release_indicator_set();
  ::pb::IndicatorSet* mutable_indicator_set();
  void set_allocated_indicator_set(::pb::IndicatorSet* indicator_set);
  private:
  const ::pb::IndicatorSet& _internal_indicator_set() const;
  ::pb::IndicatorSet* _internal_mutable_indicator_set();
  public:
  void unsafe_arena_set_allocated_indicator_set(
      ::pb::IndicatorSet* indicator_set);
  ::pb::IndicatorSet* unsafe_arena_release_indicator_set();

  // @@protoc_insertion_point(class_scope:pb.FetchIndicatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::ResultInfo* result_;
  ::pb::IndicatorSet* indicator_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class LiveSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LiveSet) */ {
 public:
  inline LiveSet() : LiveSet(nullptr) {}
  virtual ~LiveSet();

  LiveSet(const LiveSet& from);
  LiveSet(LiveSet&& from) noexcept
    : LiveSet() {
    *this = ::std::move(from);
  }

  inline LiveSet& operator=(const LiveSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveSet& operator=(LiveSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiveSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiveSet* internal_default_instance() {
    return reinterpret_cast<const LiveSet*>(
               &_LiveSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LiveSet& a, LiveSet& b) {
    a.Swap(&b);
  }
  inline void Swap(LiveSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiveSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiveSet* New() const final {
    return CreateMaybeMessage<LiveSet>(nullptr);
  }

  LiveSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiveSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiveSet& from);
  void MergeFrom(const LiveSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiveSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LiveSet";
  }
  protected:
  explicit LiveSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // .pb.KChart daily = 3;
  bool has_daily() const;
  private:
  bool _internal_has_daily() const;
  public:
  void clear_daily();
  const ::pb::KChart& daily() const;
  ::pb::KChart* release_daily();
  ::pb::KChart* mutable_daily();
  void set_allocated_daily(::pb::KChart* daily);
  private:
  const ::pb::KChart& _internal_daily() const;
  ::pb::KChart* _internal_mutable_daily();
  public:
  void unsafe_arena_set_allocated_daily(
      ::pb::KChart* daily);
  ::pb::KChart* unsafe_arena_release_daily();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LiveSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::KChart* daily_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class KChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.KChart) */ {
 public:
  inline KChart() : KChart(nullptr) {}
  virtual ~KChart();

  KChart(const KChart& from);
  KChart(KChart&& from) noexcept
    : KChart() {
    *this = ::std::move(from);
  }

  inline KChart& operator=(const KChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline KChart& operator=(KChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KChart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KChart* internal_default_instance() {
    return reinterpret_cast<const KChart*>(
               &_KChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KChart& a, KChart& b) {
    a.Swap(&b);
  }
  inline void Swap(KChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KChart* New() const final {
    return CreateMaybeMessage<KChart>(nullptr);
  }

  KChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KChart& from);
  void MergeFrom(const KChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.KChart";
  }
  protected:
  explicit KChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDateFieldNumber = 2,
    kTimeFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kCloseFieldNumber = 7,
    kChangeFieldNumber = 8,
    kVolFieldNumber = 9,
    kAmountFieldNumber = 10,
    kOriginalOpenFieldNumber = 11,
    kOriginalHighFieldNumber = 12,
    kOriginalLowFieldNumber = 13,
    kOriginalCloseFieldNumber = 14,
    kAdjustFactorFieldNumber = 15,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // double open = 4;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double high = 5;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 6;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double close = 7;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // double change = 8;
  void clear_change();
  double change() const;
  void set_change(double value);
  private:
  double _internal_change() const;
  void _internal_set_change(double value);
  public:

  // double vol = 9;
  void clear_vol();
  double vol() const;
  void set_vol(double value);
  private:
  double _internal_vol() const;
  void _internal_set_vol(double value);
  public:

  // double amount = 10;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // double original_open = 11;
  void clear_original_open();
  double original_open() const;
  void set_original_open(double value);
  private:
  double _internal_original_open() const;
  void _internal_set_original_open(double value);
  public:

  // double original_high = 12;
  void clear_original_high();
  double original_high() const;
  void set_original_high(double value);
  private:
  double _internal_original_high() const;
  void _internal_set_original_high(double value);
  public:

  // double original_low = 13;
  void clear_original_low();
  double original_low() const;
  void set_original_low(double value);
  private:
  double _internal_original_low() const;
  void _internal_set_original_low(double value);
  public:

  // double original_close = 14;
  void clear_original_close();
  double original_close() const;
  void set_original_close(double value);
  private:
  double _internal_original_close() const;
  void _internal_set_original_close(double value);
  public:

  // double adjust_factor = 15;
  void clear_adjust_factor();
  double adjust_factor() const;
  void set_adjust_factor(double value);
  private:
  double _internal_adjust_factor() const;
  void _internal_set_adjust_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.KChart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  double open_;
  double high_;
  double low_;
  double close_;
  double change_;
  double vol_;
  double amount_;
  double original_open_;
  double original_high_;
  double original_low_;
  double original_close_;
  double adjust_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class MA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.MA) */ {
 public:
  inline MA() : MA(nullptr) {}
  virtual ~MA();

  MA(const MA& from);
  MA(MA&& from) noexcept
    : MA() {
    *this = ::std::move(from);
  }

  inline MA& operator=(const MA& from) {
    CopyFrom(from);
    return *this;
  }
  inline MA& operator=(MA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MA* internal_default_instance() {
    return reinterpret_cast<const MA*>(
               &_MA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MA& a, MA& b) {
    a.Swap(&b);
  }
  inline void Swap(MA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MA* New() const final {
    return CreateMaybeMessage<MA>(nullptr);
  }

  MA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MA& from);
  void MergeFrom(const MA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.MA";
  }
  protected:
  explicit MA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDateFieldNumber = 2,
    kLast1FieldNumber = 3,
    kLast5FieldNumber = 4,
    kLast10FieldNumber = 5,
    kLast20FieldNumber = 6,
    kLast60FieldNumber = 7,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // double last_1 = 3;
  void clear_last_1();
  double last_1() const;
  void set_last_1(double value);
  private:
  double _internal_last_1() const;
  void _internal_set_last_1(double value);
  public:

  // double last_5 = 4;
  void clear_last_5();
  double last_5() const;
  void set_last_5(double value);
  private:
  double _internal_last_5() const;
  void _internal_set_last_5(double value);
  public:

  // double last_10 = 5;
  void clear_last_10();
  double last_10() const;
  void set_last_10(double value);
  private:
  double _internal_last_10() const;
  void _internal_set_last_10(double value);
  public:

  // double last_20 = 6;
  void clear_last_20();
  double last_20() const;
  void set_last_20(double value);
  private:
  double _internal_last_20() const;
  void _internal_set_last_20(double value);
  public:

  // double last_60 = 7;
  void clear_last_60();
  double last_60() const;
  void set_last_60(double value);
  private:
  double _internal_last_60() const;
  void _internal_set_last_60(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.MA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  double last_1_;
  double last_5_;
  double last_10_;
  double last_20_;
  double last_60_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class TrueRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.TrueRange) */ {
 public:
  inline TrueRange() : TrueRange(nullptr) {}
  virtual ~TrueRange();

  TrueRange(const TrueRange& from);
  TrueRange(TrueRange&& from) noexcept
    : TrueRange() {
    *this = ::std::move(from);
  }

  inline TrueRange& operator=(const TrueRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrueRange& operator=(TrueRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrueRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrueRange* internal_default_instance() {
    return reinterpret_cast<const TrueRange*>(
               &_TrueRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrueRange& a, TrueRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TrueRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrueRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrueRange* New() const final {
    return CreateMaybeMessage<TrueRange>(nullptr);
  }

  TrueRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrueRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrueRange& from);
  void MergeFrom(const TrueRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrueRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.TrueRange";
  }
  protected:
  explicit TrueRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDateFieldNumber = 2,
    kRangeFieldNumber = 3,
    kAverageFieldNumber = 4,
    kGentleFieldNumber = 5,
    kGentle60FieldNumber = 6,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // double range = 3;
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // double average = 4;
  void clear_average();
  double average() const;
  void set_average(double value);
  private:
  double _internal_average() const;
  void _internal_set_average(double value);
  public:

  // double gentle = 5;
  void clear_gentle();
  double gentle() const;
  void set_gentle(double value);
  private:
  double _internal_gentle() const;
  void _internal_set_gentle(double value);
  public:

  // double gentle_60 = 6;
  void clear_gentle_60();
  double gentle_60() const;
  void set_gentle_60(double value);
  private:
  double _internal_gentle_60() const;
  void _internal_set_gentle_60(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.TrueRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  double range_;
  double average_;
  double gentle_;
  double gentle_60_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class Segment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {}
  virtual ~Segment();

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment* New() const final {
    return CreateMaybeMessage<Segment>(nullptr);
  }

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDateFieldNumber = 2,
    kStartDateFieldNumber = 4,
    kLowDateFieldNumber = 7,
    kHighDateFieldNumber = 9,
    kDirectionFieldNumber = 3,
    kGentleRangeFieldNumber = 5,
    kLowFieldNumber = 6,
    kHighFieldNumber = 8,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string start_date = 4;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string low_date = 7;
  void clear_low_date();
  const std::string& low_date() const;
  void set_low_date(const std::string& value);
  void set_low_date(std::string&& value);
  void set_low_date(const char* value);
  void set_low_date(const char* value, size_t size);
  std::string* mutable_low_date();
  std::string* release_low_date();
  void set_allocated_low_date(std::string* low_date);
  private:
  const std::string& _internal_low_date() const;
  void _internal_set_low_date(const std::string& value);
  std::string* _internal_mutable_low_date();
  public:

  // string high_date = 9;
  void clear_high_date();
  const std::string& high_date() const;
  void set_high_date(const std::string& value);
  void set_high_date(std::string&& value);
  void set_high_date(const char* value);
  void set_high_date(const char* value, size_t size);
  std::string* mutable_high_date();
  std::string* release_high_date();
  void set_allocated_high_date(std::string* high_date);
  private:
  const std::string& _internal_high_date() const;
  void _internal_set_high_date(const std::string& value);
  std::string* _internal_mutable_high_date();
  public:

  // double direction = 3;
  void clear_direction();
  double direction() const;
  void set_direction(double value);
  private:
  double _internal_direction() const;
  void _internal_set_direction(double value);
  public:

  // double gentle_range = 5;
  void clear_gentle_range();
  double gentle_range() const;
  void set_gentle_range(double value);
  private:
  double _internal_gentle_range() const;
  void _internal_set_gentle_range(double value);
  public:

  // double low = 6;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double high = 8;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Segment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr low_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr high_date_;
  double direction_;
  double gentle_range_;
  double low_;
  double high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// -------------------------------------------------------------------

class DailyMinute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.DailyMinute) */ {
 public:
  inline DailyMinute() : DailyMinute(nullptr) {}
  virtual ~DailyMinute();

  DailyMinute(const DailyMinute& from);
  DailyMinute(DailyMinute&& from) noexcept
    : DailyMinute() {
    *this = ::std::move(from);
  }

  inline DailyMinute& operator=(const DailyMinute& from) {
    CopyFrom(from);
    return *this;
  }
  inline DailyMinute& operator=(DailyMinute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DailyMinute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DailyMinute* internal_default_instance() {
    return reinterpret_cast<const DailyMinute*>(
               &_DailyMinute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DailyMinute& a, DailyMinute& b) {
    a.Swap(&b);
  }
  inline void Swap(DailyMinute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DailyMinute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DailyMinute* New() const final {
    return CreateMaybeMessage<DailyMinute>(nullptr);
  }

  DailyMinute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DailyMinute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DailyMinute& from);
  void MergeFrom(const DailyMinute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DailyMinute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.DailyMinute";
  }
  protected:
  explicit DailyMinute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fprophet_2eproto);
    return ::descriptor_table_pb_2fprophet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinuteListFieldNumber = 3,
    kCodeFieldNumber = 1,
    kDateFieldNumber = 2,
  };
  // repeated .pb.KChart minute_list = 3;
  int minute_list_size() const;
  private:
  int _internal_minute_list_size() const;
  public:
  void clear_minute_list();
  ::pb::KChart* mutable_minute_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
      mutable_minute_list();
  private:
  const ::pb::KChart& _internal_minute_list(int index) const;
  ::pb::KChart* _internal_add_minute_list();
  public:
  const ::pb::KChart& minute_list(int index) const;
  ::pb::KChart* add_minute_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
      minute_list() const;

  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:pb.DailyMinute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart > minute_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fprophet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StockDateInterval

// string code = 1;
inline void StockDateInterval::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StockDateInterval::code() const {
  // @@protoc_insertion_point(field_get:pb.StockDateInterval.code)
  return _internal_code();
}
inline void StockDateInterval::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.StockDateInterval.code)
}
inline std::string* StockDateInterval::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.StockDateInterval.code)
  return _internal_mutable_code();
}
inline const std::string& StockDateInterval::_internal_code() const {
  return code_.Get();
}
inline void StockDateInterval::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StockDateInterval::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.StockDateInterval.code)
}
inline void StockDateInterval::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.StockDateInterval.code)
}
inline void StockDateInterval::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.StockDateInterval.code)
}
inline std::string* StockDateInterval::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StockDateInterval::release_code() {
  // @@protoc_insertion_point(field_release:pb.StockDateInterval.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StockDateInterval::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.StockDateInterval.code)
}

// uint32 start = 2;
inline void StockDateInterval::clear_start() {
  start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockDateInterval::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockDateInterval::start() const {
  // @@protoc_insertion_point(field_get:pb.StockDateInterval.start)
  return _internal_start();
}
inline void StockDateInterval::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ = value;
}
inline void StockDateInterval::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:pb.StockDateInterval.start)
}

// uint32 end = 3;
inline void StockDateInterval::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockDateInterval::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StockDateInterval::end() const {
  // @@protoc_insertion_point(field_get:pb.StockDateInterval.end)
  return _internal_end();
}
inline void StockDateInterval::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void StockDateInterval::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:pb.StockDateInterval.end)
}

// -------------------------------------------------------------------

// IndicatorSet

// uint64 timestamp = 1;
inline void IndicatorSet::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndicatorSet::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndicatorSet::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.timestamp)
  return _internal_timestamp();
}
inline void IndicatorSet::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void IndicatorSet::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.IndicatorSet.timestamp)
}

// uint64 version = 2;
inline void IndicatorSet::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndicatorSet::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IndicatorSet::version() const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.version)
  return _internal_version();
}
inline void IndicatorSet::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void IndicatorSet::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.IndicatorSet.version)
}

// repeated uint32 date_list = 3;
inline int IndicatorSet::_internal_date_list_size() const {
  return date_list_.size();
}
inline int IndicatorSet::date_list_size() const {
  return _internal_date_list_size();
}
inline void IndicatorSet::clear_date_list() {
  date_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndicatorSet::_internal_date_list(int index) const {
  return date_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndicatorSet::date_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.date_list)
  return _internal_date_list(index);
}
inline void IndicatorSet::set_date_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  date_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.IndicatorSet.date_list)
}
inline void IndicatorSet::_internal_add_date_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  date_list_.Add(value);
}
inline void IndicatorSet::add_date_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_date_list(value);
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.date_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IndicatorSet::_internal_date_list() const {
  return date_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IndicatorSet::date_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.date_list)
  return _internal_date_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IndicatorSet::_internal_mutable_date_list() {
  return &date_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IndicatorSet::mutable_date_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.date_list)
  return _internal_mutable_date_list();
}

// repeated .pb.KChart daily_list = 4;
inline int IndicatorSet::_internal_daily_list_size() const {
  return daily_list_.size();
}
inline int IndicatorSet::daily_list_size() const {
  return _internal_daily_list_size();
}
inline void IndicatorSet::clear_daily_list() {
  daily_list_.Clear();
}
inline ::pb::KChart* IndicatorSet::mutable_daily_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.daily_list)
  return daily_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
IndicatorSet::mutable_daily_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.daily_list)
  return &daily_list_;
}
inline const ::pb::KChart& IndicatorSet::_internal_daily_list(int index) const {
  return daily_list_.Get(index);
}
inline const ::pb::KChart& IndicatorSet::daily_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.daily_list)
  return _internal_daily_list(index);
}
inline ::pb::KChart* IndicatorSet::_internal_add_daily_list() {
  return daily_list_.Add();
}
inline ::pb::KChart* IndicatorSet::add_daily_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.daily_list)
  return _internal_add_daily_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
IndicatorSet::daily_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.daily_list)
  return daily_list_;
}

// repeated .pb.MA daily_ma_list = 5;
inline int IndicatorSet::_internal_daily_ma_list_size() const {
  return daily_ma_list_.size();
}
inline int IndicatorSet::daily_ma_list_size() const {
  return _internal_daily_ma_list_size();
}
inline void IndicatorSet::clear_daily_ma_list() {
  daily_ma_list_.Clear();
}
inline ::pb::MA* IndicatorSet::mutable_daily_ma_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.daily_ma_list)
  return daily_ma_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >*
IndicatorSet::mutable_daily_ma_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.daily_ma_list)
  return &daily_ma_list_;
}
inline const ::pb::MA& IndicatorSet::_internal_daily_ma_list(int index) const {
  return daily_ma_list_.Get(index);
}
inline const ::pb::MA& IndicatorSet::daily_ma_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.daily_ma_list)
  return _internal_daily_ma_list(index);
}
inline ::pb::MA* IndicatorSet::_internal_add_daily_ma_list() {
  return daily_ma_list_.Add();
}
inline ::pb::MA* IndicatorSet::add_daily_ma_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.daily_ma_list)
  return _internal_add_daily_ma_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >&
IndicatorSet::daily_ma_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.daily_ma_list)
  return daily_ma_list_;
}

// repeated .pb.KChart weekly_list = 6;
inline int IndicatorSet::_internal_weekly_list_size() const {
  return weekly_list_.size();
}
inline int IndicatorSet::weekly_list_size() const {
  return _internal_weekly_list_size();
}
inline void IndicatorSet::clear_weekly_list() {
  weekly_list_.Clear();
}
inline ::pb::KChart* IndicatorSet::mutable_weekly_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.weekly_list)
  return weekly_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
IndicatorSet::mutable_weekly_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.weekly_list)
  return &weekly_list_;
}
inline const ::pb::KChart& IndicatorSet::_internal_weekly_list(int index) const {
  return weekly_list_.Get(index);
}
inline const ::pb::KChart& IndicatorSet::weekly_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.weekly_list)
  return _internal_weekly_list(index);
}
inline ::pb::KChart* IndicatorSet::_internal_add_weekly_list() {
  return weekly_list_.Add();
}
inline ::pb::KChart* IndicatorSet::add_weekly_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.weekly_list)
  return _internal_add_weekly_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
IndicatorSet::weekly_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.weekly_list)
  return weekly_list_;
}

// repeated .pb.MA weekly_ma_list = 7;
inline int IndicatorSet::_internal_weekly_ma_list_size() const {
  return weekly_ma_list_.size();
}
inline int IndicatorSet::weekly_ma_list_size() const {
  return _internal_weekly_ma_list_size();
}
inline void IndicatorSet::clear_weekly_ma_list() {
  weekly_ma_list_.Clear();
}
inline ::pb::MA* IndicatorSet::mutable_weekly_ma_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.weekly_ma_list)
  return weekly_ma_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >*
IndicatorSet::mutable_weekly_ma_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.weekly_ma_list)
  return &weekly_ma_list_;
}
inline const ::pb::MA& IndicatorSet::_internal_weekly_ma_list(int index) const {
  return weekly_ma_list_.Get(index);
}
inline const ::pb::MA& IndicatorSet::weekly_ma_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.weekly_ma_list)
  return _internal_weekly_ma_list(index);
}
inline ::pb::MA* IndicatorSet::_internal_add_weekly_ma_list() {
  return weekly_ma_list_.Add();
}
inline ::pb::MA* IndicatorSet::add_weekly_ma_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.weekly_ma_list)
  return _internal_add_weekly_ma_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::MA >&
IndicatorSet::weekly_ma_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.weekly_ma_list)
  return weekly_ma_list_;
}

// repeated .pb.TrueRange true_range_list = 8;
inline int IndicatorSet::_internal_true_range_list_size() const {
  return true_range_list_.size();
}
inline int IndicatorSet::true_range_list_size() const {
  return _internal_true_range_list_size();
}
inline void IndicatorSet::clear_true_range_list() {
  true_range_list_.Clear();
}
inline ::pb::TrueRange* IndicatorSet::mutable_true_range_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.true_range_list)
  return true_range_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TrueRange >*
IndicatorSet::mutable_true_range_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.true_range_list)
  return &true_range_list_;
}
inline const ::pb::TrueRange& IndicatorSet::_internal_true_range_list(int index) const {
  return true_range_list_.Get(index);
}
inline const ::pb::TrueRange& IndicatorSet::true_range_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.true_range_list)
  return _internal_true_range_list(index);
}
inline ::pb::TrueRange* IndicatorSet::_internal_add_true_range_list() {
  return true_range_list_.Add();
}
inline ::pb::TrueRange* IndicatorSet::add_true_range_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.true_range_list)
  return _internal_add_true_range_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::TrueRange >&
IndicatorSet::true_range_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.true_range_list)
  return true_range_list_;
}

// repeated .pb.Segment segment_list = 9;
inline int IndicatorSet::_internal_segment_list_size() const {
  return segment_list_.size();
}
inline int IndicatorSet::segment_list_size() const {
  return _internal_segment_list_size();
}
inline void IndicatorSet::clear_segment_list() {
  segment_list_.Clear();
}
inline ::pb::Segment* IndicatorSet::mutable_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.segment_list)
  return segment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Segment >*
IndicatorSet::mutable_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.segment_list)
  return &segment_list_;
}
inline const ::pb::Segment& IndicatorSet::_internal_segment_list(int index) const {
  return segment_list_.Get(index);
}
inline const ::pb::Segment& IndicatorSet::segment_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.segment_list)
  return _internal_segment_list(index);
}
inline ::pb::Segment* IndicatorSet::_internal_add_segment_list() {
  return segment_list_.Add();
}
inline ::pb::Segment* IndicatorSet::add_segment_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.segment_list)
  return _internal_add_segment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Segment >&
IndicatorSet::segment_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.segment_list)
  return segment_list_;
}

// repeated .pb.DailyMinute daily_minute_list = 10;
inline int IndicatorSet::_internal_daily_minute_list_size() const {
  return daily_minute_list_.size();
}
inline int IndicatorSet::daily_minute_list_size() const {
  return _internal_daily_minute_list_size();
}
inline void IndicatorSet::clear_daily_minute_list() {
  daily_minute_list_.Clear();
}
inline ::pb::DailyMinute* IndicatorSet::mutable_daily_minute_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.IndicatorSet.daily_minute_list)
  return daily_minute_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::DailyMinute >*
IndicatorSet::mutable_daily_minute_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.IndicatorSet.daily_minute_list)
  return &daily_minute_list_;
}
inline const ::pb::DailyMinute& IndicatorSet::_internal_daily_minute_list(int index) const {
  return daily_minute_list_.Get(index);
}
inline const ::pb::DailyMinute& IndicatorSet::daily_minute_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.IndicatorSet.daily_minute_list)
  return _internal_daily_minute_list(index);
}
inline ::pb::DailyMinute* IndicatorSet::_internal_add_daily_minute_list() {
  return daily_minute_list_.Add();
}
inline ::pb::DailyMinute* IndicatorSet::add_daily_minute_list() {
  // @@protoc_insertion_point(field_add:pb.IndicatorSet.daily_minute_list)
  return _internal_add_daily_minute_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::DailyMinute >&
IndicatorSet::daily_minute_list() const {
  // @@protoc_insertion_point(field_list:pb.IndicatorSet.daily_minute_list)
  return daily_minute_list_;
}

// -------------------------------------------------------------------

// FetchIndicatorResponse

// .pb.ResultInfo result = 1;
inline bool FetchIndicatorResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool FetchIndicatorResponse::has_result() const {
  return _internal_has_result();
}
inline const ::pb::ResultInfo& FetchIndicatorResponse::_internal_result() const {
  const ::pb::ResultInfo* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ResultInfo*>(
      &::pb::_ResultInfo_default_instance_);
}
inline const ::pb::ResultInfo& FetchIndicatorResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.FetchIndicatorResponse.result)
  return _internal_result();
}
inline void FetchIndicatorResponse::unsafe_arena_set_allocated_result(
    ::pb::ResultInfo* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.FetchIndicatorResponse.result)
}
inline ::pb::ResultInfo* FetchIndicatorResponse::release_result() {
  
  ::pb::ResultInfo* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::ResultInfo* FetchIndicatorResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:pb.FetchIndicatorResponse.result)
  
  ::pb::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::pb::ResultInfo* FetchIndicatorResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ResultInfo>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::pb::ResultInfo* FetchIndicatorResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:pb.FetchIndicatorResponse.result)
  return _internal_mutable_result();
}
inline void FetchIndicatorResponse::set_allocated_result(::pb::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:pb.FetchIndicatorResponse.result)
}

// .pb.IndicatorSet indicator_set = 2;
inline bool FetchIndicatorResponse::_internal_has_indicator_set() const {
  return this != internal_default_instance() && indicator_set_ != nullptr;
}
inline bool FetchIndicatorResponse::has_indicator_set() const {
  return _internal_has_indicator_set();
}
inline void FetchIndicatorResponse::clear_indicator_set() {
  if (GetArena() == nullptr && indicator_set_ != nullptr) {
    delete indicator_set_;
  }
  indicator_set_ = nullptr;
}
inline const ::pb::IndicatorSet& FetchIndicatorResponse::_internal_indicator_set() const {
  const ::pb::IndicatorSet* p = indicator_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::IndicatorSet*>(
      &::pb::_IndicatorSet_default_instance_);
}
inline const ::pb::IndicatorSet& FetchIndicatorResponse::indicator_set() const {
  // @@protoc_insertion_point(field_get:pb.FetchIndicatorResponse.indicator_set)
  return _internal_indicator_set();
}
inline void FetchIndicatorResponse::unsafe_arena_set_allocated_indicator_set(
    ::pb::IndicatorSet* indicator_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicator_set_);
  }
  indicator_set_ = indicator_set;
  if (indicator_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.FetchIndicatorResponse.indicator_set)
}
inline ::pb::IndicatorSet* FetchIndicatorResponse::release_indicator_set() {
  
  ::pb::IndicatorSet* temp = indicator_set_;
  indicator_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::IndicatorSet* FetchIndicatorResponse::unsafe_arena_release_indicator_set() {
  // @@protoc_insertion_point(field_release:pb.FetchIndicatorResponse.indicator_set)
  
  ::pb::IndicatorSet* temp = indicator_set_;
  indicator_set_ = nullptr;
  return temp;
}
inline ::pb::IndicatorSet* FetchIndicatorResponse::_internal_mutable_indicator_set() {
  
  if (indicator_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::IndicatorSet>(GetArena());
    indicator_set_ = p;
  }
  return indicator_set_;
}
inline ::pb::IndicatorSet* FetchIndicatorResponse::mutable_indicator_set() {
  // @@protoc_insertion_point(field_mutable:pb.FetchIndicatorResponse.indicator_set)
  return _internal_mutable_indicator_set();
}
inline void FetchIndicatorResponse::set_allocated_indicator_set(::pb::IndicatorSet* indicator_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicator_set_;
  }
  if (indicator_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicator_set);
    if (message_arena != submessage_arena) {
      indicator_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicator_set, submessage_arena);
    }
    
  } else {
    
  }
  indicator_set_ = indicator_set;
  // @@protoc_insertion_point(field_set_allocated:pb.FetchIndicatorResponse.indicator_set)
}

// -------------------------------------------------------------------

// LiveSet

// uint64 timestamp = 1;
inline void LiveSet::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiveSet::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiveSet::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.LiveSet.timestamp)
  return _internal_timestamp();
}
inline void LiveSet::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void LiveSet::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.LiveSet.timestamp)
}

// uint64 version = 2;
inline void LiveSet::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiveSet::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiveSet::version() const {
  // @@protoc_insertion_point(field_get:pb.LiveSet.version)
  return _internal_version();
}
inline void LiveSet::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void LiveSet::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:pb.LiveSet.version)
}

// .pb.KChart daily = 3;
inline bool LiveSet::_internal_has_daily() const {
  return this != internal_default_instance() && daily_ != nullptr;
}
inline bool LiveSet::has_daily() const {
  return _internal_has_daily();
}
inline void LiveSet::clear_daily() {
  if (GetArena() == nullptr && daily_ != nullptr) {
    delete daily_;
  }
  daily_ = nullptr;
}
inline const ::pb::KChart& LiveSet::_internal_daily() const {
  const ::pb::KChart* p = daily_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::KChart*>(
      &::pb::_KChart_default_instance_);
}
inline const ::pb::KChart& LiveSet::daily() const {
  // @@protoc_insertion_point(field_get:pb.LiveSet.daily)
  return _internal_daily();
}
inline void LiveSet::unsafe_arena_set_allocated_daily(
    ::pb::KChart* daily) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(daily_);
  }
  daily_ = daily;
  if (daily) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.LiveSet.daily)
}
inline ::pb::KChart* LiveSet::release_daily() {
  
  ::pb::KChart* temp = daily_;
  daily_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::KChart* LiveSet::unsafe_arena_release_daily() {
  // @@protoc_insertion_point(field_release:pb.LiveSet.daily)
  
  ::pb::KChart* temp = daily_;
  daily_ = nullptr;
  return temp;
}
inline ::pb::KChart* LiveSet::_internal_mutable_daily() {
  
  if (daily_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::KChart>(GetArena());
    daily_ = p;
  }
  return daily_;
}
inline ::pb::KChart* LiveSet::mutable_daily() {
  // @@protoc_insertion_point(field_mutable:pb.LiveSet.daily)
  return _internal_mutable_daily();
}
inline void LiveSet::set_allocated_daily(::pb::KChart* daily) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete daily_;
  }
  if (daily) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(daily);
    if (message_arena != submessage_arena) {
      daily = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, daily, submessage_arena);
    }
    
  } else {
    
  }
  daily_ = daily;
  // @@protoc_insertion_point(field_set_allocated:pb.LiveSet.daily)
}

// -------------------------------------------------------------------

// KChart

// string code = 1;
inline void KChart::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KChart::code() const {
  // @@protoc_insertion_point(field_get:pb.KChart.code)
  return _internal_code();
}
inline void KChart::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.KChart.code)
}
inline std::string* KChart::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.KChart.code)
  return _internal_mutable_code();
}
inline const std::string& KChart::_internal_code() const {
  return code_.Get();
}
inline void KChart::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KChart::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.KChart.code)
}
inline void KChart::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.KChart.code)
}
inline void KChart::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.KChart.code)
}
inline std::string* KChart::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KChart::release_code() {
  // @@protoc_insertion_point(field_release:pb.KChart.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KChart::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.KChart.code)
}

// string date = 2;
inline void KChart::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KChart::date() const {
  // @@protoc_insertion_point(field_get:pb.KChart.date)
  return _internal_date();
}
inline void KChart::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pb.KChart.date)
}
inline std::string* KChart::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pb.KChart.date)
  return _internal_mutable_date();
}
inline const std::string& KChart::_internal_date() const {
  return date_.Get();
}
inline void KChart::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KChart::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.KChart.date)
}
inline void KChart::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.KChart.date)
}
inline void KChart::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.KChart.date)
}
inline std::string* KChart::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KChart::release_date() {
  // @@protoc_insertion_point(field_release:pb.KChart.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KChart::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.KChart.date)
}

// string time = 3;
inline void KChart::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KChart::time() const {
  // @@protoc_insertion_point(field_get:pb.KChart.time)
  return _internal_time();
}
inline void KChart::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.KChart.time)
}
inline std::string* KChart::mutable_time() {
  // @@protoc_insertion_point(field_mutable:pb.KChart.time)
  return _internal_mutable_time();
}
inline const std::string& KChart::_internal_time() const {
  return time_.Get();
}
inline void KChart::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KChart::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.KChart.time)
}
inline void KChart::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.KChart.time)
}
inline void KChart::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.KChart.time)
}
inline std::string* KChart::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KChart::release_time() {
  // @@protoc_insertion_point(field_release:pb.KChart.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KChart::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.KChart.time)
}

// double open = 4;
inline void KChart::clear_open() {
  open_ = 0;
}
inline double KChart::_internal_open() const {
  return open_;
}
inline double KChart::open() const {
  // @@protoc_insertion_point(field_get:pb.KChart.open)
  return _internal_open();
}
inline void KChart::_internal_set_open(double value) {
  
  open_ = value;
}
inline void KChart::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:pb.KChart.open)
}

// double high = 5;
inline void KChart::clear_high() {
  high_ = 0;
}
inline double KChart::_internal_high() const {
  return high_;
}
inline double KChart::high() const {
  // @@protoc_insertion_point(field_get:pb.KChart.high)
  return _internal_high();
}
inline void KChart::_internal_set_high(double value) {
  
  high_ = value;
}
inline void KChart::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:pb.KChart.high)
}

// double low = 6;
inline void KChart::clear_low() {
  low_ = 0;
}
inline double KChart::_internal_low() const {
  return low_;
}
inline double KChart::low() const {
  // @@protoc_insertion_point(field_get:pb.KChart.low)
  return _internal_low();
}
inline void KChart::_internal_set_low(double value) {
  
  low_ = value;
}
inline void KChart::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:pb.KChart.low)
}

// double close = 7;
inline void KChart::clear_close() {
  close_ = 0;
}
inline double KChart::_internal_close() const {
  return close_;
}
inline double KChart::close() const {
  // @@protoc_insertion_point(field_get:pb.KChart.close)
  return _internal_close();
}
inline void KChart::_internal_set_close(double value) {
  
  close_ = value;
}
inline void KChart::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:pb.KChart.close)
}

// double change = 8;
inline void KChart::clear_change() {
  change_ = 0;
}
inline double KChart::_internal_change() const {
  return change_;
}
inline double KChart::change() const {
  // @@protoc_insertion_point(field_get:pb.KChart.change)
  return _internal_change();
}
inline void KChart::_internal_set_change(double value) {
  
  change_ = value;
}
inline void KChart::set_change(double value) {
  _internal_set_change(value);
  // @@protoc_insertion_point(field_set:pb.KChart.change)
}

// double vol = 9;
inline void KChart::clear_vol() {
  vol_ = 0;
}
inline double KChart::_internal_vol() const {
  return vol_;
}
inline double KChart::vol() const {
  // @@protoc_insertion_point(field_get:pb.KChart.vol)
  return _internal_vol();
}
inline void KChart::_internal_set_vol(double value) {
  
  vol_ = value;
}
inline void KChart::set_vol(double value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:pb.KChart.vol)
}

// double amount = 10;
inline void KChart::clear_amount() {
  amount_ = 0;
}
inline double KChart::_internal_amount() const {
  return amount_;
}
inline double KChart::amount() const {
  // @@protoc_insertion_point(field_get:pb.KChart.amount)
  return _internal_amount();
}
inline void KChart::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void KChart::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:pb.KChart.amount)
}

// double original_open = 11;
inline void KChart::clear_original_open() {
  original_open_ = 0;
}
inline double KChart::_internal_original_open() const {
  return original_open_;
}
inline double KChart::original_open() const {
  // @@protoc_insertion_point(field_get:pb.KChart.original_open)
  return _internal_original_open();
}
inline void KChart::_internal_set_original_open(double value) {
  
  original_open_ = value;
}
inline void KChart::set_original_open(double value) {
  _internal_set_original_open(value);
  // @@protoc_insertion_point(field_set:pb.KChart.original_open)
}

// double original_high = 12;
inline void KChart::clear_original_high() {
  original_high_ = 0;
}
inline double KChart::_internal_original_high() const {
  return original_high_;
}
inline double KChart::original_high() const {
  // @@protoc_insertion_point(field_get:pb.KChart.original_high)
  return _internal_original_high();
}
inline void KChart::_internal_set_original_high(double value) {
  
  original_high_ = value;
}
inline void KChart::set_original_high(double value) {
  _internal_set_original_high(value);
  // @@protoc_insertion_point(field_set:pb.KChart.original_high)
}

// double original_low = 13;
inline void KChart::clear_original_low() {
  original_low_ = 0;
}
inline double KChart::_internal_original_low() const {
  return original_low_;
}
inline double KChart::original_low() const {
  // @@protoc_insertion_point(field_get:pb.KChart.original_low)
  return _internal_original_low();
}
inline void KChart::_internal_set_original_low(double value) {
  
  original_low_ = value;
}
inline void KChart::set_original_low(double value) {
  _internal_set_original_low(value);
  // @@protoc_insertion_point(field_set:pb.KChart.original_low)
}

// double original_close = 14;
inline void KChart::clear_original_close() {
  original_close_ = 0;
}
inline double KChart::_internal_original_close() const {
  return original_close_;
}
inline double KChart::original_close() const {
  // @@protoc_insertion_point(field_get:pb.KChart.original_close)
  return _internal_original_close();
}
inline void KChart::_internal_set_original_close(double value) {
  
  original_close_ = value;
}
inline void KChart::set_original_close(double value) {
  _internal_set_original_close(value);
  // @@protoc_insertion_point(field_set:pb.KChart.original_close)
}

// double adjust_factor = 15;
inline void KChart::clear_adjust_factor() {
  adjust_factor_ = 0;
}
inline double KChart::_internal_adjust_factor() const {
  return adjust_factor_;
}
inline double KChart::adjust_factor() const {
  // @@protoc_insertion_point(field_get:pb.KChart.adjust_factor)
  return _internal_adjust_factor();
}
inline void KChart::_internal_set_adjust_factor(double value) {
  
  adjust_factor_ = value;
}
inline void KChart::set_adjust_factor(double value) {
  _internal_set_adjust_factor(value);
  // @@protoc_insertion_point(field_set:pb.KChart.adjust_factor)
}

// -------------------------------------------------------------------

// MA

// string code = 1;
inline void MA::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MA::code() const {
  // @@protoc_insertion_point(field_get:pb.MA.code)
  return _internal_code();
}
inline void MA::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.MA.code)
}
inline std::string* MA::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.MA.code)
  return _internal_mutable_code();
}
inline const std::string& MA::_internal_code() const {
  return code_.Get();
}
inline void MA::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MA::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.MA.code)
}
inline void MA::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.MA.code)
}
inline void MA::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.MA.code)
}
inline std::string* MA::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MA::release_code() {
  // @@protoc_insertion_point(field_release:pb.MA.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MA::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.MA.code)
}

// string date = 2;
inline void MA::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MA::date() const {
  // @@protoc_insertion_point(field_get:pb.MA.date)
  return _internal_date();
}
inline void MA::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pb.MA.date)
}
inline std::string* MA::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pb.MA.date)
  return _internal_mutable_date();
}
inline const std::string& MA::_internal_date() const {
  return date_.Get();
}
inline void MA::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MA::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.MA.date)
}
inline void MA::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.MA.date)
}
inline void MA::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.MA.date)
}
inline std::string* MA::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MA::release_date() {
  // @@protoc_insertion_point(field_release:pb.MA.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MA::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.MA.date)
}

// double last_1 = 3;
inline void MA::clear_last_1() {
  last_1_ = 0;
}
inline double MA::_internal_last_1() const {
  return last_1_;
}
inline double MA::last_1() const {
  // @@protoc_insertion_point(field_get:pb.MA.last_1)
  return _internal_last_1();
}
inline void MA::_internal_set_last_1(double value) {
  
  last_1_ = value;
}
inline void MA::set_last_1(double value) {
  _internal_set_last_1(value);
  // @@protoc_insertion_point(field_set:pb.MA.last_1)
}

// double last_5 = 4;
inline void MA::clear_last_5() {
  last_5_ = 0;
}
inline double MA::_internal_last_5() const {
  return last_5_;
}
inline double MA::last_5() const {
  // @@protoc_insertion_point(field_get:pb.MA.last_5)
  return _internal_last_5();
}
inline void MA::_internal_set_last_5(double value) {
  
  last_5_ = value;
}
inline void MA::set_last_5(double value) {
  _internal_set_last_5(value);
  // @@protoc_insertion_point(field_set:pb.MA.last_5)
}

// double last_10 = 5;
inline void MA::clear_last_10() {
  last_10_ = 0;
}
inline double MA::_internal_last_10() const {
  return last_10_;
}
inline double MA::last_10() const {
  // @@protoc_insertion_point(field_get:pb.MA.last_10)
  return _internal_last_10();
}
inline void MA::_internal_set_last_10(double value) {
  
  last_10_ = value;
}
inline void MA::set_last_10(double value) {
  _internal_set_last_10(value);
  // @@protoc_insertion_point(field_set:pb.MA.last_10)
}

// double last_20 = 6;
inline void MA::clear_last_20() {
  last_20_ = 0;
}
inline double MA::_internal_last_20() const {
  return last_20_;
}
inline double MA::last_20() const {
  // @@protoc_insertion_point(field_get:pb.MA.last_20)
  return _internal_last_20();
}
inline void MA::_internal_set_last_20(double value) {
  
  last_20_ = value;
}
inline void MA::set_last_20(double value) {
  _internal_set_last_20(value);
  // @@protoc_insertion_point(field_set:pb.MA.last_20)
}

// double last_60 = 7;
inline void MA::clear_last_60() {
  last_60_ = 0;
}
inline double MA::_internal_last_60() const {
  return last_60_;
}
inline double MA::last_60() const {
  // @@protoc_insertion_point(field_get:pb.MA.last_60)
  return _internal_last_60();
}
inline void MA::_internal_set_last_60(double value) {
  
  last_60_ = value;
}
inline void MA::set_last_60(double value) {
  _internal_set_last_60(value);
  // @@protoc_insertion_point(field_set:pb.MA.last_60)
}

// -------------------------------------------------------------------

// TrueRange

// string code = 1;
inline void TrueRange::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrueRange::code() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.code)
  return _internal_code();
}
inline void TrueRange::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.code)
}
inline std::string* TrueRange::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.TrueRange.code)
  return _internal_mutable_code();
}
inline const std::string& TrueRange::_internal_code() const {
  return code_.Get();
}
inline void TrueRange::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrueRange::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TrueRange.code)
}
inline void TrueRange::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TrueRange.code)
}
inline void TrueRange::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TrueRange.code)
}
inline std::string* TrueRange::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrueRange::release_code() {
  // @@protoc_insertion_point(field_release:pb.TrueRange.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrueRange::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TrueRange.code)
}

// string date = 2;
inline void TrueRange::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrueRange::date() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.date)
  return _internal_date();
}
inline void TrueRange::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.date)
}
inline std::string* TrueRange::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pb.TrueRange.date)
  return _internal_mutable_date();
}
inline const std::string& TrueRange::_internal_date() const {
  return date_.Get();
}
inline void TrueRange::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrueRange::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.TrueRange.date)
}
inline void TrueRange::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.TrueRange.date)
}
inline void TrueRange::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.TrueRange.date)
}
inline std::string* TrueRange::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrueRange::release_date() {
  // @@protoc_insertion_point(field_release:pb.TrueRange.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrueRange::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.TrueRange.date)
}

// double range = 3;
inline void TrueRange::clear_range() {
  range_ = 0;
}
inline double TrueRange::_internal_range() const {
  return range_;
}
inline double TrueRange::range() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.range)
  return _internal_range();
}
inline void TrueRange::_internal_set_range(double value) {
  
  range_ = value;
}
inline void TrueRange::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.range)
}

// double average = 4;
inline void TrueRange::clear_average() {
  average_ = 0;
}
inline double TrueRange::_internal_average() const {
  return average_;
}
inline double TrueRange::average() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.average)
  return _internal_average();
}
inline void TrueRange::_internal_set_average(double value) {
  
  average_ = value;
}
inline void TrueRange::set_average(double value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.average)
}

// double gentle = 5;
inline void TrueRange::clear_gentle() {
  gentle_ = 0;
}
inline double TrueRange::_internal_gentle() const {
  return gentle_;
}
inline double TrueRange::gentle() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.gentle)
  return _internal_gentle();
}
inline void TrueRange::_internal_set_gentle(double value) {
  
  gentle_ = value;
}
inline void TrueRange::set_gentle(double value) {
  _internal_set_gentle(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.gentle)
}

// double gentle_60 = 6;
inline void TrueRange::clear_gentle_60() {
  gentle_60_ = 0;
}
inline double TrueRange::_internal_gentle_60() const {
  return gentle_60_;
}
inline double TrueRange::gentle_60() const {
  // @@protoc_insertion_point(field_get:pb.TrueRange.gentle_60)
  return _internal_gentle_60();
}
inline void TrueRange::_internal_set_gentle_60(double value) {
  
  gentle_60_ = value;
}
inline void TrueRange::set_gentle_60(double value) {
  _internal_set_gentle_60(value);
  // @@protoc_insertion_point(field_set:pb.TrueRange.gentle_60)
}

// -------------------------------------------------------------------

// Segment

// string code = 1;
inline void Segment::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment::code() const {
  // @@protoc_insertion_point(field_get:pb.Segment.code)
  return _internal_code();
}
inline void Segment::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.Segment.code)
}
inline std::string* Segment::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.Segment.code)
  return _internal_mutable_code();
}
inline const std::string& Segment::_internal_code() const {
  return code_.Get();
}
inline void Segment::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Segment.code)
}
inline void Segment::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Segment.code)
}
inline void Segment::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Segment.code)
}
inline std::string* Segment::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment::release_code() {
  // @@protoc_insertion_point(field_release:pb.Segment.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Segment.code)
}

// string date = 2;
inline void Segment::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment::date() const {
  // @@protoc_insertion_point(field_get:pb.Segment.date)
  return _internal_date();
}
inline void Segment::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pb.Segment.date)
}
inline std::string* Segment::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pb.Segment.date)
  return _internal_mutable_date();
}
inline const std::string& Segment::_internal_date() const {
  return date_.Get();
}
inline void Segment::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Segment.date)
}
inline void Segment::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Segment.date)
}
inline void Segment::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Segment.date)
}
inline std::string* Segment::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment::release_date() {
  // @@protoc_insertion_point(field_release:pb.Segment.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Segment.date)
}

// double direction = 3;
inline void Segment::clear_direction() {
  direction_ = 0;
}
inline double Segment::_internal_direction() const {
  return direction_;
}
inline double Segment::direction() const {
  // @@protoc_insertion_point(field_get:pb.Segment.direction)
  return _internal_direction();
}
inline void Segment::_internal_set_direction(double value) {
  
  direction_ = value;
}
inline void Segment::set_direction(double value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:pb.Segment.direction)
}

// string start_date = 4;
inline void Segment::clear_start_date() {
  start_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment::start_date() const {
  // @@protoc_insertion_point(field_get:pb.Segment.start_date)
  return _internal_start_date();
}
inline void Segment::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:pb.Segment.start_date)
}
inline std::string* Segment::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:pb.Segment.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& Segment::_internal_start_date() const {
  return start_date_.Get();
}
inline void Segment::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment::set_start_date(std::string&& value) {
  
  start_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Segment.start_date)
}
inline void Segment::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Segment.start_date)
}
inline void Segment::set_start_date(const char* value,
    size_t size) {
  
  start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Segment.start_date)
}
inline std::string* Segment::_internal_mutable_start_date() {
  
  return start_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment::release_start_date() {
  // @@protoc_insertion_point(field_release:pb.Segment.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Segment.start_date)
}

// double gentle_range = 5;
inline void Segment::clear_gentle_range() {
  gentle_range_ = 0;
}
inline double Segment::_internal_gentle_range() const {
  return gentle_range_;
}
inline double Segment::gentle_range() const {
  // @@protoc_insertion_point(field_get:pb.Segment.gentle_range)
  return _internal_gentle_range();
}
inline void Segment::_internal_set_gentle_range(double value) {
  
  gentle_range_ = value;
}
inline void Segment::set_gentle_range(double value) {
  _internal_set_gentle_range(value);
  // @@protoc_insertion_point(field_set:pb.Segment.gentle_range)
}

// double low = 6;
inline void Segment::clear_low() {
  low_ = 0;
}
inline double Segment::_internal_low() const {
  return low_;
}
inline double Segment::low() const {
  // @@protoc_insertion_point(field_get:pb.Segment.low)
  return _internal_low();
}
inline void Segment::_internal_set_low(double value) {
  
  low_ = value;
}
inline void Segment::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:pb.Segment.low)
}

// string low_date = 7;
inline void Segment::clear_low_date() {
  low_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment::low_date() const {
  // @@protoc_insertion_point(field_get:pb.Segment.low_date)
  return _internal_low_date();
}
inline void Segment::set_low_date(const std::string& value) {
  _internal_set_low_date(value);
  // @@protoc_insertion_point(field_set:pb.Segment.low_date)
}
inline std::string* Segment::mutable_low_date() {
  // @@protoc_insertion_point(field_mutable:pb.Segment.low_date)
  return _internal_mutable_low_date();
}
inline const std::string& Segment::_internal_low_date() const {
  return low_date_.Get();
}
inline void Segment::_internal_set_low_date(const std::string& value) {
  
  low_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment::set_low_date(std::string&& value) {
  
  low_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Segment.low_date)
}
inline void Segment::set_low_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  low_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Segment.low_date)
}
inline void Segment::set_low_date(const char* value,
    size_t size) {
  
  low_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Segment.low_date)
}
inline std::string* Segment::_internal_mutable_low_date() {
  
  return low_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment::release_low_date() {
  // @@protoc_insertion_point(field_release:pb.Segment.low_date)
  return low_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment::set_allocated_low_date(std::string* low_date) {
  if (low_date != nullptr) {
    
  } else {
    
  }
  low_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), low_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Segment.low_date)
}

// double high = 8;
inline void Segment::clear_high() {
  high_ = 0;
}
inline double Segment::_internal_high() const {
  return high_;
}
inline double Segment::high() const {
  // @@protoc_insertion_point(field_get:pb.Segment.high)
  return _internal_high();
}
inline void Segment::_internal_set_high(double value) {
  
  high_ = value;
}
inline void Segment::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:pb.Segment.high)
}

// string high_date = 9;
inline void Segment::clear_high_date() {
  high_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Segment::high_date() const {
  // @@protoc_insertion_point(field_get:pb.Segment.high_date)
  return _internal_high_date();
}
inline void Segment::set_high_date(const std::string& value) {
  _internal_set_high_date(value);
  // @@protoc_insertion_point(field_set:pb.Segment.high_date)
}
inline std::string* Segment::mutable_high_date() {
  // @@protoc_insertion_point(field_mutable:pb.Segment.high_date)
  return _internal_mutable_high_date();
}
inline const std::string& Segment::_internal_high_date() const {
  return high_date_.Get();
}
inline void Segment::_internal_set_high_date(const std::string& value) {
  
  high_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Segment::set_high_date(std::string&& value) {
  
  high_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.Segment.high_date)
}
inline void Segment::set_high_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  high_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.Segment.high_date)
}
inline void Segment::set_high_date(const char* value,
    size_t size) {
  
  high_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.Segment.high_date)
}
inline std::string* Segment::_internal_mutable_high_date() {
  
  return high_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Segment::release_high_date() {
  // @@protoc_insertion_point(field_release:pb.Segment.high_date)
  return high_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Segment::set_allocated_high_date(std::string* high_date) {
  if (high_date != nullptr) {
    
  } else {
    
  }
  high_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), high_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.Segment.high_date)
}

// -------------------------------------------------------------------

// DailyMinute

// string code = 1;
inline void DailyMinute::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DailyMinute::code() const {
  // @@protoc_insertion_point(field_get:pb.DailyMinute.code)
  return _internal_code();
}
inline void DailyMinute::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:pb.DailyMinute.code)
}
inline std::string* DailyMinute::mutable_code() {
  // @@protoc_insertion_point(field_mutable:pb.DailyMinute.code)
  return _internal_mutable_code();
}
inline const std::string& DailyMinute::_internal_code() const {
  return code_.Get();
}
inline void DailyMinute::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DailyMinute::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.DailyMinute.code)
}
inline void DailyMinute::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.DailyMinute.code)
}
inline void DailyMinute::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.DailyMinute.code)
}
inline std::string* DailyMinute::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DailyMinute::release_code() {
  // @@protoc_insertion_point(field_release:pb.DailyMinute.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DailyMinute::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.DailyMinute.code)
}

// string date = 2;
inline void DailyMinute::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DailyMinute::date() const {
  // @@protoc_insertion_point(field_get:pb.DailyMinute.date)
  return _internal_date();
}
inline void DailyMinute::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:pb.DailyMinute.date)
}
inline std::string* DailyMinute::mutable_date() {
  // @@protoc_insertion_point(field_mutable:pb.DailyMinute.date)
  return _internal_mutable_date();
}
inline const std::string& DailyMinute::_internal_date() const {
  return date_.Get();
}
inline void DailyMinute::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DailyMinute::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.DailyMinute.date)
}
inline void DailyMinute::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.DailyMinute.date)
}
inline void DailyMinute::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.DailyMinute.date)
}
inline std::string* DailyMinute::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DailyMinute::release_date() {
  // @@protoc_insertion_point(field_release:pb.DailyMinute.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DailyMinute::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.DailyMinute.date)
}

// repeated .pb.KChart minute_list = 3;
inline int DailyMinute::_internal_minute_list_size() const {
  return minute_list_.size();
}
inline int DailyMinute::minute_list_size() const {
  return _internal_minute_list_size();
}
inline void DailyMinute::clear_minute_list() {
  minute_list_.Clear();
}
inline ::pb::KChart* DailyMinute::mutable_minute_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.DailyMinute.minute_list)
  return minute_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >*
DailyMinute::mutable_minute_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.DailyMinute.minute_list)
  return &minute_list_;
}
inline const ::pb::KChart& DailyMinute::_internal_minute_list(int index) const {
  return minute_list_.Get(index);
}
inline const ::pb::KChart& DailyMinute::minute_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.DailyMinute.minute_list)
  return _internal_minute_list(index);
}
inline ::pb::KChart* DailyMinute::_internal_add_minute_list() {
  return minute_list_.Add();
}
inline ::pb::KChart* DailyMinute::add_minute_list() {
  // @@protoc_insertion_point(field_add:pb.DailyMinute.minute_list)
  return _internal_add_minute_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::KChart >&
DailyMinute::minute_list() const {
  // @@protoc_insertion_point(field_list:pb.DailyMinute.minute_list)
  return minute_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fprophet_2eproto
