// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fmessage_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MESSAGE_TYPE : int {
  MESSAGE_TYPE_INVALID = 0,
  MESSAGE_TYPE_TEXT = 1,
  MESSAGE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MESSAGE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MESSAGE_TYPE_IsValid(int value);
constexpr MESSAGE_TYPE MESSAGE_TYPE_MIN = MESSAGE_TYPE_INVALID;
constexpr MESSAGE_TYPE MESSAGE_TYPE_MAX = MESSAGE_TYPE_TEXT;
constexpr int MESSAGE_TYPE_ARRAYSIZE = MESSAGE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MESSAGE_TYPE_descriptor();
template<typename T>
inline const std::string& MESSAGE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MESSAGE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MESSAGE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MESSAGE_TYPE_descriptor(), enum_t_value);
}
inline bool MESSAGE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MESSAGE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MESSAGE_TYPE>(
    MESSAGE_TYPE_descriptor(), name, value);
}
// ===================================================================

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmessage_2eproto);
    return ::descriptor_table_pb_2fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNameFieldNumber = 1,
    kToNameFieldNumber = 2,
    kTextFieldNumber = 4,
    kMessageTypeFieldNumber = 3,
  };
  // string from_name = 1;
  void clear_from_name();
  const std::string& from_name() const;
  void set_from_name(const std::string& value);
  void set_from_name(std::string&& value);
  void set_from_name(const char* value);
  void set_from_name(const char* value, size_t size);
  std::string* mutable_from_name();
  std::string* release_from_name();
  void set_allocated_from_name(std::string* from_name);
  private:
  const std::string& _internal_from_name() const;
  void _internal_set_from_name(const std::string& value);
  std::string* _internal_mutable_from_name();
  public:

  // string to_name = 2;
  void clear_to_name();
  const std::string& to_name() const;
  void set_to_name(const std::string& value);
  void set_to_name(std::string&& value);
  void set_to_name(const char* value);
  void set_to_name(const char* value, size_t size);
  std::string* mutable_to_name();
  std::string* release_to_name();
  void set_allocated_to_name(std::string* to_name);
  private:
  const std::string& _internal_to_name() const;
  void _internal_set_to_name(const std::string& value);
  std::string* _internal_mutable_to_name();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .MESSAGE_TYPE message_type = 3;
  void clear_message_type();
  ::MESSAGE_TYPE message_type() const;
  void set_message_type(::MESSAGE_TYPE value);
  private:
  ::MESSAGE_TYPE _internal_message_type() const;
  void _internal_set_message_type(::MESSAGE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string from_name = 1;
inline void Message::clear_from_name() {
  from_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::from_name() const {
  // @@protoc_insertion_point(field_get:Message.from_name)
  return _internal_from_name();
}
inline void Message::set_from_name(const std::string& value) {
  _internal_set_from_name(value);
  // @@protoc_insertion_point(field_set:Message.from_name)
}
inline std::string* Message::mutable_from_name() {
  // @@protoc_insertion_point(field_mutable:Message.from_name)
  return _internal_mutable_from_name();
}
inline const std::string& Message::_internal_from_name() const {
  return from_name_.Get();
}
inline void Message::_internal_set_from_name(const std::string& value) {
  
  from_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_from_name(std::string&& value) {
  
  from_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Message.from_name)
}
inline void Message::set_from_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Message.from_name)
}
inline void Message::set_from_name(const char* value,
    size_t size) {
  
  from_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Message.from_name)
}
inline std::string* Message::_internal_mutable_from_name() {
  
  return from_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_from_name() {
  // @@protoc_insertion_point(field_release:Message.from_name)
  return from_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_from_name(std::string* from_name) {
  if (from_name != nullptr) {
    
  } else {
    
  }
  from_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.from_name)
}

// string to_name = 2;
inline void Message::clear_to_name() {
  to_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::to_name() const {
  // @@protoc_insertion_point(field_get:Message.to_name)
  return _internal_to_name();
}
inline void Message::set_to_name(const std::string& value) {
  _internal_set_to_name(value);
  // @@protoc_insertion_point(field_set:Message.to_name)
}
inline std::string* Message::mutable_to_name() {
  // @@protoc_insertion_point(field_mutable:Message.to_name)
  return _internal_mutable_to_name();
}
inline const std::string& Message::_internal_to_name() const {
  return to_name_.Get();
}
inline void Message::_internal_set_to_name(const std::string& value) {
  
  to_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_to_name(std::string&& value) {
  
  to_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Message.to_name)
}
inline void Message::set_to_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Message.to_name)
}
inline void Message::set_to_name(const char* value,
    size_t size) {
  
  to_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Message.to_name)
}
inline std::string* Message::_internal_mutable_to_name() {
  
  return to_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_to_name() {
  // @@protoc_insertion_point(field_release:Message.to_name)
  return to_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_to_name(std::string* to_name) {
  if (to_name != nullptr) {
    
  } else {
    
  }
  to_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.to_name)
}

// .MESSAGE_TYPE message_type = 3;
inline void Message::clear_message_type() {
  message_type_ = 0;
}
inline ::MESSAGE_TYPE Message::_internal_message_type() const {
  return static_cast< ::MESSAGE_TYPE >(message_type_);
}
inline ::MESSAGE_TYPE Message::message_type() const {
  // @@protoc_insertion_point(field_get:Message.message_type)
  return _internal_message_type();
}
inline void Message::_internal_set_message_type(::MESSAGE_TYPE value) {
  
  message_type_ = value;
}
inline void Message::set_message_type(::MESSAGE_TYPE value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:Message.message_type)
}

// string text = 4;
inline void Message::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::text() const {
  // @@protoc_insertion_point(field_get:Message.text)
  return _internal_text();
}
inline void Message::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Message.text)
}
inline std::string* Message::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Message.text)
  return _internal_mutable_text();
}
inline const std::string& Message::_internal_text() const {
  return text_.Get();
}
inline void Message::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Message.text)
}
inline void Message::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Message.text)
}
inline void Message::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Message.text)
}
inline std::string* Message::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_text() {
  // @@protoc_insertion_point(field_release:Message.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MESSAGE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MESSAGE_TYPE>() {
  return ::MESSAGE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fmessage_2eproto
