// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/xueqiu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fxueqiu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fxueqiu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fxueqiu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fxueqiu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fxueqiu_2eproto;
class PortfolioInfo;
class PortfolioInfoDefaultTypeInternal;
extern PortfolioInfoDefaultTypeInternal _PortfolioInfo_default_instance_;
class PortfolioInfoList;
class PortfolioInfoListDefaultTypeInternal;
extern PortfolioInfoListDefaultTypeInternal _PortfolioInfoList_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PortfolioInfo* Arena::CreateMaybeMessage<::PortfolioInfo>(Arena*);
template<> ::PortfolioInfoList* Arena::CreateMaybeMessage<::PortfolioInfoList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PortfolioInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PortfolioInfo) */ {
 public:
  inline PortfolioInfo() : PortfolioInfo(nullptr) {}
  virtual ~PortfolioInfo();

  PortfolioInfo(const PortfolioInfo& from);
  PortfolioInfo(PortfolioInfo&& from) noexcept
    : PortfolioInfo() {
    *this = ::std::move(from);
  }

  inline PortfolioInfo& operator=(const PortfolioInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioInfo& operator=(PortfolioInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioInfo* internal_default_instance() {
    return reinterpret_cast<const PortfolioInfo*>(
               &_PortfolioInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PortfolioInfo& a, PortfolioInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioInfo* New() const final {
    return CreateMaybeMessage<PortfolioInfo>(nullptr);
  }

  PortfolioInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioInfo& from);
  void MergeFrom(const PortfolioInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PortfolioInfo";
  }
  protected:
  explicit PortfolioInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fxueqiu_2eproto);
    return ::descriptor_table_pb_2fxueqiu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kLastTouchDateFieldNumber = 3,
    kTagsFieldNumber = 4,
    kMarketKindFieldNumber = 7,
    kNameFieldNumber = 8,
    kAuthorNameFieldNumber = 9,
    kLastRebalacingDateFieldNumber = 10,
    kCreatedDateFieldNumber = 102,
    kZippedZhHtmlFieldNumber = 1001,
    kZippedNavJsonFieldNumber = 1002,
    kIdFieldNumber = 1,
    kActivedFieldNumber = 5,
    kInBlacklistFieldNumber = 6,
    kTimesOf404FieldNumber = 11,
    kNetValueFieldNumber = 101,
    kMaxDrawFieldNumber = 103,
    kFollowerCountFieldNumber = 104,
    kTurnover90FieldNumber = 105,
    kTurnover360FieldNumber = 106,
    kMonthlyGainFieldNumber = 107,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string last_touch_date = 3;
  void clear_last_touch_date();
  const std::string& last_touch_date() const;
  void set_last_touch_date(const std::string& value);
  void set_last_touch_date(std::string&& value);
  void set_last_touch_date(const char* value);
  void set_last_touch_date(const char* value, size_t size);
  std::string* mutable_last_touch_date();
  std::string* release_last_touch_date();
  void set_allocated_last_touch_date(std::string* last_touch_date);
  private:
  const std::string& _internal_last_touch_date() const;
  void _internal_set_last_touch_date(const std::string& value);
  std::string* _internal_mutable_last_touch_date();
  public:

  // string tags = 4;
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // string market_kind = 7;
  void clear_market_kind();
  const std::string& market_kind() const;
  void set_market_kind(const std::string& value);
  void set_market_kind(std::string&& value);
  void set_market_kind(const char* value);
  void set_market_kind(const char* value, size_t size);
  std::string* mutable_market_kind();
  std::string* release_market_kind();
  void set_allocated_market_kind(std::string* market_kind);
  private:
  const std::string& _internal_market_kind() const;
  void _internal_set_market_kind(const std::string& value);
  std::string* _internal_mutable_market_kind();
  public:

  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string author_name = 9;
  void clear_author_name();
  const std::string& author_name() const;
  void set_author_name(const std::string& value);
  void set_author_name(std::string&& value);
  void set_author_name(const char* value);
  void set_author_name(const char* value, size_t size);
  std::string* mutable_author_name();
  std::string* release_author_name();
  void set_allocated_author_name(std::string* author_name);
  private:
  const std::string& _internal_author_name() const;
  void _internal_set_author_name(const std::string& value);
  std::string* _internal_mutable_author_name();
  public:

  // string last_rebalacing_date = 10;
  void clear_last_rebalacing_date();
  const std::string& last_rebalacing_date() const;
  void set_last_rebalacing_date(const std::string& value);
  void set_last_rebalacing_date(std::string&& value);
  void set_last_rebalacing_date(const char* value);
  void set_last_rebalacing_date(const char* value, size_t size);
  std::string* mutable_last_rebalacing_date();
  std::string* release_last_rebalacing_date();
  void set_allocated_last_rebalacing_date(std::string* last_rebalacing_date);
  private:
  const std::string& _internal_last_rebalacing_date() const;
  void _internal_set_last_rebalacing_date(const std::string& value);
  std::string* _internal_mutable_last_rebalacing_date();
  public:

  // string created_date = 102;
  void clear_created_date();
  const std::string& created_date() const;
  void set_created_date(const std::string& value);
  void set_created_date(std::string&& value);
  void set_created_date(const char* value);
  void set_created_date(const char* value, size_t size);
  std::string* mutable_created_date();
  std::string* release_created_date();
  void set_allocated_created_date(std::string* created_date);
  private:
  const std::string& _internal_created_date() const;
  void _internal_set_created_date(const std::string& value);
  std::string* _internal_mutable_created_date();
  public:

  // bytes zipped_zh_html = 1001;
  void clear_zipped_zh_html();
  const std::string& zipped_zh_html() const;
  void set_zipped_zh_html(const std::string& value);
  void set_zipped_zh_html(std::string&& value);
  void set_zipped_zh_html(const char* value);
  void set_zipped_zh_html(const void* value, size_t size);
  std::string* mutable_zipped_zh_html();
  std::string* release_zipped_zh_html();
  void set_allocated_zipped_zh_html(std::string* zipped_zh_html);
  private:
  const std::string& _internal_zipped_zh_html() const;
  void _internal_set_zipped_zh_html(const std::string& value);
  std::string* _internal_mutable_zipped_zh_html();
  public:

  // bytes zipped_nav_json = 1002;
  void clear_zipped_nav_json();
  const std::string& zipped_nav_json() const;
  void set_zipped_nav_json(const std::string& value);
  void set_zipped_nav_json(std::string&& value);
  void set_zipped_nav_json(const char* value);
  void set_zipped_nav_json(const void* value, size_t size);
  std::string* mutable_zipped_nav_json();
  std::string* release_zipped_nav_json();
  void set_allocated_zipped_nav_json(std::string* zipped_nav_json);
  private:
  const std::string& _internal_zipped_nav_json() const;
  void _internal_set_zipped_nav_json(const std::string& value);
  std::string* _internal_mutable_zipped_nav_json();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool actived = 5;
  void clear_actived();
  bool actived() const;
  void set_actived(bool value);
  private:
  bool _internal_actived() const;
  void _internal_set_actived(bool value);
  public:

  // bool in_blacklist = 6;
  void clear_in_blacklist();
  bool in_blacklist() const;
  void set_in_blacklist(bool value);
  private:
  bool _internal_in_blacklist() const;
  void _internal_set_in_blacklist(bool value);
  public:

  // int32 times_of_404 = 11;
  void clear_times_of_404();
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_404() const;
  void set_times_of_404(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times_of_404() const;
  void _internal_set_times_of_404(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float net_value = 101;
  void clear_net_value();
  float net_value() const;
  void set_net_value(float value);
  private:
  float _internal_net_value() const;
  void _internal_set_net_value(float value);
  public:

  // float max_draw = 103;
  void clear_max_draw();
  float max_draw() const;
  void set_max_draw(float value);
  private:
  float _internal_max_draw() const;
  void _internal_set_max_draw(float value);
  public:

  // int32 follower_count = 104;
  void clear_follower_count();
  ::PROTOBUF_NAMESPACE_ID::int32 follower_count() const;
  void set_follower_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_follower_count() const;
  void _internal_set_follower_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float turnover_90 = 105;
  void clear_turnover_90();
  float turnover_90() const;
  void set_turnover_90(float value);
  private:
  float _internal_turnover_90() const;
  void _internal_set_turnover_90(float value);
  public:

  // float turnover_360 = 106;
  void clear_turnover_360();
  float turnover_360() const;
  void set_turnover_360(float value);
  private:
  float _internal_turnover_360() const;
  void _internal_set_turnover_360(float value);
  public:

  // float monthly_gain = 107;
  void clear_monthly_gain();
  float monthly_gain() const;
  void set_monthly_gain(float value);
  private:
  float _internal_monthly_gain() const;
  void _internal_set_monthly_gain(float value);
  public:

  // @@protoc_insertion_point(class_scope:PortfolioInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_touch_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_rebalacing_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zipped_zh_html_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zipped_nav_json_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool actived_;
  bool in_blacklist_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_of_404_;
  float net_value_;
  float max_draw_;
  ::PROTOBUF_NAMESPACE_ID::int32 follower_count_;
  float turnover_90_;
  float turnover_360_;
  float monthly_gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fxueqiu_2eproto;
};
// -------------------------------------------------------------------

class PortfolioInfoList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PortfolioInfoList) */ {
 public:
  inline PortfolioInfoList() : PortfolioInfoList(nullptr) {}
  virtual ~PortfolioInfoList();

  PortfolioInfoList(const PortfolioInfoList& from);
  PortfolioInfoList(PortfolioInfoList&& from) noexcept
    : PortfolioInfoList() {
    *this = ::std::move(from);
  }

  inline PortfolioInfoList& operator=(const PortfolioInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioInfoList& operator=(PortfolioInfoList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortfolioInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortfolioInfoList* internal_default_instance() {
    return reinterpret_cast<const PortfolioInfoList*>(
               &_PortfolioInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PortfolioInfoList& a, PortfolioInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioInfoList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioInfoList* New() const final {
    return CreateMaybeMessage<PortfolioInfoList>(nullptr);
  }

  PortfolioInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioInfoList& from);
  void MergeFrom(const PortfolioInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PortfolioInfoList";
  }
  protected:
  explicit PortfolioInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fxueqiu_2eproto);
    return ::descriptor_table_pb_2fxueqiu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortfolioListFieldNumber = 1,
  };
  // repeated .PortfolioInfo portfolio_list = 1;
  int portfolio_list_size() const;
  private:
  int _internal_portfolio_list_size() const;
  public:
  void clear_portfolio_list();
  ::PortfolioInfo* mutable_portfolio_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PortfolioInfo >*
      mutable_portfolio_list();
  private:
  const ::PortfolioInfo& _internal_portfolio_list(int index) const;
  ::PortfolioInfo* _internal_add_portfolio_list();
  public:
  const ::PortfolioInfo& portfolio_list(int index) const;
  ::PortfolioInfo* add_portfolio_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PortfolioInfo >&
      portfolio_list() const;

  // @@protoc_insertion_point(class_scope:PortfolioInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PortfolioInfo > portfolio_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fxueqiu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PortfolioInfo

// int64 id = 1;
inline void PortfolioInfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PortfolioInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PortfolioInfo::id() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.id)
  return _internal_id();
}
inline void PortfolioInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void PortfolioInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.id)
}

// string code = 2;
inline void PortfolioInfo::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::code() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.code)
  return _internal_code();
}
inline void PortfolioInfo::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.code)
}
inline std::string* PortfolioInfo::mutable_code() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.code)
  return _internal_mutable_code();
}
inline const std::string& PortfolioInfo::_internal_code() const {
  return code_.Get();
}
inline void PortfolioInfo::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.code)
}
inline void PortfolioInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.code)
}
inline void PortfolioInfo::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.code)
}
inline std::string* PortfolioInfo::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_code() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.code)
}

// string last_touch_date = 3;
inline void PortfolioInfo::clear_last_touch_date() {
  last_touch_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::last_touch_date() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.last_touch_date)
  return _internal_last_touch_date();
}
inline void PortfolioInfo::set_last_touch_date(const std::string& value) {
  _internal_set_last_touch_date(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.last_touch_date)
}
inline std::string* PortfolioInfo::mutable_last_touch_date() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.last_touch_date)
  return _internal_mutable_last_touch_date();
}
inline const std::string& PortfolioInfo::_internal_last_touch_date() const {
  return last_touch_date_.Get();
}
inline void PortfolioInfo::_internal_set_last_touch_date(const std::string& value) {
  
  last_touch_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_last_touch_date(std::string&& value) {
  
  last_touch_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.last_touch_date)
}
inline void PortfolioInfo::set_last_touch_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_touch_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.last_touch_date)
}
inline void PortfolioInfo::set_last_touch_date(const char* value,
    size_t size) {
  
  last_touch_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.last_touch_date)
}
inline std::string* PortfolioInfo::_internal_mutable_last_touch_date() {
  
  return last_touch_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_last_touch_date() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.last_touch_date)
  return last_touch_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_last_touch_date(std::string* last_touch_date) {
  if (last_touch_date != nullptr) {
    
  } else {
    
  }
  last_touch_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_touch_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.last_touch_date)
}

// string tags = 4;
inline void PortfolioInfo::clear_tags() {
  tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::tags() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.tags)
  return _internal_tags();
}
inline void PortfolioInfo::set_tags(const std::string& value) {
  _internal_set_tags(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.tags)
}
inline std::string* PortfolioInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.tags)
  return _internal_mutable_tags();
}
inline const std::string& PortfolioInfo::_internal_tags() const {
  return tags_.Get();
}
inline void PortfolioInfo::_internal_set_tags(const std::string& value) {
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_tags(std::string&& value) {
  
  tags_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.tags)
}
inline void PortfolioInfo::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.tags)
}
inline void PortfolioInfo::set_tags(const char* value,
    size_t size) {
  
  tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.tags)
}
inline std::string* PortfolioInfo::_internal_mutable_tags() {
  
  return tags_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_tags() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.tags)
  return tags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    
  } else {
    
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.tags)
}

// bool actived = 5;
inline void PortfolioInfo::clear_actived() {
  actived_ = false;
}
inline bool PortfolioInfo::_internal_actived() const {
  return actived_;
}
inline bool PortfolioInfo::actived() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.actived)
  return _internal_actived();
}
inline void PortfolioInfo::_internal_set_actived(bool value) {
  
  actived_ = value;
}
inline void PortfolioInfo::set_actived(bool value) {
  _internal_set_actived(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.actived)
}

// bool in_blacklist = 6;
inline void PortfolioInfo::clear_in_blacklist() {
  in_blacklist_ = false;
}
inline bool PortfolioInfo::_internal_in_blacklist() const {
  return in_blacklist_;
}
inline bool PortfolioInfo::in_blacklist() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.in_blacklist)
  return _internal_in_blacklist();
}
inline void PortfolioInfo::_internal_set_in_blacklist(bool value) {
  
  in_blacklist_ = value;
}
inline void PortfolioInfo::set_in_blacklist(bool value) {
  _internal_set_in_blacklist(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.in_blacklist)
}

// string market_kind = 7;
inline void PortfolioInfo::clear_market_kind() {
  market_kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::market_kind() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.market_kind)
  return _internal_market_kind();
}
inline void PortfolioInfo::set_market_kind(const std::string& value) {
  _internal_set_market_kind(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.market_kind)
}
inline std::string* PortfolioInfo::mutable_market_kind() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.market_kind)
  return _internal_mutable_market_kind();
}
inline const std::string& PortfolioInfo::_internal_market_kind() const {
  return market_kind_.Get();
}
inline void PortfolioInfo::_internal_set_market_kind(const std::string& value) {
  
  market_kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_market_kind(std::string&& value) {
  
  market_kind_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.market_kind)
}
inline void PortfolioInfo::set_market_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.market_kind)
}
inline void PortfolioInfo::set_market_kind(const char* value,
    size_t size) {
  
  market_kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.market_kind)
}
inline std::string* PortfolioInfo::_internal_mutable_market_kind() {
  
  return market_kind_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_market_kind() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.market_kind)
  return market_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_market_kind(std::string* market_kind) {
  if (market_kind != nullptr) {
    
  } else {
    
  }
  market_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.market_kind)
}

// string name = 8;
inline void PortfolioInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::name() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.name)
  return _internal_name();
}
inline void PortfolioInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.name)
}
inline std::string* PortfolioInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PortfolioInfo::_internal_name() const {
  return name_.Get();
}
inline void PortfolioInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.name)
}
inline void PortfolioInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.name)
}
inline void PortfolioInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.name)
}
inline std::string* PortfolioInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_name() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.name)
}

// string author_name = 9;
inline void PortfolioInfo::clear_author_name() {
  author_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::author_name() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.author_name)
  return _internal_author_name();
}
inline void PortfolioInfo::set_author_name(const std::string& value) {
  _internal_set_author_name(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.author_name)
}
inline std::string* PortfolioInfo::mutable_author_name() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.author_name)
  return _internal_mutable_author_name();
}
inline const std::string& PortfolioInfo::_internal_author_name() const {
  return author_name_.Get();
}
inline void PortfolioInfo::_internal_set_author_name(const std::string& value) {
  
  author_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_author_name(std::string&& value) {
  
  author_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.author_name)
}
inline void PortfolioInfo::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.author_name)
}
inline void PortfolioInfo::set_author_name(const char* value,
    size_t size) {
  
  author_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.author_name)
}
inline std::string* PortfolioInfo::_internal_mutable_author_name() {
  
  return author_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_author_name() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.author_name)
  return author_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_author_name(std::string* author_name) {
  if (author_name != nullptr) {
    
  } else {
    
  }
  author_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.author_name)
}

// string last_rebalacing_date = 10;
inline void PortfolioInfo::clear_last_rebalacing_date() {
  last_rebalacing_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::last_rebalacing_date() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.last_rebalacing_date)
  return _internal_last_rebalacing_date();
}
inline void PortfolioInfo::set_last_rebalacing_date(const std::string& value) {
  _internal_set_last_rebalacing_date(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.last_rebalacing_date)
}
inline std::string* PortfolioInfo::mutable_last_rebalacing_date() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.last_rebalacing_date)
  return _internal_mutable_last_rebalacing_date();
}
inline const std::string& PortfolioInfo::_internal_last_rebalacing_date() const {
  return last_rebalacing_date_.Get();
}
inline void PortfolioInfo::_internal_set_last_rebalacing_date(const std::string& value) {
  
  last_rebalacing_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_last_rebalacing_date(std::string&& value) {
  
  last_rebalacing_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.last_rebalacing_date)
}
inline void PortfolioInfo::set_last_rebalacing_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_rebalacing_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.last_rebalacing_date)
}
inline void PortfolioInfo::set_last_rebalacing_date(const char* value,
    size_t size) {
  
  last_rebalacing_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.last_rebalacing_date)
}
inline std::string* PortfolioInfo::_internal_mutable_last_rebalacing_date() {
  
  return last_rebalacing_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_last_rebalacing_date() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.last_rebalacing_date)
  return last_rebalacing_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_last_rebalacing_date(std::string* last_rebalacing_date) {
  if (last_rebalacing_date != nullptr) {
    
  } else {
    
  }
  last_rebalacing_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_rebalacing_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.last_rebalacing_date)
}

// int32 times_of_404 = 11;
inline void PortfolioInfo::clear_times_of_404() {
  times_of_404_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortfolioInfo::_internal_times_of_404() const {
  return times_of_404_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortfolioInfo::times_of_404() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.times_of_404)
  return _internal_times_of_404();
}
inline void PortfolioInfo::_internal_set_times_of_404(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_of_404_ = value;
}
inline void PortfolioInfo::set_times_of_404(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times_of_404(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.times_of_404)
}

// float net_value = 101;
inline void PortfolioInfo::clear_net_value() {
  net_value_ = 0;
}
inline float PortfolioInfo::_internal_net_value() const {
  return net_value_;
}
inline float PortfolioInfo::net_value() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.net_value)
  return _internal_net_value();
}
inline void PortfolioInfo::_internal_set_net_value(float value) {
  
  net_value_ = value;
}
inline void PortfolioInfo::set_net_value(float value) {
  _internal_set_net_value(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.net_value)
}

// string created_date = 102;
inline void PortfolioInfo::clear_created_date() {
  created_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::created_date() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.created_date)
  return _internal_created_date();
}
inline void PortfolioInfo::set_created_date(const std::string& value) {
  _internal_set_created_date(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.created_date)
}
inline std::string* PortfolioInfo::mutable_created_date() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.created_date)
  return _internal_mutable_created_date();
}
inline const std::string& PortfolioInfo::_internal_created_date() const {
  return created_date_.Get();
}
inline void PortfolioInfo::_internal_set_created_date(const std::string& value) {
  
  created_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_created_date(std::string&& value) {
  
  created_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.created_date)
}
inline void PortfolioInfo::set_created_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.created_date)
}
inline void PortfolioInfo::set_created_date(const char* value,
    size_t size) {
  
  created_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.created_date)
}
inline std::string* PortfolioInfo::_internal_mutable_created_date() {
  
  return created_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_created_date() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.created_date)
  return created_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_created_date(std::string* created_date) {
  if (created_date != nullptr) {
    
  } else {
    
  }
  created_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.created_date)
}

// float max_draw = 103;
inline void PortfolioInfo::clear_max_draw() {
  max_draw_ = 0;
}
inline float PortfolioInfo::_internal_max_draw() const {
  return max_draw_;
}
inline float PortfolioInfo::max_draw() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.max_draw)
  return _internal_max_draw();
}
inline void PortfolioInfo::_internal_set_max_draw(float value) {
  
  max_draw_ = value;
}
inline void PortfolioInfo::set_max_draw(float value) {
  _internal_set_max_draw(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.max_draw)
}

// int32 follower_count = 104;
inline void PortfolioInfo::clear_follower_count() {
  follower_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortfolioInfo::_internal_follower_count() const {
  return follower_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortfolioInfo::follower_count() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.follower_count)
  return _internal_follower_count();
}
inline void PortfolioInfo::_internal_set_follower_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  follower_count_ = value;
}
inline void PortfolioInfo::set_follower_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_follower_count(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.follower_count)
}

// float turnover_90 = 105;
inline void PortfolioInfo::clear_turnover_90() {
  turnover_90_ = 0;
}
inline float PortfolioInfo::_internal_turnover_90() const {
  return turnover_90_;
}
inline float PortfolioInfo::turnover_90() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.turnover_90)
  return _internal_turnover_90();
}
inline void PortfolioInfo::_internal_set_turnover_90(float value) {
  
  turnover_90_ = value;
}
inline void PortfolioInfo::set_turnover_90(float value) {
  _internal_set_turnover_90(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.turnover_90)
}

// float turnover_360 = 106;
inline void PortfolioInfo::clear_turnover_360() {
  turnover_360_ = 0;
}
inline float PortfolioInfo::_internal_turnover_360() const {
  return turnover_360_;
}
inline float PortfolioInfo::turnover_360() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.turnover_360)
  return _internal_turnover_360();
}
inline void PortfolioInfo::_internal_set_turnover_360(float value) {
  
  turnover_360_ = value;
}
inline void PortfolioInfo::set_turnover_360(float value) {
  _internal_set_turnover_360(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.turnover_360)
}

// float monthly_gain = 107;
inline void PortfolioInfo::clear_monthly_gain() {
  monthly_gain_ = 0;
}
inline float PortfolioInfo::_internal_monthly_gain() const {
  return monthly_gain_;
}
inline float PortfolioInfo::monthly_gain() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.monthly_gain)
  return _internal_monthly_gain();
}
inline void PortfolioInfo::_internal_set_monthly_gain(float value) {
  
  monthly_gain_ = value;
}
inline void PortfolioInfo::set_monthly_gain(float value) {
  _internal_set_monthly_gain(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.monthly_gain)
}

// bytes zipped_zh_html = 1001;
inline void PortfolioInfo::clear_zipped_zh_html() {
  zipped_zh_html_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::zipped_zh_html() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.zipped_zh_html)
  return _internal_zipped_zh_html();
}
inline void PortfolioInfo::set_zipped_zh_html(const std::string& value) {
  _internal_set_zipped_zh_html(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.zipped_zh_html)
}
inline std::string* PortfolioInfo::mutable_zipped_zh_html() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.zipped_zh_html)
  return _internal_mutable_zipped_zh_html();
}
inline const std::string& PortfolioInfo::_internal_zipped_zh_html() const {
  return zipped_zh_html_.Get();
}
inline void PortfolioInfo::_internal_set_zipped_zh_html(const std::string& value) {
  
  zipped_zh_html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_zipped_zh_html(std::string&& value) {
  
  zipped_zh_html_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.zipped_zh_html)
}
inline void PortfolioInfo::set_zipped_zh_html(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zipped_zh_html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.zipped_zh_html)
}
inline void PortfolioInfo::set_zipped_zh_html(const void* value,
    size_t size) {
  
  zipped_zh_html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.zipped_zh_html)
}
inline std::string* PortfolioInfo::_internal_mutable_zipped_zh_html() {
  
  return zipped_zh_html_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_zipped_zh_html() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.zipped_zh_html)
  return zipped_zh_html_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_zipped_zh_html(std::string* zipped_zh_html) {
  if (zipped_zh_html != nullptr) {
    
  } else {
    
  }
  zipped_zh_html_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zipped_zh_html,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.zipped_zh_html)
}

// bytes zipped_nav_json = 1002;
inline void PortfolioInfo::clear_zipped_nav_json() {
  zipped_nav_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PortfolioInfo::zipped_nav_json() const {
  // @@protoc_insertion_point(field_get:PortfolioInfo.zipped_nav_json)
  return _internal_zipped_nav_json();
}
inline void PortfolioInfo::set_zipped_nav_json(const std::string& value) {
  _internal_set_zipped_nav_json(value);
  // @@protoc_insertion_point(field_set:PortfolioInfo.zipped_nav_json)
}
inline std::string* PortfolioInfo::mutable_zipped_nav_json() {
  // @@protoc_insertion_point(field_mutable:PortfolioInfo.zipped_nav_json)
  return _internal_mutable_zipped_nav_json();
}
inline const std::string& PortfolioInfo::_internal_zipped_nav_json() const {
  return zipped_nav_json_.Get();
}
inline void PortfolioInfo::_internal_set_zipped_nav_json(const std::string& value) {
  
  zipped_nav_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PortfolioInfo::set_zipped_nav_json(std::string&& value) {
  
  zipped_nav_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PortfolioInfo.zipped_nav_json)
}
inline void PortfolioInfo::set_zipped_nav_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zipped_nav_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PortfolioInfo.zipped_nav_json)
}
inline void PortfolioInfo::set_zipped_nav_json(const void* value,
    size_t size) {
  
  zipped_nav_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PortfolioInfo.zipped_nav_json)
}
inline std::string* PortfolioInfo::_internal_mutable_zipped_nav_json() {
  
  return zipped_nav_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PortfolioInfo::release_zipped_nav_json() {
  // @@protoc_insertion_point(field_release:PortfolioInfo.zipped_nav_json)
  return zipped_nav_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PortfolioInfo::set_allocated_zipped_nav_json(std::string* zipped_nav_json) {
  if (zipped_nav_json != nullptr) {
    
  } else {
    
  }
  zipped_nav_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zipped_nav_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PortfolioInfo.zipped_nav_json)
}

// -------------------------------------------------------------------

// PortfolioInfoList

// repeated .PortfolioInfo portfolio_list = 1;
inline int PortfolioInfoList::_internal_portfolio_list_size() const {
  return portfolio_list_.size();
}
inline int PortfolioInfoList::portfolio_list_size() const {
  return _internal_portfolio_list_size();
}
inline void PortfolioInfoList::clear_portfolio_list() {
  portfolio_list_.Clear();
}
inline ::PortfolioInfo* PortfolioInfoList::mutable_portfolio_list(int index) {
  // @@protoc_insertion_point(field_mutable:PortfolioInfoList.portfolio_list)
  return portfolio_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PortfolioInfo >*
PortfolioInfoList::mutable_portfolio_list() {
  // @@protoc_insertion_point(field_mutable_list:PortfolioInfoList.portfolio_list)
  return &portfolio_list_;
}
inline const ::PortfolioInfo& PortfolioInfoList::_internal_portfolio_list(int index) const {
  return portfolio_list_.Get(index);
}
inline const ::PortfolioInfo& PortfolioInfoList::portfolio_list(int index) const {
  // @@protoc_insertion_point(field_get:PortfolioInfoList.portfolio_list)
  return _internal_portfolio_list(index);
}
inline ::PortfolioInfo* PortfolioInfoList::_internal_add_portfolio_list() {
  return portfolio_list_.Add();
}
inline ::PortfolioInfo* PortfolioInfoList::add_portfolio_list() {
  // @@protoc_insertion_point(field_add:PortfolioInfoList.portfolio_list)
  return _internal_add_portfolio_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PortfolioInfo >&
PortfolioInfoList::portfolio_list() const {
  // @@protoc_insertion_point(field_list:PortfolioInfoList.portfolio_list)
  return portfolio_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fxueqiu_2eproto
