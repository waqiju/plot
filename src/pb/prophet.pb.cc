// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/prophet.proto

#include "pb/prophet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DailyMinute_pb_2fprophet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_IndicatorSet_pb_2fprophet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KChart_pb_2fprophet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MA_pb_2fprophet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultInfo_pb_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_pb_2fprophet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pb_2fprophet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrueRange_pb_2fprophet_2eproto;
namespace pb {
class StockDateIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StockDateInterval> _instance;
} _StockDateInterval_default_instance_;
class IndicatorSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndicatorSet> _instance;
} _IndicatorSet_default_instance_;
class FetchIndicatorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchIndicatorResponse> _instance;
} _FetchIndicatorResponse_default_instance_;
class LiveSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveSet> _instance;
} _LiveSet_default_instance_;
class KChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KChart> _instance;
} _KChart_default_instance_;
class MADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MA> _instance;
} _MA_default_instance_;
class TrueRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrueRange> _instance;
} _TrueRange_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
class DailyMinuteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DailyMinute> _instance;
} _DailyMinute_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_DailyMinute_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DailyMinute_default_instance_;
    new (ptr) ::pb::DailyMinute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DailyMinute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DailyMinute_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DailyMinute_pb_2fprophet_2eproto}, {
      &scc_info_KChart_pb_2fprophet_2eproto.base,}};

static void InitDefaultsscc_info_FetchIndicatorResponse_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_FetchIndicatorResponse_default_instance_;
    new (ptr) ::pb::FetchIndicatorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::FetchIndicatorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FetchIndicatorResponse_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FetchIndicatorResponse_pb_2fprophet_2eproto}, {
      &scc_info_ResultInfo_pb_2fcommon_2eproto.base,
      &scc_info_IndicatorSet_pb_2fprophet_2eproto.base,}};

static void InitDefaultsscc_info_IndicatorSet_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_IndicatorSet_default_instance_;
    new (ptr) ::pb::IndicatorSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::IndicatorSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_IndicatorSet_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_IndicatorSet_pb_2fprophet_2eproto}, {
      &scc_info_KChart_pb_2fprophet_2eproto.base,
      &scc_info_MA_pb_2fprophet_2eproto.base,
      &scc_info_TrueRange_pb_2fprophet_2eproto.base,
      &scc_info_Segment_pb_2fprophet_2eproto.base,
      &scc_info_DailyMinute_pb_2fprophet_2eproto.base,}};

static void InitDefaultsscc_info_KChart_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_KChart_default_instance_;
    new (ptr) ::pb::KChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::KChart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KChart_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KChart_pb_2fprophet_2eproto}, {}};

static void InitDefaultsscc_info_LiveSet_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_LiveSet_default_instance_;
    new (ptr) ::pb::LiveSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::LiveSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiveSet_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiveSet_pb_2fprophet_2eproto}, {
      &scc_info_KChart_pb_2fprophet_2eproto.base,}};

static void InitDefaultsscc_info_MA_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MA_default_instance_;
    new (ptr) ::pb::MA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MA_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MA_pb_2fprophet_2eproto}, {}};

static void InitDefaultsscc_info_Segment_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Segment_default_instance_;
    new (ptr) ::pb::Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Segment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_pb_2fprophet_2eproto}, {}};

static void InitDefaultsscc_info_StockDateInterval_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_StockDateInterval_default_instance_;
    new (ptr) ::pb::StockDateInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::StockDateInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StockDateInterval_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StockDateInterval_pb_2fprophet_2eproto}, {}};

static void InitDefaultsscc_info_TrueRange_pb_2fprophet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TrueRange_default_instance_;
    new (ptr) ::pb::TrueRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TrueRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrueRange_pb_2fprophet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrueRange_pb_2fprophet_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fprophet_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pb_2fprophet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fprophet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2fprophet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::StockDateInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::StockDateInterval, code_),
  PROTOBUF_FIELD_OFFSET(::pb::StockDateInterval, start_),
  PROTOBUF_FIELD_OFFSET(::pb::StockDateInterval, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, version_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, date_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, daily_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, daily_ma_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, weekly_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, weekly_ma_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, true_range_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, segment_list_),
  PROTOBUF_FIELD_OFFSET(::pb::IndicatorSet, daily_minute_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::FetchIndicatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::FetchIndicatorResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pb::FetchIndicatorResponse, indicator_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::LiveSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::LiveSet, timestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::LiveSet, version_),
  PROTOBUF_FIELD_OFFSET(::pb::LiveSet, daily_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::KChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::KChart, code_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, date_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, time_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, open_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, high_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, low_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, close_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, change_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, vol_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, original_open_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, original_high_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, original_low_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, original_close_),
  PROTOBUF_FIELD_OFFSET(::pb::KChart, adjust_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MA, code_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, date_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, last_1_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, last_5_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, last_10_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, last_20_),
  PROTOBUF_FIELD_OFFSET(::pb::MA, last_60_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, code_),
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, date_),
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, range_),
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, average_),
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, gentle_),
  PROTOBUF_FIELD_OFFSET(::pb::TrueRange, gentle_60_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Segment, code_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, date_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, start_date_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, gentle_range_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, low_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, low_date_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, high_),
  PROTOBUF_FIELD_OFFSET(::pb::Segment, high_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DailyMinute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::DailyMinute, code_),
  PROTOBUF_FIELD_OFFSET(::pb::DailyMinute, date_),
  PROTOBUF_FIELD_OFFSET(::pb::DailyMinute, minute_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::StockDateInterval)},
  { 8, -1, sizeof(::pb::IndicatorSet)},
  { 23, -1, sizeof(::pb::FetchIndicatorResponse)},
  { 30, -1, sizeof(::pb::LiveSet)},
  { 38, -1, sizeof(::pb::KChart)},
  { 58, -1, sizeof(::pb::MA)},
  { 70, -1, sizeof(::pb::TrueRange)},
  { 81, -1, sizeof(::pb::Segment)},
  { 95, -1, sizeof(::pb::DailyMinute)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_StockDateInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_IndicatorSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_FetchIndicatorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_LiveSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_KChart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_MA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TrueRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_DailyMinute_default_instance_),
};

const char descriptor_table_protodef_pb_2fprophet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pb/prophet.proto\022\002pb\032\017pb/common.proto\""
  "=\n\021StockDateInterval\022\014\n\004code\030\001 \001(\t\022\r\n\005st"
  "art\030\002 \001(\r\022\013\n\003end\030\003 \001(\r\"\274\002\n\014IndicatorSet\022"
  "\021\n\ttimestamp\030\001 \001(\004\022\017\n\007version\030\002 \001(\004\022\021\n\td"
  "ate_list\030\003 \003(\r\022\036\n\ndaily_list\030\004 \003(\0132\n.pb."
  "KChart\022\035\n\rdaily_ma_list\030\005 \003(\0132\006.pb.MA\022\037\n"
  "\013weekly_list\030\006 \003(\0132\n.pb.KChart\022\036\n\016weekly"
  "_ma_list\030\007 \003(\0132\006.pb.MA\022&\n\017true_range_lis"
  "t\030\010 \003(\0132\r.pb.TrueRange\022!\n\014segment_list\030\t"
  " \003(\0132\013.pb.Segment\022*\n\021daily_minute_list\030\n"
  " \003(\0132\017.pb.DailyMinute\"a\n\026FetchIndicatorR"
  "esponse\022\036\n\006result\030\001 \001(\0132\016.pb.ResultInfo\022"
  "\'\n\rindicator_set\030\002 \001(\0132\020.pb.IndicatorSet"
  "\"H\n\007LiveSet\022\021\n\ttimestamp\030\001 \001(\004\022\017\n\007versio"
  "n\030\002 \001(\004\022\031\n\005daily\030\003 \001(\0132\n.pb.KChart\"\212\002\n\006K"
  "Chart\022\014\n\004code\030\001 \001(\t\022\014\n\004date\030\002 \001(\t\022\014\n\004tim"
  "e\030\003 \001(\t\022\014\n\004open\030\004 \001(\001\022\014\n\004high\030\005 \001(\001\022\013\n\003l"
  "ow\030\006 \001(\001\022\r\n\005close\030\007 \001(\001\022\016\n\006change\030\010 \001(\001\022"
  "\013\n\003vol\030\t \001(\001\022\016\n\006amount\030\n \001(\001\022\025\n\roriginal"
  "_open\030\013 \001(\001\022\025\n\roriginal_high\030\014 \001(\001\022\024\n\014or"
  "iginal_low\030\r \001(\001\022\026\n\016original_close\030\016 \001(\001"
  "\022\025\n\radjust_factor\030\017 \001(\001\"s\n\002MA\022\014\n\004code\030\001 "
  "\001(\t\022\014\n\004date\030\002 \001(\t\022\016\n\006last_1\030\003 \001(\001\022\016\n\006las"
  "t_5\030\004 \001(\001\022\017\n\007last_10\030\005 \001(\001\022\017\n\007last_20\030\006 "
  "\001(\001\022\017\n\007last_60\030\007 \001(\001\"j\n\tTrueRange\022\014\n\004cod"
  "e\030\001 \001(\t\022\014\n\004date\030\002 \001(\t\022\r\n\005range\030\003 \001(\001\022\017\n\007"
  "average\030\004 \001(\001\022\016\n\006gentle\030\005 \001(\001\022\021\n\tgentle_"
  "60\030\006 \001(\001\"\242\001\n\007Segment\022\014\n\004code\030\001 \001(\t\022\014\n\004da"
  "te\030\002 \001(\t\022\021\n\tdirection\030\003 \001(\001\022\022\n\nstart_dat"
  "e\030\004 \001(\t\022\024\n\014gentle_range\030\005 \001(\001\022\013\n\003low\030\006 \001"
  "(\001\022\020\n\010low_date\030\007 \001(\t\022\014\n\004high\030\010 \001(\001\022\021\n\thi"
  "gh_date\030\t \001(\t\"J\n\013DailyMinute\022\014\n\004code\030\001 \001"
  "(\t\022\014\n\004date\030\002 \001(\t\022\037\n\013minute_list\030\003 \003(\0132\n."
  "pb.KChart2\222\001\n\007Prophet\022G\n\022FetchStockDateL"
  "ist\022\025.pb.StockDateInterval\032\032.pb.FetchInd"
  "icatorResponse\022>\n\016FetchIndicator\022\020.pb.In"
  "dicatorSet\032\032.pb.FetchIndicatorResponseb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2fprophet_2eproto_deps[1] = {
  &::descriptor_table_pb_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pb_2fprophet_2eproto_sccs[9] = {
  &scc_info_DailyMinute_pb_2fprophet_2eproto.base,
  &scc_info_FetchIndicatorResponse_pb_2fprophet_2eproto.base,
  &scc_info_IndicatorSet_pb_2fprophet_2eproto.base,
  &scc_info_KChart_pb_2fprophet_2eproto.base,
  &scc_info_LiveSet_pb_2fprophet_2eproto.base,
  &scc_info_MA_pb_2fprophet_2eproto.base,
  &scc_info_Segment_pb_2fprophet_2eproto.base,
  &scc_info_StockDateInterval_pb_2fprophet_2eproto.base,
  &scc_info_TrueRange_pb_2fprophet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fprophet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fprophet_2eproto = {
  false, false, descriptor_table_protodef_pb_2fprophet_2eproto, "pb/prophet.proto", 1486,
  &descriptor_table_pb_2fprophet_2eproto_once, descriptor_table_pb_2fprophet_2eproto_sccs, descriptor_table_pb_2fprophet_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_pb_2fprophet_2eproto::offsets,
  file_level_metadata_pb_2fprophet_2eproto, 9, file_level_enum_descriptors_pb_2fprophet_2eproto, file_level_service_descriptors_pb_2fprophet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pb_2fprophet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pb_2fprophet_2eproto)), true);
namespace pb {

// ===================================================================

void StockDateInterval::InitAsDefaultInstance() {
}
class StockDateInterval::_Internal {
 public:
};

StockDateInterval::StockDateInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.StockDateInterval)
}
StockDateInterval::StockDateInterval(const StockDateInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:pb.StockDateInterval)
}

void StockDateInterval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StockDateInterval_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

StockDateInterval::~StockDateInterval() {
  // @@protoc_insertion_point(destructor:pb.StockDateInterval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StockDateInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockDateInterval::ArenaDtor(void* object) {
  StockDateInterval* _this = reinterpret_cast< StockDateInterval* >(object);
  (void)_this;
}
void StockDateInterval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockDateInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StockDateInterval& StockDateInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StockDateInterval_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void StockDateInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.StockDateInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockDateInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.StockDateInterval.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockDateInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StockDateInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.StockDateInterval.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start(), target);
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StockDateInterval)
  return target;
}

size_t StockDateInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.StockDateInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start());
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockDateInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.StockDateInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const StockDateInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockDateInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.StockDateInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.StockDateInterval)
    MergeFrom(*source);
  }
}

void StockDateInterval::MergeFrom(const StockDateInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.StockDateInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void StockDateInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.StockDateInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockDateInterval::CopyFrom(const StockDateInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.StockDateInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockDateInterval::IsInitialized() const {
  return true;
}

void StockDateInterval::InternalSwap(StockDateInterval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StockDateInterval, end_)
      + sizeof(StockDateInterval::end_)
      - PROTOBUF_FIELD_OFFSET(StockDateInterval, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StockDateInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IndicatorSet::InitAsDefaultInstance() {
}
class IndicatorSet::_Internal {
 public:
};

IndicatorSet::IndicatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  date_list_(arena),
  daily_list_(arena),
  daily_ma_list_(arena),
  weekly_list_(arena),
  weekly_ma_list_(arena),
  true_range_list_(arena),
  segment_list_(arena),
  daily_minute_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.IndicatorSet)
}
IndicatorSet::IndicatorSet(const IndicatorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      date_list_(from.date_list_),
      daily_list_(from.daily_list_),
      daily_ma_list_(from.daily_ma_list_),
      weekly_list_(from.weekly_list_),
      weekly_ma_list_(from.weekly_ma_list_),
      true_range_list_(from.true_range_list_),
      segment_list_(from.segment_list_),
      daily_minute_list_(from.daily_minute_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.IndicatorSet)
}

void IndicatorSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndicatorSet_pb_2fprophet_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

IndicatorSet::~IndicatorSet() {
  // @@protoc_insertion_point(destructor:pb.IndicatorSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndicatorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndicatorSet::ArenaDtor(void* object) {
  IndicatorSet* _this = reinterpret_cast< IndicatorSet* >(object);
  (void)_this;
}
void IndicatorSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndicatorSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndicatorSet& IndicatorSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndicatorSet_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void IndicatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.IndicatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_list_.Clear();
  daily_list_.Clear();
  daily_ma_list_.Clear();
  weekly_list_.Clear();
  weekly_ma_list_.Clear();
  true_range_list_.Clear();
  segment_list_.Clear();
  daily_minute_list_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndicatorSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 date_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_date_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_date_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.KChart daily_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daily_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.MA daily_ma_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daily_ma_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.KChart weekly_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weekly_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.MA weekly_ma_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weekly_ma_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.TrueRange true_range_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_true_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.Segment segment_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.DailyMinute daily_minute_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daily_minute_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndicatorSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.IndicatorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  // repeated uint32 date_list = 3;
  {
    int byte_size = _date_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_date_list(), byte_size, target);
    }
  }

  // repeated .pb.KChart daily_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daily_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_daily_list(i), target, stream);
  }

  // repeated .pb.MA daily_ma_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daily_ma_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_daily_ma_list(i), target, stream);
  }

  // repeated .pb.KChart weekly_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weekly_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_weekly_list(i), target, stream);
  }

  // repeated .pb.MA weekly_ma_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weekly_ma_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_weekly_ma_list(i), target, stream);
  }

  // repeated .pb.TrueRange true_range_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_true_range_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_true_range_list(i), target, stream);
  }

  // repeated .pb.Segment segment_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_segment_list(i), target, stream);
  }

  // repeated .pb.DailyMinute daily_minute_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daily_minute_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_daily_minute_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.IndicatorSet)
  return target;
}

size_t IndicatorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.IndicatorSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 date_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->date_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _date_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pb.KChart daily_list = 4;
  total_size += 1UL * this->_internal_daily_list_size();
  for (const auto& msg : this->daily_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.MA daily_ma_list = 5;
  total_size += 1UL * this->_internal_daily_ma_list_size();
  for (const auto& msg : this->daily_ma_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.KChart weekly_list = 6;
  total_size += 1UL * this->_internal_weekly_list_size();
  for (const auto& msg : this->weekly_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.MA weekly_ma_list = 7;
  total_size += 1UL * this->_internal_weekly_ma_list_size();
  for (const auto& msg : this->weekly_ma_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.TrueRange true_range_list = 8;
  total_size += 1UL * this->_internal_true_range_list_size();
  for (const auto& msg : this->true_range_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.Segment segment_list = 9;
  total_size += 1UL * this->_internal_segment_list_size();
  for (const auto& msg : this->segment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.DailyMinute daily_minute_list = 10;
  total_size += 1UL * this->_internal_daily_minute_list_size();
  for (const auto& msg : this->daily_minute_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndicatorSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.IndicatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  const IndicatorSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndicatorSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.IndicatorSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.IndicatorSet)
    MergeFrom(*source);
  }
}

void IndicatorSet::MergeFrom(const IndicatorSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.IndicatorSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  date_list_.MergeFrom(from.date_list_);
  daily_list_.MergeFrom(from.daily_list_);
  daily_ma_list_.MergeFrom(from.daily_ma_list_);
  weekly_list_.MergeFrom(from.weekly_list_);
  weekly_ma_list_.MergeFrom(from.weekly_ma_list_);
  true_range_list_.MergeFrom(from.true_range_list_);
  segment_list_.MergeFrom(from.segment_list_);
  daily_minute_list_.MergeFrom(from.daily_minute_list_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void IndicatorSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.IndicatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndicatorSet::CopyFrom(const IndicatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.IndicatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndicatorSet::IsInitialized() const {
  return true;
}

void IndicatorSet::InternalSwap(IndicatorSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_list_.InternalSwap(&other->date_list_);
  daily_list_.InternalSwap(&other->daily_list_);
  daily_ma_list_.InternalSwap(&other->daily_ma_list_);
  weekly_list_.InternalSwap(&other->weekly_list_);
  weekly_ma_list_.InternalSwap(&other->weekly_ma_list_);
  true_range_list_.InternalSwap(&other->true_range_list_);
  segment_list_.InternalSwap(&other->segment_list_);
  daily_minute_list_.InternalSwap(&other->daily_minute_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicatorSet, version_)
      + sizeof(IndicatorSet::version_)
      - PROTOBUF_FIELD_OFFSET(IndicatorSet, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndicatorSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchIndicatorResponse::InitAsDefaultInstance() {
  ::pb::_FetchIndicatorResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::pb::ResultInfo*>(
      ::pb::ResultInfo::internal_default_instance());
  ::pb::_FetchIndicatorResponse_default_instance_._instance.get_mutable()->indicator_set_ = const_cast< ::pb::IndicatorSet*>(
      ::pb::IndicatorSet::internal_default_instance());
}
class FetchIndicatorResponse::_Internal {
 public:
  static const ::pb::ResultInfo& result(const FetchIndicatorResponse* msg);
  static const ::pb::IndicatorSet& indicator_set(const FetchIndicatorResponse* msg);
};

const ::pb::ResultInfo&
FetchIndicatorResponse::_Internal::result(const FetchIndicatorResponse* msg) {
  return *msg->result_;
}
const ::pb::IndicatorSet&
FetchIndicatorResponse::_Internal::indicator_set(const FetchIndicatorResponse* msg) {
  return *msg->indicator_set_;
}
void FetchIndicatorResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
FetchIndicatorResponse::FetchIndicatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.FetchIndicatorResponse)
}
FetchIndicatorResponse::FetchIndicatorResponse(const FetchIndicatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::pb::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_indicator_set()) {
    indicator_set_ = new ::pb::IndicatorSet(*from.indicator_set_);
  } else {
    indicator_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.FetchIndicatorResponse)
}

void FetchIndicatorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchIndicatorResponse_pb_2fprophet_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indicator_set_) -
      reinterpret_cast<char*>(&result_)) + sizeof(indicator_set_));
}

FetchIndicatorResponse::~FetchIndicatorResponse() {
  // @@protoc_insertion_point(destructor:pb.FetchIndicatorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchIndicatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete indicator_set_;
}

void FetchIndicatorResponse::ArenaDtor(void* object) {
  FetchIndicatorResponse* _this = reinterpret_cast< FetchIndicatorResponse* >(object);
  (void)_this;
}
void FetchIndicatorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchIndicatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchIndicatorResponse& FetchIndicatorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchIndicatorResponse_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void FetchIndicatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FetchIndicatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && indicator_set_ != nullptr) {
    delete indicator_set_;
  }
  indicator_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchIndicatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.IndicatorSet indicator_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_indicator_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchIndicatorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FetchIndicatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .pb.IndicatorSet indicator_set = 2;
  if (this->has_indicator_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::indicator_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FetchIndicatorResponse)
  return target;
}

size_t FetchIndicatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FetchIndicatorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .pb.IndicatorSet indicator_set = 2;
  if (this->has_indicator_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indicator_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchIndicatorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FetchIndicatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchIndicatorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchIndicatorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FetchIndicatorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FetchIndicatorResponse)
    MergeFrom(*source);
  }
}

void FetchIndicatorResponse::MergeFrom(const FetchIndicatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FetchIndicatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::pb::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from.has_indicator_set()) {
    _internal_mutable_indicator_set()->::pb::IndicatorSet::MergeFrom(from._internal_indicator_set());
  }
}

void FetchIndicatorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FetchIndicatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchIndicatorResponse::CopyFrom(const FetchIndicatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FetchIndicatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchIndicatorResponse::IsInitialized() const {
  return true;
}

void FetchIndicatorResponse::InternalSwap(FetchIndicatorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchIndicatorResponse, indicator_set_)
      + sizeof(FetchIndicatorResponse::indicator_set_)
      - PROTOBUF_FIELD_OFFSET(FetchIndicatorResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchIndicatorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveSet::InitAsDefaultInstance() {
  ::pb::_LiveSet_default_instance_._instance.get_mutable()->daily_ = const_cast< ::pb::KChart*>(
      ::pb::KChart::internal_default_instance());
}
class LiveSet::_Internal {
 public:
  static const ::pb::KChart& daily(const LiveSet* msg);
};

const ::pb::KChart&
LiveSet::_Internal::daily(const LiveSet* msg) {
  return *msg->daily_;
}
LiveSet::LiveSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.LiveSet)
}
LiveSet::LiveSet(const LiveSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_daily()) {
    daily_ = new ::pb::KChart(*from.daily_);
  } else {
    daily_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:pb.LiveSet)
}

void LiveSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveSet_pb_2fprophet_2eproto.base);
  ::memset(&daily_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&daily_)) + sizeof(version_));
}

LiveSet::~LiveSet() {
  // @@protoc_insertion_point(destructor:pb.LiveSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiveSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete daily_;
}

void LiveSet::ArenaDtor(void* object) {
  LiveSet* _this = reinterpret_cast< LiveSet* >(object);
  (void)_this;
}
void LiveSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiveSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveSet& LiveSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveSet_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void LiveSet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.LiveSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && daily_ != nullptr) {
    delete daily_;
  }
  daily_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.KChart daily = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_daily(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LiveSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  // .pb.KChart daily = 3;
  if (this->has_daily()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::daily(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LiveSet)
  return target;
}

size_t LiveSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.LiveSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.KChart daily = 3;
  if (this->has_daily()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *daily_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.LiveSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.LiveSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.LiveSet)
    MergeFrom(*source);
  }
}

void LiveSet::MergeFrom(const LiveSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.LiveSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_daily()) {
    _internal_mutable_daily()->::pb::KChart::MergeFrom(from._internal_daily());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void LiveSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.LiveSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveSet::CopyFrom(const LiveSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.LiveSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveSet::IsInitialized() const {
  return true;
}

void LiveSet::InternalSwap(LiveSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveSet, version_)
      + sizeof(LiveSet::version_)
      - PROTOBUF_FIELD_OFFSET(LiveSet, daily_)>(
          reinterpret_cast<char*>(&daily_),
          reinterpret_cast<char*>(&other->daily_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KChart::InitAsDefaultInstance() {
}
class KChart::_Internal {
 public:
};

KChart::KChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.KChart)
}
KChart::KChart(const KChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
      GetArena());
  }
  ::memcpy(&open_, &from.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&adjust_factor_) -
    reinterpret_cast<char*>(&open_)) + sizeof(adjust_factor_));
  // @@protoc_insertion_point(copy_constructor:pb.KChart)
}

void KChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KChart_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adjust_factor_) -
      reinterpret_cast<char*>(&open_)) + sizeof(adjust_factor_));
}

KChart::~KChart() {
  // @@protoc_insertion_point(destructor:pb.KChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KChart::ArenaDtor(void* object) {
  KChart* _this = reinterpret_cast< KChart* >(object);
  (void)_this;
}
void KChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KChart& KChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KChart_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void KChart::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adjust_factor_) -
      reinterpret_cast<char*>(&open_)) + sizeof(adjust_factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.KChart.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.KChart.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.KChart.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double change = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double amount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double original_open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          original_open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double original_high = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          original_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double original_low = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          original_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double original_close = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          original_close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double adjust_factor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          adjust_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.KChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.KChart.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.KChart.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // string time = 3;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.KChart.time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time(), target);
  }

  // double open = 4;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open(), target);
  }

  // double high = 5;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_high(), target);
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_low(), target);
  }

  // double close = 7;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_close(), target);
  }

  // double change = 8;
  if (!(this->change() <= 0 && this->change() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_change(), target);
  }

  // double vol = 9;
  if (!(this->vol() <= 0 && this->vol() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vol(), target);
  }

  // double amount = 10;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_amount(), target);
  }

  // double original_open = 11;
  if (!(this->original_open() <= 0 && this->original_open() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_original_open(), target);
  }

  // double original_high = 12;
  if (!(this->original_high() <= 0 && this->original_high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_original_high(), target);
  }

  // double original_low = 13;
  if (!(this->original_low() <= 0 && this->original_low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_original_low(), target);
  }

  // double original_close = 14;
  if (!(this->original_close() <= 0 && this->original_close() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_original_close(), target);
  }

  // double adjust_factor = 15;
  if (!(this->adjust_factor() <= 0 && this->adjust_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_adjust_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KChart)
  return target;
}

size_t KChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KChart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string time = 3;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // double open = 4;
  if (!(this->open() <= 0 && this->open() >= 0)) {
    total_size += 1 + 8;
  }

  // double high = 5;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // double close = 7;
  if (!(this->close() <= 0 && this->close() >= 0)) {
    total_size += 1 + 8;
  }

  // double change = 8;
  if (!(this->change() <= 0 && this->change() >= 0)) {
    total_size += 1 + 8;
  }

  // double vol = 9;
  if (!(this->vol() <= 0 && this->vol() >= 0)) {
    total_size += 1 + 8;
  }

  // double amount = 10;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double original_open = 11;
  if (!(this->original_open() <= 0 && this->original_open() >= 0)) {
    total_size += 1 + 8;
  }

  // double original_high = 12;
  if (!(this->original_high() <= 0 && this->original_high() >= 0)) {
    total_size += 1 + 8;
  }

  // double original_low = 13;
  if (!(this->original_low() <= 0 && this->original_low() >= 0)) {
    total_size += 1 + 8;
  }

  // double original_close = 14;
  if (!(this->original_close() <= 0 && this->original_close() >= 0)) {
    total_size += 1 + 8;
  }

  // double adjust_factor = 15;
  if (!(this->adjust_factor() <= 0 && this->adjust_factor() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KChart)
  GOOGLE_DCHECK_NE(&from, this);
  const KChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KChart)
    MergeFrom(*source);
  }
}

void KChart::MergeFrom(const KChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.open() <= 0 && from.open() >= 0)) {
    _internal_set_open(from._internal_open());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (!(from.close() <= 0 && from.close() >= 0)) {
    _internal_set_close(from._internal_close());
  }
  if (!(from.change() <= 0 && from.change() >= 0)) {
    _internal_set_change(from._internal_change());
  }
  if (!(from.vol() <= 0 && from.vol() >= 0)) {
    _internal_set_vol(from._internal_vol());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
  if (!(from.original_open() <= 0 && from.original_open() >= 0)) {
    _internal_set_original_open(from._internal_original_open());
  }
  if (!(from.original_high() <= 0 && from.original_high() >= 0)) {
    _internal_set_original_high(from._internal_original_high());
  }
  if (!(from.original_low() <= 0 && from.original_low() >= 0)) {
    _internal_set_original_low(from._internal_original_low());
  }
  if (!(from.original_close() <= 0 && from.original_close() >= 0)) {
    _internal_set_original_close(from._internal_original_close());
  }
  if (!(from.adjust_factor() <= 0 && from.adjust_factor() >= 0)) {
    _internal_set_adjust_factor(from._internal_adjust_factor());
  }
}

void KChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KChart::CopyFrom(const KChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KChart::IsInitialized() const {
  return true;
}

void KChart::InternalSwap(KChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KChart, adjust_factor_)
      + sizeof(KChart::adjust_factor_)
      - PROTOBUF_FIELD_OFFSET(KChart, open_)>(
          reinterpret_cast<char*>(&open_),
          reinterpret_cast<char*>(&other->open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KChart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MA::InitAsDefaultInstance() {
}
class MA::_Internal {
 public:
};

MA::MA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.MA)
}
MA::MA(const MA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  ::memcpy(&last_1_, &from.last_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_60_) -
    reinterpret_cast<char*>(&last_1_)) + sizeof(last_60_));
  // @@protoc_insertion_point(copy_constructor:pb.MA)
}

void MA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MA_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_60_) -
      reinterpret_cast<char*>(&last_1_)) + sizeof(last_60_));
}

MA::~MA() {
  // @@protoc_insertion_point(destructor:pb.MA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MA::ArenaDtor(void* object) {
  MA* _this = reinterpret_cast< MA* >(object);
  (void)_this;
}
void MA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MA& MA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MA_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void MA::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_60_) -
      reinterpret_cast<char*>(&last_1_)) + sizeof(last_60_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.MA.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.MA.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          last_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          last_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_10 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          last_10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_20 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          last_20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double last_60 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          last_60_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MA.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.MA.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // double last_1 = 3;
  if (!(this->last_1() <= 0 && this->last_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_last_1(), target);
  }

  // double last_5 = 4;
  if (!(this->last_5() <= 0 && this->last_5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_last_5(), target);
  }

  // double last_10 = 5;
  if (!(this->last_10() <= 0 && this->last_10() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_last_10(), target);
  }

  // double last_20 = 6;
  if (!(this->last_20() <= 0 && this->last_20() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_last_20(), target);
  }

  // double last_60 = 7;
  if (!(this->last_60() <= 0 && this->last_60() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_60(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MA)
  return target;
}

size_t MA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // double last_1 = 3;
  if (!(this->last_1() <= 0 && this->last_1() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_5 = 4;
  if (!(this->last_5() <= 0 && this->last_5() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_10 = 5;
  if (!(this->last_10() <= 0 && this->last_10() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_20 = 6;
  if (!(this->last_20() <= 0 && this->last_20() >= 0)) {
    total_size += 1 + 8;
  }

  // double last_60 = 7;
  if (!(this->last_60() <= 0 && this->last_60() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MA)
  GOOGLE_DCHECK_NE(&from, this);
  const MA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MA)
    MergeFrom(*source);
  }
}

void MA::MergeFrom(const MA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (!(from.last_1() <= 0 && from.last_1() >= 0)) {
    _internal_set_last_1(from._internal_last_1());
  }
  if (!(from.last_5() <= 0 && from.last_5() >= 0)) {
    _internal_set_last_5(from._internal_last_5());
  }
  if (!(from.last_10() <= 0 && from.last_10() >= 0)) {
    _internal_set_last_10(from._internal_last_10());
  }
  if (!(from.last_20() <= 0 && from.last_20() >= 0)) {
    _internal_set_last_20(from._internal_last_20());
  }
  if (!(from.last_60() <= 0 && from.last_60() >= 0)) {
    _internal_set_last_60(from._internal_last_60());
  }
}

void MA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MA::CopyFrom(const MA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MA::IsInitialized() const {
  return true;
}

void MA::InternalSwap(MA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MA, last_60_)
      + sizeof(MA::last_60_)
      - PROTOBUF_FIELD_OFFSET(MA, last_1_)>(
          reinterpret_cast<char*>(&last_1_),
          reinterpret_cast<char*>(&other->last_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrueRange::InitAsDefaultInstance() {
}
class TrueRange::_Internal {
 public:
};

TrueRange::TrueRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TrueRange)
}
TrueRange::TrueRange(const TrueRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  ::memcpy(&range_, &from.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&gentle_60_) -
    reinterpret_cast<char*>(&range_)) + sizeof(gentle_60_));
  // @@protoc_insertion_point(copy_constructor:pb.TrueRange)
}

void TrueRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrueRange_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gentle_60_) -
      reinterpret_cast<char*>(&range_)) + sizeof(gentle_60_));
}

TrueRange::~TrueRange() {
  // @@protoc_insertion_point(destructor:pb.TrueRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrueRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrueRange::ArenaDtor(void* object) {
  TrueRange* _this = reinterpret_cast< TrueRange* >(object);
  (void)_this;
}
void TrueRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrueRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrueRange& TrueRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrueRange_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void TrueRange::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TrueRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gentle_60_) -
      reinterpret_cast<char*>(&range_)) + sizeof(gentle_60_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrueRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TrueRange.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TrueRange.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double average = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gentle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          gentle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gentle_60 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          gentle_60_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrueRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TrueRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TrueRange.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TrueRange.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // double range = 3;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_range(), target);
  }

  // double average = 4;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_average(), target);
  }

  // double gentle = 5;
  if (!(this->gentle() <= 0 && this->gentle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_gentle(), target);
  }

  // double gentle_60 = 6;
  if (!(this->gentle_60() <= 0 && this->gentle_60() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_gentle_60(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TrueRange)
  return target;
}

size_t TrueRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TrueRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // double range = 3;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 8;
  }

  // double average = 4;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    total_size += 1 + 8;
  }

  // double gentle = 5;
  if (!(this->gentle() <= 0 && this->gentle() >= 0)) {
    total_size += 1 + 8;
  }

  // double gentle_60 = 6;
  if (!(this->gentle_60() <= 0 && this->gentle_60() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrueRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TrueRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TrueRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrueRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TrueRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TrueRange)
    MergeFrom(*source);
  }
}

void TrueRange::MergeFrom(const TrueRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TrueRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
  if (!(from.average() <= 0 && from.average() >= 0)) {
    _internal_set_average(from._internal_average());
  }
  if (!(from.gentle() <= 0 && from.gentle() >= 0)) {
    _internal_set_gentle(from._internal_gentle());
  }
  if (!(from.gentle_60() <= 0 && from.gentle_60() >= 0)) {
    _internal_set_gentle_60(from._internal_gentle_60());
  }
}

void TrueRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TrueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrueRange::CopyFrom(const TrueRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TrueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrueRange::IsInitialized() const {
  return true;
}

void TrueRange::InternalSwap(TrueRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrueRange, gentle_60_)
      + sizeof(TrueRange::gentle_60_)
      - PROTOBUF_FIELD_OFFSET(TrueRange, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrueRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Segment::InitAsDefaultInstance() {
}
class Segment::_Internal {
 public:
};

Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_date().empty()) {
    start_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_date(),
      GetArena());
  }
  low_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_low_date().empty()) {
    low_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_low_date(),
      GetArena());
  }
  high_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_high_date().empty()) {
    high_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_high_date(),
      GetArena());
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:pb.Segment)
}

void Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  low_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(high_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:pb.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  low_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Segment::ArenaDtor(void* object) {
  Segment* _this = reinterpret_cast< Segment* >(object);
  (void)_this;
}
void Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  low_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  high_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(high_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Segment.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Segment.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string start_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_start_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Segment.start_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gentle_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          gentle_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string low_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_low_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Segment.low_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double high = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string high_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_high_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.Segment.high_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Segment.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Segment.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // double direction = 3;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_direction(), target);
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Segment.start_date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_start_date(), target);
  }

  // double gentle_range = 5;
  if (!(this->gentle_range() <= 0 && this->gentle_range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_gentle_range(), target);
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_low(), target);
  }

  // string low_date = 7;
  if (this->low_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_low_date().data(), static_cast<int>(this->_internal_low_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Segment.low_date");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_low_date(), target);
  }

  // double high = 8;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_high(), target);
  }

  // string high_date = 9;
  if (this->high_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_high_date().data(), static_cast<int>(this->_internal_high_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.Segment.high_date");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_high_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string start_date = 4;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string low_date = 7;
  if (this->low_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_low_date());
  }

  // string high_date = 9;
  if (this->high_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_high_date());
  }

  // double direction = 3;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 8;
  }

  // double gentle_range = 5;
  if (!(this->gentle_range() <= 0 && this->gentle_range() >= 0)) {
    total_size += 1 + 8;
  }

  // double low = 6;
  if (!(this->low() <= 0 && this->low() >= 0)) {
    total_size += 1 + 8;
  }

  // double high = 8;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.start_date().size() > 0) {
    _internal_set_start_date(from._internal_start_date());
  }
  if (from.low_date().size() > 0) {
    _internal_set_low_date(from._internal_low_date());
  }
  if (from.high_date().size() > 0) {
    _internal_set_high_date(from._internal_high_date());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (!(from.gentle_range() <= 0 && from.gentle_range() >= 0)) {
    _internal_set_gentle_range(from._internal_gentle_range());
  }
  if (!(from.low() <= 0 && from.low() >= 0)) {
    _internal_set_low(from._internal_low());
  }
  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
}

void Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  low_date_.Swap(&other->low_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  high_date_.Swap(&other->high_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment, high_)
      + sizeof(Segment::high_)
      - PROTOBUF_FIELD_OFFSET(Segment, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DailyMinute::InitAsDefaultInstance() {
}
class DailyMinute::_Internal {
 public:
};

DailyMinute::DailyMinute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  minute_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.DailyMinute)
}
DailyMinute::DailyMinute(const DailyMinute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      minute_list_(from.minute_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.DailyMinute)
}

void DailyMinute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DailyMinute_pb_2fprophet_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DailyMinute::~DailyMinute() {
  // @@protoc_insertion_point(destructor:pb.DailyMinute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DailyMinute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DailyMinute::ArenaDtor(void* object) {
  DailyMinute* _this = reinterpret_cast< DailyMinute* >(object);
  (void)_this;
}
void DailyMinute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DailyMinute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DailyMinute& DailyMinute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DailyMinute_pb_2fprophet_2eproto.base);
  return *internal_default_instance();
}


void DailyMinute::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DailyMinute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minute_list_.Clear();
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DailyMinute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DailyMinute.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.DailyMinute.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.KChart minute_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minute_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DailyMinute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DailyMinute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DailyMinute.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.DailyMinute.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // repeated .pb.KChart minute_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_minute_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_minute_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DailyMinute)
  return target;
}

size_t DailyMinute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DailyMinute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.KChart minute_list = 3;
  total_size += 1UL * this->_internal_minute_list_size();
  for (const auto& msg : this->minute_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DailyMinute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DailyMinute)
  GOOGLE_DCHECK_NE(&from, this);
  const DailyMinute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DailyMinute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DailyMinute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DailyMinute)
    MergeFrom(*source);
  }
}

void DailyMinute::MergeFrom(const DailyMinute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DailyMinute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minute_list_.MergeFrom(from.minute_list_);
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void DailyMinute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DailyMinute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyMinute::CopyFrom(const DailyMinute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DailyMinute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyMinute::IsInitialized() const {
  return true;
}

void DailyMinute::InternalSwap(DailyMinute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  minute_list_.InternalSwap(&other->minute_list_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DailyMinute::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::StockDateInterval* Arena::CreateMaybeMessage< ::pb::StockDateInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::StockDateInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::IndicatorSet* Arena::CreateMaybeMessage< ::pb::IndicatorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::IndicatorSet >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::FetchIndicatorResponse* Arena::CreateMaybeMessage< ::pb::FetchIndicatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::FetchIndicatorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::LiveSet* Arena::CreateMaybeMessage< ::pb::LiveSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::LiveSet >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::KChart* Arena::CreateMaybeMessage< ::pb::KChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::KChart >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MA* Arena::CreateMaybeMessage< ::pb::MA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::MA >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TrueRange* Arena::CreateMaybeMessage< ::pb::TrueRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TrueRange >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Segment* Arena::CreateMaybeMessage< ::pb::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DailyMinute* Arena::CreateMaybeMessage< ::pb::DailyMinute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::DailyMinute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
