// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/trade.proto
#ifndef GRPC_pb_2ftrade_2eproto__INCLUDED
#define GRPC_pb_2ftrade_2eproto__INCLUDED

#include "pb/trade.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Trader final {
 public:
  static constexpr char const* service_full_name() {
    return "Trader";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::ThsStockOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>> AsyncSubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>>(AsyncSubmitThsStockOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>> PrepareAsyncSubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>>(PrepareAsyncSubmitThsStockOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::OrderStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>> AsyncQueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>>(AsyncQueryOrderStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>> PrepareAsyncQueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>>(PrepareAsyncQueryOrderStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::BaseResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>> AsyncCancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::PositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>> AsyncQueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>>(AsyncQueryPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>> PrepareAsyncQueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>>(PrepareAsyncQueryPositionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>* AsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ThsStockOrderResponse>* PrepareAsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>* AsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OrderStatus>* PrepareAsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>* AsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PositionResponse>* PrepareAsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::ThsStockOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>> AsyncSubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>>(AsyncSubmitThsStockOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>> PrepareAsyncSubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>>(PrepareAsyncSubmitThsStockOrderRaw(context, request, cq));
    }
    ::grpc::Status QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::OrderStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderStatus>> AsyncQueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderStatus>>(AsyncQueryOrderStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderStatus>> PrepareAsyncQueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OrderStatus>>(PrepareAsyncQueryOrderStatusRaw(context, request, cq));
    }
    ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::BaseResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>> AsyncCancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    ::grpc::Status QueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::PositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PositionResponse>> AsyncQueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PositionResponse>>(AsyncQueryPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PositionResponse>> PrepareAsyncQueryPosition(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PositionResponse>>(PrepareAsyncQueryPositionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitThsStockOrder(::grpc::ClientContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryOrderStatus(::grpc::ClientContext* context, const ::OrderInfo* request, ::OrderStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelOrder(::grpc::ClientContext* context, const ::OrderInfo* request, ::BaseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryPosition(::grpc::ClientContext* context, const ::PositionRequest* request, ::PositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>* AsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ThsStockOrderResponse>* PrepareAsyncSubmitThsStockOrderRaw(::grpc::ClientContext* context, const ::ThsStockOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OrderStatus>* AsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OrderStatus>* PrepareAsyncQueryOrderStatusRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseResp>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseResp>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::OrderInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PositionResponse>* AsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PositionResponse>* PrepareAsyncQueryPositionRaw(::grpc::ClientContext* context, const ::PositionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitThsStockOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryOrderStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryPosition_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response);
    virtual ::grpc::Status QueryOrderStatus(::grpc::ServerContext* context, const ::OrderInfo* request, ::OrderStatus* response);
    virtual ::grpc::Status CancelOrder(::grpc::ServerContext* context, const ::OrderInfo* request, ::BaseResp* response);
    virtual ::grpc::Status QueryPosition(::grpc::ServerContext* context, const ::PositionRequest* request, ::PositionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitThsStockOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitThsStockOrder(::grpc::ServerContext* context, ::ThsStockOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::ThsStockOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryOrderStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderStatus(::grpc::ServerContext* context, ::OrderInfo* request, ::grpc::ServerAsyncResponseWriter< ::OrderStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelOrder() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::OrderInfo* request, ::grpc::ServerAsyncResponseWriter< ::BaseResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryPosition() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryPosition(::grpc::ServerContext* context, ::PositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::PositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitThsStockOrder<WithAsyncMethod_QueryOrderStatus<WithAsyncMethod_CancelOrder<WithAsyncMethod_QueryPosition<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitThsStockOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ThsStockOrderRequest, ::ThsStockOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ThsStockOrderRequest* request, ::ThsStockOrderResponse* response) { return this->SubmitThsStockOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitThsStockOrder(
        ::grpc::experimental::MessageAllocator< ::ThsStockOrderRequest, ::ThsStockOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ThsStockOrderRequest, ::ThsStockOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitThsStockOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitThsStockOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryOrderStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::OrderInfo, ::OrderStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::OrderInfo* request, ::OrderStatus* response) { return this->QueryOrderStatus(context, request, response); }));}
    void SetMessageAllocatorFor_QueryOrderStatus(
        ::grpc::experimental::MessageAllocator< ::OrderInfo, ::OrderStatus>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OrderInfo, ::OrderStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryOrderStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryOrderStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CancelOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::OrderInfo, ::BaseResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::OrderInfo* request, ::BaseResp* response) { return this->CancelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CancelOrder(
        ::grpc::experimental::MessageAllocator< ::OrderInfo, ::BaseResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OrderInfo, ::BaseResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryPosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::PositionRequest, ::PositionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::PositionRequest* request, ::PositionResponse* response) { return this->QueryPosition(context, request, response); }));}
    void SetMessageAllocatorFor_QueryPosition(
        ::grpc::experimental::MessageAllocator< ::PositionRequest, ::PositionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::PositionRequest, ::PositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryPosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubmitThsStockOrder<ExperimentalWithCallbackMethod_QueryOrderStatus<ExperimentalWithCallbackMethod_CancelOrder<ExperimentalWithCallbackMethod_QueryPosition<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubmitThsStockOrder<ExperimentalWithCallbackMethod_QueryOrderStatus<ExperimentalWithCallbackMethod_CancelOrder<ExperimentalWithCallbackMethod_QueryPosition<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitThsStockOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryOrderStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelOrder() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryPosition() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitThsStockOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitThsStockOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryOrderStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryOrderStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryPosition() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitThsStockOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitThsStockOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitThsStockOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitThsStockOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryOrderStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryOrderStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryOrderStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryOrderStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryPosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryPosition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryPosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitThsStockOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitThsStockOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ThsStockOrderRequest, ::ThsStockOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ThsStockOrderRequest, ::ThsStockOrderResponse>* streamer) {
                       return this->StreamedSubmitThsStockOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitThsStockOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitThsStockOrder(::grpc::ServerContext* /*context*/, const ::ThsStockOrderRequest* /*request*/, ::ThsStockOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitThsStockOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ThsStockOrderRequest,::ThsStockOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryOrderStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OrderInfo, ::OrderStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OrderInfo, ::OrderStatus>* streamer) {
                       return this->StreamedQueryOrderStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryOrderStatus(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::OrderStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryOrderStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OrderInfo,::OrderStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelOrder() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OrderInfo, ::BaseResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OrderInfo, ::BaseResp>* streamer) {
                       return this->StreamedCancelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::OrderInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OrderInfo,::BaseResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryPosition() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PositionRequest, ::PositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::PositionRequest, ::PositionResponse>* streamer) {
                       return this->StreamedQueryPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryPosition(::grpc::ServerContext* /*context*/, const ::PositionRequest* /*request*/, ::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PositionRequest,::PositionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitThsStockOrder<WithStreamedUnaryMethod_QueryOrderStatus<WithStreamedUnaryMethod_CancelOrder<WithStreamedUnaryMethod_QueryPosition<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitThsStockOrder<WithStreamedUnaryMethod_QueryOrderStatus<WithStreamedUnaryMethod_CancelOrder<WithStreamedUnaryMethod_QueryPosition<Service > > > > StreamedService;
};


#endif  // GRPC_pb_2ftrade_2eproto__INCLUDED
