// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fcommon_2eproto;
namespace pb {
class BaseResp;
class BaseRespDefaultTypeInternal;
extern BaseRespDefaultTypeInternal _BaseResp_default_instance_;
class ResultInfo;
class ResultInfoDefaultTypeInternal;
extern ResultInfoDefaultTypeInternal _ResultInfo_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BaseResp* Arena::CreateMaybeMessage<::pb::BaseResp>(Arena*);
template<> ::pb::ResultInfo* Arena::CreateMaybeMessage<::pb::ResultInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum ERROR_CODE : int {
  ERROR_CODE_SUCCESS = 0,
  ERROR_CODE_PARAMETER_INVALID = 1,
  ERROR_CODE_AUTHORIZATION_FAILED = 2,
  ERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERROR_CODE_IsValid(int value);
constexpr ERROR_CODE ERROR_CODE_MIN = ERROR_CODE_SUCCESS;
constexpr ERROR_CODE ERROR_CODE_MAX = ERROR_CODE_AUTHORIZATION_FAILED;
constexpr int ERROR_CODE_ARRAYSIZE = ERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERROR_CODE_descriptor();
template<typename T>
inline const std::string& ERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERROR_CODE_descriptor(), enum_t_value);
}
inline bool ERROR_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERROR_CODE>(
    ERROR_CODE_descriptor(), name, value);
}
enum ErrorCode : int {
  ErrorCode_Unknown = 0,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = ErrorCode_Unknown;
constexpr ErrorCode ErrorCode_MAX = ErrorCode_Unknown;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum PORT_DEFINE : int {
  PORT_DEFINE_NIL = 0,
  PORT_DEFINE_TRADER = 33001,
  PORT_DEFINE_WX_PUSH = 33002,
  PORT_DEFINE_GUARD = 33003,
  PORT_DEFINE_MARKET_CH_POLICY = 33004,
  PORT_DEFINE_PROPHET = 33005,
  PORT_DEFINE_MARKET_CH_TAG = 33006,
  PORT_DEFINE_PORTFOLIO_STATS = 33007,
  PORT_DEFINE_XUEQIU = 33008,
  PORT_DEFINE_TEMPORARY_1 = 33101,
  PORT_DEFINE_TEMPORARY_2 = 33102,
  PORT_DEFINE_TEMPORARY_3 = 33103,
  PORT_DEFINE_TEMPORARY_4 = 33104,
  PORT_DEFINE_TEMPORARY_5 = 33105,
  PORT_DEFINE_TEMPORARY_6 = 33106,
  PORT_DEFINE_TEMPORARY_7 = 33107,
  PORT_DEFINE_TEMPORARY_8 = 33108,
  PORT_DEFINE_TEMPORARY_9 = 33109,
  PORT_DEFINE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PORT_DEFINE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PORT_DEFINE_IsValid(int value);
constexpr PORT_DEFINE PORT_DEFINE_MIN = PORT_DEFINE_NIL;
constexpr PORT_DEFINE PORT_DEFINE_MAX = PORT_DEFINE_TEMPORARY_9;
constexpr int PORT_DEFINE_ARRAYSIZE = PORT_DEFINE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PORT_DEFINE_descriptor();
template<typename T>
inline const std::string& PORT_DEFINE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PORT_DEFINE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PORT_DEFINE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PORT_DEFINE_descriptor(), enum_t_value);
}
inline bool PORT_DEFINE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PORT_DEFINE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PORT_DEFINE>(
    PORT_DEFINE_descriptor(), name, value);
}
enum MARKET_TYPE : int {
  MARKET_TYPE_NONE = 0,
  MARKET_TYPE_CH = 1,
  MARKET_TYPE_HK = 2,
  MARKET_TYPE_US = 3,
  MARKET_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MARKET_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MARKET_TYPE_IsValid(int value);
constexpr MARKET_TYPE MARKET_TYPE_MIN = MARKET_TYPE_NONE;
constexpr MARKET_TYPE MARKET_TYPE_MAX = MARKET_TYPE_US;
constexpr int MARKET_TYPE_ARRAYSIZE = MARKET_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MARKET_TYPE_descriptor();
template<typename T>
inline const std::string& MARKET_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MARKET_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MARKET_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MARKET_TYPE_descriptor(), enum_t_value);
}
inline bool MARKET_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MARKET_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MARKET_TYPE>(
    MARKET_TYPE_descriptor(), name, value);
}
// ===================================================================

class BaseResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BaseResp) */ {
 public:
  inline BaseResp() : BaseResp(nullptr) {}
  virtual ~BaseResp();

  BaseResp(const BaseResp& from);
  BaseResp(BaseResp&& from) noexcept
    : BaseResp() {
    *this = ::std::move(from);
  }

  inline BaseResp& operator=(const BaseResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseResp& operator=(BaseResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseResp* internal_default_instance() {
    return reinterpret_cast<const BaseResp*>(
               &_BaseResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseResp& a, BaseResp& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseResp* New() const final {
    return CreateMaybeMessage<BaseResp>(nullptr);
  }

  BaseResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseResp& from);
  void MergeFrom(const BaseResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BaseResp";
  }
  protected:
  explicit BaseResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fcommon_2eproto);
    return ::descriptor_table_pb_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 3,
    kErrorCodeFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string errorMsg = 3;
  void clear_errormsg();
  const std::string& errormsg() const;
  void set_errormsg(const std::string& value);
  void set_errormsg(std::string&& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  std::string* mutable_errormsg();
  std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // int64 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int64 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.BaseResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::PROTOBUF_NAMESPACE_ID::int64 errorcode_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ResultInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ResultInfo) */ {
 public:
  inline ResultInfo() : ResultInfo(nullptr) {}
  virtual ~ResultInfo();

  ResultInfo(const ResultInfo& from);
  ResultInfo(ResultInfo&& from) noexcept
    : ResultInfo() {
    *this = ::std::move(from);
  }

  inline ResultInfo& operator=(const ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultInfo& operator=(ResultInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultInfo* internal_default_instance() {
    return reinterpret_cast<const ResultInfo*>(
               &_ResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultInfo& a, ResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultInfo* New() const final {
    return CreateMaybeMessage<ResultInfo>(nullptr);
  }

  ResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultInfo& from);
  void MergeFrom(const ResultInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ResultInfo";
  }
  protected:
  explicit ResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fcommon_2eproto);
    return ::descriptor_table_pb_2fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int64 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int64 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseResp

// bool success = 1;
inline void BaseResp::clear_success() {
  success_ = false;
}
inline bool BaseResp::_internal_success() const {
  return success_;
}
inline bool BaseResp::success() const {
  // @@protoc_insertion_point(field_get:pb.BaseResp.success)
  return _internal_success();
}
inline void BaseResp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void BaseResp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:pb.BaseResp.success)
}

// int64 errorCode = 2;
inline void BaseResp::clear_errorcode() {
  errorcode_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseResp::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseResp::errorcode() const {
  // @@protoc_insertion_point(field_get:pb.BaseResp.errorCode)
  return _internal_errorcode();
}
inline void BaseResp::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  errorcode_ = value;
}
inline void BaseResp::set_errorcode(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:pb.BaseResp.errorCode)
}

// string errorMsg = 3;
inline void BaseResp::clear_errormsg() {
  errormsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseResp::errormsg() const {
  // @@protoc_insertion_point(field_get:pb.BaseResp.errorMsg)
  return _internal_errormsg();
}
inline void BaseResp::set_errormsg(const std::string& value) {
  _internal_set_errormsg(value);
  // @@protoc_insertion_point(field_set:pb.BaseResp.errorMsg)
}
inline std::string* BaseResp::mutable_errormsg() {
  // @@protoc_insertion_point(field_mutable:pb.BaseResp.errorMsg)
  return _internal_mutable_errormsg();
}
inline const std::string& BaseResp::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void BaseResp::_internal_set_errormsg(const std::string& value) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseResp::set_errormsg(std::string&& value) {
  
  errormsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.BaseResp.errorMsg)
}
inline void BaseResp::set_errormsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.BaseResp.errorMsg)
}
inline void BaseResp::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.BaseResp.errorMsg)
}
inline std::string* BaseResp::_internal_mutable_errormsg() {
  
  return errormsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseResp::release_errormsg() {
  // @@protoc_insertion_point(field_release:pb.BaseResp.errorMsg)
  return errormsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseResp::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.BaseResp.errorMsg)
}

// -------------------------------------------------------------------

// ResultInfo

// int64 error_code = 1;
inline void ResultInfo::clear_error_code() {
  error_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResultInfo::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResultInfo::error_code() const {
  // @@protoc_insertion_point(field_get:pb.ResultInfo.error_code)
  return _internal_error_code();
}
inline void ResultInfo::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  error_code_ = value;
}
inline void ResultInfo::set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.ResultInfo.error_code)
}

// string error_message = 2;
inline void ResultInfo::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultInfo::error_message() const {
  // @@protoc_insertion_point(field_get:pb.ResultInfo.error_message)
  return _internal_error_message();
}
inline void ResultInfo::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:pb.ResultInfo.error_message)
}
inline std::string* ResultInfo::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:pb.ResultInfo.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& ResultInfo::_internal_error_message() const {
  return error_message_.Get();
}
inline void ResultInfo::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultInfo::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.ResultInfo.error_message)
}
inline void ResultInfo::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.ResultInfo.error_message)
}
inline void ResultInfo::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.ResultInfo.error_message)
}
inline std::string* ResultInfo::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultInfo::release_error_message() {
  // @@protoc_insertion_point(field_release:pb.ResultInfo.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultInfo::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.ResultInfo.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::ERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERROR_CODE>() {
  return ::pb::ERROR_CODE_descriptor();
}
template <> struct is_proto_enum< ::pb::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ErrorCode>() {
  return ::pb::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::pb::PORT_DEFINE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PORT_DEFINE>() {
  return ::pb::PORT_DEFINE_descriptor();
}
template <> struct is_proto_enum< ::pb::MARKET_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::MARKET_TYPE>() {
  return ::pb::MARKET_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fcommon_2eproto
