// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/monitor.proto
#ifndef GRPC_pb_2fmonitor_2eproto__INCLUDED
#define GRPC_pb_2fmonitor_2eproto__INCLUDED

#include "pb/monitor.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Guard final {
 public:
  static constexpr char const* service_full_name() {
    return "Guard";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::BaseResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>> AsyncRegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::TradeDayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>> AsyncJudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>>(AsyncJudgeTradeDayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>> PrepareAsyncJudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>>(PrepareAsyncJudgeTradeDayRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::CreditStockList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>> AsyncFetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>>(AsyncFetchCreditStockListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>> PrepareAsyncFetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>>(PrepareAsyncFetchCreditStockListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BaseResp>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>* AsyncJudgeTradeDayRaw(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TradeDayResponse>* PrepareAsyncJudgeTradeDayRaw(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>* AsyncFetchCreditStockListRaw(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreditStockList>* PrepareAsyncFetchCreditStockListRaw(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::BaseResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>> AsyncRegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BaseResp>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::TradeDayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>> AsyncJudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>>(AsyncJudgeTradeDayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>> PrepareAsyncJudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>>(PrepareAsyncJudgeTradeDayRaw(context, request, cq));
    }
    ::grpc::Status FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::CreditStockList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreditStockList>> AsyncFetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreditStockList>>(AsyncFetchCreditStockListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreditStockList>> PrepareAsyncFetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreditStockList>>(PrepareAsyncFetchCreditStockListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterService(::grpc::ClientContext* context, const ::ServiceInfo* request, ::BaseResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void JudgeTradeDay(::grpc::ClientContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FetchCreditStockList(::grpc::ClientContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::BaseResp>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BaseResp>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::ServiceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>* AsyncJudgeTradeDayRaw(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TradeDayResponse>* PrepareAsyncJudgeTradeDayRaw(::grpc::ClientContext* context, const ::TradeDayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreditStockList>* AsyncFetchCreditStockListRaw(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreditStockList>* PrepareAsyncFetchCreditStockListRaw(::grpc::ClientContext* context, const ::CreditStockListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_JudgeTradeDay_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchCreditStockList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::ServiceInfo* request, ::BaseResp* response);
    virtual ::grpc::Status JudgeTradeDay(::grpc::ServerContext* context, const ::TradeDayRequest* request, ::TradeDayResponse* response);
    virtual ::grpc::Status FetchCreditStockList(::grpc::ServerContext* context, const ::CreditStockListRequest* request, ::CreditStockList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::ServiceInfo* request, ::grpc::ServerAsyncResponseWriter< ::BaseResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JudgeTradeDay() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJudgeTradeDay(::grpc::ServerContext* context, ::TradeDayRequest* request, ::grpc::ServerAsyncResponseWriter< ::TradeDayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchCreditStockList() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchCreditStockList(::grpc::ServerContext* context, ::CreditStockListRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreditStockList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterService<WithAsyncMethod_JudgeTradeDay<WithAsyncMethod_FetchCreditStockList<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ServiceInfo, ::BaseResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ServiceInfo* request, ::BaseResp* response) { return this->RegisterService(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterService(
        ::grpc::experimental::MessageAllocator< ::ServiceInfo, ::BaseResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServiceInfo, ::BaseResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_JudgeTradeDay() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::TradeDayRequest, ::TradeDayResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::TradeDayRequest* request, ::TradeDayResponse* response) { return this->JudgeTradeDay(context, request, response); }));}
    void SetMessageAllocatorFor_JudgeTradeDay(
        ::grpc::experimental::MessageAllocator< ::TradeDayRequest, ::TradeDayResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TradeDayRequest, ::TradeDayResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* JudgeTradeDay(
      ::grpc::CallbackServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* JudgeTradeDay(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchCreditStockList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CreditStockListRequest, ::CreditStockList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CreditStockListRequest* request, ::CreditStockList* response) { return this->FetchCreditStockList(context, request, response); }));}
    void SetMessageAllocatorFor_FetchCreditStockList(
        ::grpc::experimental::MessageAllocator< ::CreditStockListRequest, ::CreditStockList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreditStockListRequest, ::CreditStockList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FetchCreditStockList(
      ::grpc::CallbackServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FetchCreditStockList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_JudgeTradeDay<ExperimentalWithCallbackMethod_FetchCreditStockList<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_JudgeTradeDay<ExperimentalWithCallbackMethod_FetchCreditStockList<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JudgeTradeDay() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchCreditStockList() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JudgeTradeDay() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJudgeTradeDay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchCreditStockList() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchCreditStockList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_JudgeTradeDay() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JudgeTradeDay(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* JudgeTradeDay(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* JudgeTradeDay(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchCreditStockList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchCreditStockList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FetchCreditStockList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FetchCreditStockList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServiceInfo, ::BaseResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServiceInfo, ::BaseResp>* streamer) {
                       return this->StreamedRegisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::ServiceInfo* /*request*/, ::BaseResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServiceInfo,::BaseResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JudgeTradeDay : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JudgeTradeDay() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TradeDayRequest, ::TradeDayResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TradeDayRequest, ::TradeDayResponse>* streamer) {
                       return this->StreamedJudgeTradeDay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JudgeTradeDay() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JudgeTradeDay(::grpc::ServerContext* /*context*/, const ::TradeDayRequest* /*request*/, ::TradeDayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJudgeTradeDay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TradeDayRequest,::TradeDayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchCreditStockList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchCreditStockList() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreditStockListRequest, ::CreditStockList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreditStockListRequest, ::CreditStockList>* streamer) {
                       return this->StreamedFetchCreditStockList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchCreditStockList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchCreditStockList(::grpc::ServerContext* /*context*/, const ::CreditStockListRequest* /*request*/, ::CreditStockList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchCreditStockList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreditStockListRequest,::CreditStockList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_JudgeTradeDay<WithStreamedUnaryMethod_FetchCreditStockList<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_JudgeTradeDay<WithStreamedUnaryMethod_FetchCreditStockList<Service > > > StreamedService;
};

// Guard => Sheep, Guard向Sheep询问是否在线，Sheep来响应。由各个被监控的服务自行实现,
class Sheep final {
 public:
  static constexpr char const* service_full_name() {
    return "Sheep";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::HeardbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HeardbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::HeardbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Heartbeat(::grpc::ClientContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HeardbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::HeardbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::HeardbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::HeardbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Heartbeat<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Heartbeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::HeardbeatRequest, ::HeardbeatResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::HeardbeatRequest* request, ::HeardbeatResponse* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::experimental::MessageAllocator< ::HeardbeatRequest, ::HeardbeatResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::HeardbeatRequest, ::HeardbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Heartbeat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Heartbeat<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Heartbeat<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Heartbeat() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Heartbeat(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::HeardbeatRequest, ::HeardbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::HeardbeatRequest, ::HeardbeatResponse>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::HeardbeatRequest* /*request*/, ::HeardbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HeardbeatRequest,::HeardbeatResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Heartbeat<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Heartbeat<Service > StreamedService;
};


#endif  // GRPC_pb_2fmonitor_2eproto__INCLUDED
