// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pb/prophet.proto

#include "pb/prophet.pb.h"
#include "pb/prophet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Prophet_method_names[] = {
  "/Prophet/FetchStockDateList",
  "/Prophet/FetchIndicator",
};

std::unique_ptr< Prophet::Stub> Prophet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Prophet::Stub> stub(new Prophet::Stub(channel));
  return stub;
}

Prophet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FetchStockDateList_(Prophet_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchIndicator_(Prophet_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Prophet::Stub::FetchStockDateList(::grpc::ClientContext* context, const ::StockDateInterval& request, ::FetchIndicatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FetchStockDateList_, context, request, response);
}

void Prophet::Stub::experimental_async::FetchStockDateList(::grpc::ClientContext* context, const ::StockDateInterval* request, ::FetchIndicatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FetchStockDateList_, context, request, response, std::move(f));
}

void Prophet::Stub::experimental_async::FetchStockDateList(::grpc::ClientContext* context, const ::StockDateInterval* request, ::FetchIndicatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FetchStockDateList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FetchIndicatorResponse>* Prophet::Stub::PrepareAsyncFetchStockDateListRaw(::grpc::ClientContext* context, const ::StockDateInterval& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FetchIndicatorResponse>::Create(channel_.get(), cq, rpcmethod_FetchStockDateList_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::FetchIndicatorResponse>* Prophet::Stub::AsyncFetchStockDateListRaw(::grpc::ClientContext* context, const ::StockDateInterval& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchStockDateListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Prophet::Stub::FetchIndicator(::grpc::ClientContext* context, const ::IndicatorSet& request, ::FetchIndicatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FetchIndicator_, context, request, response);
}

void Prophet::Stub::experimental_async::FetchIndicator(::grpc::ClientContext* context, const ::IndicatorSet* request, ::FetchIndicatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FetchIndicator_, context, request, response, std::move(f));
}

void Prophet::Stub::experimental_async::FetchIndicator(::grpc::ClientContext* context, const ::IndicatorSet* request, ::FetchIndicatorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FetchIndicator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FetchIndicatorResponse>* Prophet::Stub::PrepareAsyncFetchIndicatorRaw(::grpc::ClientContext* context, const ::IndicatorSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FetchIndicatorResponse>::Create(channel_.get(), cq, rpcmethod_FetchIndicator_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::FetchIndicatorResponse>* Prophet::Stub::AsyncFetchIndicatorRaw(::grpc::ClientContext* context, const ::IndicatorSet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchIndicatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

Prophet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Prophet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Prophet::Service, ::StockDateInterval, ::FetchIndicatorResponse>(
          [](Prophet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StockDateInterval* req,
             ::FetchIndicatorResponse* resp) {
               return service->FetchStockDateList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Prophet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Prophet::Service, ::IndicatorSet, ::FetchIndicatorResponse>(
          [](Prophet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IndicatorSet* req,
             ::FetchIndicatorResponse* resp) {
               return service->FetchIndicator(ctx, req, resp);
             }, this)));
}

Prophet::Service::~Service() {
}

::grpc::Status Prophet::Service::FetchStockDateList(::grpc::ServerContext* context, const ::StockDateInterval* request, ::FetchIndicatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Prophet::Service::FetchIndicator(::grpc::ServerContext* context, const ::IndicatorSet* request, ::FetchIndicatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


