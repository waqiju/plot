// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/monitor.proto

#include "pb/monitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pb_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultInfo_pb_2fcommon_2eproto;
namespace pb {
class ServiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceInfo> _instance;
} _ServiceInfo_default_instance_;
class HeardbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeardbeatRequest> _instance;
} _HeardbeatRequest_default_instance_;
class HeardbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeardbeatResponse> _instance;
} _HeardbeatResponse_default_instance_;
class TradeDayRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeDayRequest> _instance;
} _TradeDayRequest_default_instance_;
class TradeDayResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeDayResponse> _instance;
} _TradeDayResponse_default_instance_;
class CreditStockListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreditStockListRequest> _instance;
} _CreditStockListRequest_default_instance_;
class CreditStockListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreditStockList> _instance;
} _CreditStockList_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_CreditStockList_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CreditStockList_default_instance_;
    new (ptr) ::pb::CreditStockList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CreditStockList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreditStockList_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreditStockList_pb_2fmonitor_2eproto}, {
      &scc_info_ResultInfo_pb_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_CreditStockListRequest_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CreditStockListRequest_default_instance_;
    new (ptr) ::pb::CreditStockListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CreditStockListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreditStockListRequest_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreditStockListRequest_pb_2fmonitor_2eproto}, {}};

static void InitDefaultsscc_info_HeardbeatRequest_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_HeardbeatRequest_default_instance_;
    new (ptr) ::pb::HeardbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::HeardbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeardbeatRequest_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeardbeatRequest_pb_2fmonitor_2eproto}, {}};

static void InitDefaultsscc_info_HeardbeatResponse_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_HeardbeatResponse_default_instance_;
    new (ptr) ::pb::HeardbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::HeardbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeardbeatResponse_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeardbeatResponse_pb_2fmonitor_2eproto}, {}};

static void InitDefaultsscc_info_ServiceInfo_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ServiceInfo_default_instance_;
    new (ptr) ::pb::ServiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ServiceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceInfo_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceInfo_pb_2fmonitor_2eproto}, {}};

static void InitDefaultsscc_info_TradeDayRequest_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradeDayRequest_default_instance_;
    new (ptr) ::pb::TradeDayRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradeDayRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradeDayRequest_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradeDayRequest_pb_2fmonitor_2eproto}, {}};

static void InitDefaultsscc_info_TradeDayResponse_pb_2fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradeDayResponse_default_instance_;
    new (ptr) ::pb::TradeDayResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradeDayResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeDayResponse_pb_2fmonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeDayResponse_pb_2fmonitor_2eproto}, {
      &scc_info_ResultInfo_pb_2fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fmonitor_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pb_2fmonitor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fmonitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2fmonitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ServiceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceInfo, address_),
  PROTOBUF_FIELD_OFFSET(::pb::ServiceInfo, alive_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::HeardbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::HeardbeatRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::HeardbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::HeardbeatResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayRequest, date_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayRequest, market_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayResponse, result_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeDayResponse, is_trade_day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CreditStockListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CreditStockList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CreditStockList, result_),
  PROTOBUF_FIELD_OFFSET(::pb::CreditStockList, date_),
  PROTOBUF_FIELD_OFFSET(::pb::CreditStockList, code_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::ServiceInfo)},
  { 8, -1, sizeof(::pb::HeardbeatRequest)},
  { 14, -1, sizeof(::pb::HeardbeatResponse)},
  { 20, -1, sizeof(::pb::TradeDayRequest)},
  { 27, -1, sizeof(::pb::TradeDayResponse)},
  { 34, -1, sizeof(::pb::CreditStockListRequest)},
  { 39, -1, sizeof(::pb::CreditStockList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ServiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_HeardbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_HeardbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradeDayRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TradeDayResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CreditStockListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CreditStockList_default_instance_),
};

const char descriptor_table_protodef_pb_2fmonitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pb/monitor.proto\022\002pb\032\017pb/common.proto\""
  "b\n\013ServiceInfo\022\036\n\004name\030\001 \001(\0162\020.pb.SERVIC"
  "E_NAME\022\017\n\007address\030\002 \001(\t\022\"\n\nalive_time\030\003 "
  "\001(\0162\016.pb.ALIVE_TIME\"%\n\020HeardbeatRequest\022"
  "\021\n\ttimestamp\030\001 \001(\004\"&\n\021HeardbeatResponse\022"
  "\021\n\ttimestamp\030\001 \001(\004\"E\n\017TradeDayRequest\022\014\n"
  "\004date\030\001 \001(\t\022$\n\013market_type\030\002 \001(\0162\017.pb.MA"
  "RKET_TYPE\"H\n\020TradeDayResponse\022\036\n\006result\030"
  "\001 \001(\0132\016.pb.ResultInfo\022\024\n\014is_trade_day\030\002 "
  "\001(\010\"\030\n\026CreditStockListRequest\"R\n\017CreditS"
  "tockList\022\036\n\006result\030\001 \001(\0132\016.pb.ResultInfo"
  "\022\014\n\004date\030\002 \001(\t\022\021\n\tcode_list\030\003 \003(\t*\364\003\n\014SE"
  "RVICE_NAME\022\025\n\021SERVICE_NAME_NONE\020\000\022\033\n\027SER"
  "VICE_NAME_THS_TRADER\020\001\022\032\n\026SERVICE_NAME_C"
  "H_POLICY\020\002\022\030\n\024SERVICE_NAME_WX_PUSH\020\003\022\030\n\024"
  "SERVICE_NAME_PROPHET\020\004\022\027\n\023SERVICE_NAME_C"
  "H_TAG\020\005\022 \n\034SERVICE_NAME_PORTFOLIO_STATS\020"
  "\007\022\027\n\023SERVICE_NAME_XUEQIU\020\010\022\034\n\030SERVICE_NA"
  "ME_TEMPORARY_1\020e\022\034\n\030SERVICE_NAME_TEMPORA"
  "RY_2\020f\022\034\n\030SERVICE_NAME_TEMPORARY_3\020g\022\034\n\030"
  "SERVICE_NAME_TEMPORARY_4\020h\022\034\n\030SERVICE_NA"
  "ME_TEMPORARY_5\020i\022\034\n\030SERVICE_NAME_TEMPORA"
  "RY_6\020j\022\034\n\030SERVICE_NAME_TEMPORARY_7\020k\022\034\n\030"
  "SERVICE_NAME_TEMPORARY_8\020l\022\034\n\030SERVICE_NA"
  "ME_TEMPORARY_9\020m*v\n\nALIVE_TIME\022\023\n\017ALIVE_"
  "TIME_NONE\020\000\022\025\n\021ALIVE_TIME_ALWAYS\020\001\022\"\n\036AL"
  "IVE_TIME_WHEN_CH_MARKET_OPEN\020\002\022\030\n\024ALIVE_"
  "TIME_TEMPORARY\020\0032\276\001\n\005Guard\0220\n\017RegisterSe"
  "rvice\022\017.pb.ServiceInfo\032\014.pb.BaseResp\022:\n\r"
  "JudgeTradeDay\022\023.pb.TradeDayRequest\032\024.pb."
  "TradeDayResponse\022G\n\024FetchCreditStockList"
  "\022\032.pb.CreditStockListRequest\032\023.pb.Credit"
  "StockList2A\n\005Sheep\0228\n\tHeartbeat\022\024.pb.Hea"
  "rdbeatRequest\032\025.pb.HeardbeatResponseB\032\n\030"
  "com.tigerbrokers.contactb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2fmonitor_2eproto_deps[1] = {
  &::descriptor_table_pb_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pb_2fmonitor_2eproto_sccs[7] = {
  &scc_info_CreditStockList_pb_2fmonitor_2eproto.base,
  &scc_info_CreditStockListRequest_pb_2fmonitor_2eproto.base,
  &scc_info_HeardbeatRequest_pb_2fmonitor_2eproto.base,
  &scc_info_HeardbeatResponse_pb_2fmonitor_2eproto.base,
  &scc_info_ServiceInfo_pb_2fmonitor_2eproto.base,
  &scc_info_TradeDayRequest_pb_2fmonitor_2eproto.base,
  &scc_info_TradeDayResponse_pb_2fmonitor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fmonitor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fmonitor_2eproto = {
  false, false, descriptor_table_protodef_pb_2fmonitor_2eproto, "pb/monitor.proto", 1392,
  &descriptor_table_pb_2fmonitor_2eproto_once, descriptor_table_pb_2fmonitor_2eproto_sccs, descriptor_table_pb_2fmonitor_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_pb_2fmonitor_2eproto::offsets,
  file_level_metadata_pb_2fmonitor_2eproto, 7, file_level_enum_descriptors_pb_2fmonitor_2eproto, file_level_service_descriptors_pb_2fmonitor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pb_2fmonitor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pb_2fmonitor_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVICE_NAME_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fmonitor_2eproto);
  return file_level_enum_descriptors_pb_2fmonitor_2eproto[0];
}
bool SERVICE_NAME_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ALIVE_TIME_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fmonitor_2eproto);
  return file_level_enum_descriptors_pb_2fmonitor_2eproto[1];
}
bool ALIVE_TIME_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServiceInfo::InitAsDefaultInstance() {
}
class ServiceInfo::_Internal {
 public:
};

ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&alive_time_) -
    reinterpret_cast<char*>(&name_)) + sizeof(alive_time_));
  // @@protoc_insertion_point(copy_constructor:pb.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceInfo_pb_2fmonitor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alive_time_) -
      reinterpret_cast<char*>(&name_)) + sizeof(alive_time_));
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:pb.ServiceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceInfo::ArenaDtor(void* object) {
  ServiceInfo* _this = reinterpret_cast< ServiceInfo* >(object);
  (void)_this;
}
void ServiceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceInfo& ServiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceInfo_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alive_time_) -
      reinterpret_cast<char*>(&name_)) + sizeof(alive_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.SERVICE_NAME name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_name(static_cast<::pb::SERVICE_NAME>(val));
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.ServiceInfo.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ALIVE_TIME alive_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alive_time(static_cast<::pb::ALIVE_TIME>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.SERVICE_NAME name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.ServiceInfo.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // .pb.ALIVE_TIME alive_time = 3;
  if (this->alive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alive_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ServiceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .pb.SERVICE_NAME name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name());
  }

  // .pb.ALIVE_TIME alive_time = 3;
  if (this->alive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alive_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ServiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ServiceInfo)
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.alive_time() != 0) {
    _internal_set_alive_time(from._internal_alive_time());
  }
}

void ServiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceInfo, alive_time_)
      + sizeof(ServiceInfo::alive_time_)
      - PROTOBUF_FIELD_OFFSET(ServiceInfo, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeardbeatRequest::InitAsDefaultInstance() {
}
class HeardbeatRequest::_Internal {
 public:
};

HeardbeatRequest::HeardbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.HeardbeatRequest)
}
HeardbeatRequest::HeardbeatRequest(const HeardbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:pb.HeardbeatRequest)
}

void HeardbeatRequest::SharedCtor() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

HeardbeatRequest::~HeardbeatRequest() {
  // @@protoc_insertion_point(destructor:pb.HeardbeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeardbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeardbeatRequest::ArenaDtor(void* object) {
  HeardbeatRequest* _this = reinterpret_cast< HeardbeatRequest* >(object);
  (void)_this;
}
void HeardbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeardbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeardbeatRequest& HeardbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeardbeatRequest_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void HeardbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.HeardbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeardbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeardbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.HeardbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.HeardbeatRequest)
  return target;
}

size_t HeardbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.HeardbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeardbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.HeardbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeardbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeardbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.HeardbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.HeardbeatRequest)
    MergeFrom(*source);
  }
}

void HeardbeatRequest::MergeFrom(const HeardbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.HeardbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void HeardbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.HeardbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeardbeatRequest::CopyFrom(const HeardbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.HeardbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeardbeatRequest::IsInitialized() const {
  return true;
}

void HeardbeatRequest::InternalSwap(HeardbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeardbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeardbeatResponse::InitAsDefaultInstance() {
}
class HeardbeatResponse::_Internal {
 public:
};

HeardbeatResponse::HeardbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.HeardbeatResponse)
}
HeardbeatResponse::HeardbeatResponse(const HeardbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:pb.HeardbeatResponse)
}

void HeardbeatResponse::SharedCtor() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

HeardbeatResponse::~HeardbeatResponse() {
  // @@protoc_insertion_point(destructor:pb.HeardbeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeardbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeardbeatResponse::ArenaDtor(void* object) {
  HeardbeatResponse* _this = reinterpret_cast< HeardbeatResponse* >(object);
  (void)_this;
}
void HeardbeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeardbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeardbeatResponse& HeardbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeardbeatResponse_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void HeardbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.HeardbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeardbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeardbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.HeardbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.HeardbeatResponse)
  return target;
}

size_t HeardbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.HeardbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeardbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.HeardbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeardbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeardbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.HeardbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.HeardbeatResponse)
    MergeFrom(*source);
  }
}

void HeardbeatResponse::MergeFrom(const HeardbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.HeardbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void HeardbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.HeardbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeardbeatResponse::CopyFrom(const HeardbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.HeardbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeardbeatResponse::IsInitialized() const {
  return true;
}

void HeardbeatResponse::InternalSwap(HeardbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeardbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeDayRequest::InitAsDefaultInstance() {
}
class TradeDayRequest::_Internal {
 public:
};

TradeDayRequest::TradeDayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TradeDayRequest)
}
TradeDayRequest::TradeDayRequest(const TradeDayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  market_type_ = from.market_type_;
  // @@protoc_insertion_point(copy_constructor:pb.TradeDayRequest)
}

void TradeDayRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeDayRequest_pb_2fmonitor_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_type_ = 0;
}

TradeDayRequest::~TradeDayRequest() {
  // @@protoc_insertion_point(destructor:pb.TradeDayRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeDayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradeDayRequest::ArenaDtor(void* object) {
  TradeDayRequest* _this = reinterpret_cast< TradeDayRequest* >(object);
  (void)_this;
}
void TradeDayRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeDayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeDayRequest& TradeDayRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeDayRequest_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void TradeDayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradeDayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeDayRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.TradeDayRequest.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.MARKET_TYPE market_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_market_type(static_cast<::pb::MARKET_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeDayRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradeDayRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.TradeDayRequest.date");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date(), target);
  }

  // .pb.MARKET_TYPE market_type = 2;
  if (this->market_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_market_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradeDayRequest)
  return target;
}

size_t TradeDayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradeDayRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 1;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // .pb.MARKET_TYPE market_type = 2;
  if (this->market_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_market_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeDayRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradeDayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeDayRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeDayRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradeDayRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradeDayRequest)
    MergeFrom(*source);
  }
}

void TradeDayRequest::MergeFrom(const TradeDayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradeDayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.market_type() != 0) {
    _internal_set_market_type(from._internal_market_type());
  }
}

void TradeDayRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradeDayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeDayRequest::CopyFrom(const TradeDayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradeDayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDayRequest::IsInitialized() const {
  return true;
}

void TradeDayRequest::InternalSwap(TradeDayRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(market_type_, other->market_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeDayRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradeDayResponse::InitAsDefaultInstance() {
  ::pb::_TradeDayResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::pb::ResultInfo*>(
      ::pb::ResultInfo::internal_default_instance());
}
class TradeDayResponse::_Internal {
 public:
  static const ::pb::ResultInfo& result(const TradeDayResponse* msg);
};

const ::pb::ResultInfo&
TradeDayResponse::_Internal::result(const TradeDayResponse* msg) {
  return *msg->result_;
}
void TradeDayResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
TradeDayResponse::TradeDayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TradeDayResponse)
}
TradeDayResponse::TradeDayResponse(const TradeDayResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::pb::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  is_trade_day_ = from.is_trade_day_;
  // @@protoc_insertion_point(copy_constructor:pb.TradeDayResponse)
}

void TradeDayResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeDayResponse_pb_2fmonitor_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trade_day_) -
      reinterpret_cast<char*>(&result_)) + sizeof(is_trade_day_));
}

TradeDayResponse::~TradeDayResponse() {
  // @@protoc_insertion_point(destructor:pb.TradeDayResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeDayResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void TradeDayResponse::ArenaDtor(void* object) {
  TradeDayResponse* _this = reinterpret_cast< TradeDayResponse* >(object);
  (void)_this;
}
void TradeDayResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeDayResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeDayResponse& TradeDayResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeDayResponse_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void TradeDayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradeDayResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  is_trade_day_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeDayResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_trade_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_trade_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeDayResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradeDayResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool is_trade_day = 2;
  if (this->is_trade_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_trade_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradeDayResponse)
  return target;
}

size_t TradeDayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradeDayResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool is_trade_day = 2;
  if (this->is_trade_day() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeDayResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradeDayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeDayResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeDayResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradeDayResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradeDayResponse)
    MergeFrom(*source);
  }
}

void TradeDayResponse::MergeFrom(const TradeDayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradeDayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::pb::ResultInfo::MergeFrom(from._internal_result());
  }
  if (from.is_trade_day() != 0) {
    _internal_set_is_trade_day(from._internal_is_trade_day());
  }
}

void TradeDayResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradeDayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeDayResponse::CopyFrom(const TradeDayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradeDayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeDayResponse::IsInitialized() const {
  return true;
}

void TradeDayResponse::InternalSwap(TradeDayResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeDayResponse, is_trade_day_)
      + sizeof(TradeDayResponse::is_trade_day_)
      - PROTOBUF_FIELD_OFFSET(TradeDayResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeDayResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreditStockListRequest::InitAsDefaultInstance() {
}
class CreditStockListRequest::_Internal {
 public:
};

CreditStockListRequest::CreditStockListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CreditStockListRequest)
}
CreditStockListRequest::CreditStockListRequest(const CreditStockListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CreditStockListRequest)
}

void CreditStockListRequest::SharedCtor() {
}

CreditStockListRequest::~CreditStockListRequest() {
  // @@protoc_insertion_point(destructor:pb.CreditStockListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreditStockListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreditStockListRequest::ArenaDtor(void* object) {
  CreditStockListRequest* _this = reinterpret_cast< CreditStockListRequest* >(object);
  (void)_this;
}
void CreditStockListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreditStockListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreditStockListRequest& CreditStockListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreditStockListRequest_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void CreditStockListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CreditStockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreditStockListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreditStockListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CreditStockListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CreditStockListRequest)
  return target;
}

size_t CreditStockListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CreditStockListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreditStockListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CreditStockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreditStockListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreditStockListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CreditStockListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CreditStockListRequest)
    MergeFrom(*source);
  }
}

void CreditStockListRequest::MergeFrom(const CreditStockListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CreditStockListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreditStockListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CreditStockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditStockListRequest::CopyFrom(const CreditStockListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CreditStockListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditStockListRequest::IsInitialized() const {
  return true;
}

void CreditStockListRequest::InternalSwap(CreditStockListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreditStockListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreditStockList::InitAsDefaultInstance() {
  ::pb::_CreditStockList_default_instance_._instance.get_mutable()->result_ = const_cast< ::pb::ResultInfo*>(
      ::pb::ResultInfo::internal_default_instance());
}
class CreditStockList::_Internal {
 public:
  static const ::pb::ResultInfo& result(const CreditStockList* msg);
};

const ::pb::ResultInfo&
CreditStockList::_Internal::result(const CreditStockList* msg) {
  return *msg->result_;
}
void CreditStockList::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
CreditStockList::CreditStockList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  code_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CreditStockList)
}
CreditStockList::CreditStockList(const CreditStockList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      code_list_(from.code_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::pb::ResultInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CreditStockList)
}

void CreditStockList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreditStockList_pb_2fmonitor_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

CreditStockList::~CreditStockList() {
  // @@protoc_insertion_point(destructor:pb.CreditStockList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreditStockList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void CreditStockList::ArenaDtor(void* object) {
  CreditStockList* _this = reinterpret_cast< CreditStockList* >(object);
  (void)_this;
}
void CreditStockList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreditStockList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreditStockList& CreditStockList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreditStockList_pb_2fmonitor_2eproto.base);
  return *internal_default_instance();
}


void CreditStockList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CreditStockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_list_.Clear();
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreditStockList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.ResultInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CreditStockList.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string code_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_code_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CreditStockList.code_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreditStockList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CreditStockList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CreditStockList.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  // repeated string code_list = 3;
  for (int i = 0, n = this->_internal_code_list_size(); i < n; i++) {
    const auto& s = this->_internal_code_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CreditStockList.code_list");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CreditStockList)
  return target;
}

size_t CreditStockList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CreditStockList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string code_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(code_list_.size());
  for (int i = 0, n = code_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      code_list_.Get(i));
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // .pb.ResultInfo result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreditStockList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CreditStockList)
  GOOGLE_DCHECK_NE(&from, this);
  const CreditStockList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreditStockList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CreditStockList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CreditStockList)
    MergeFrom(*source);
  }
}

void CreditStockList::MergeFrom(const CreditStockList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CreditStockList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  code_list_.MergeFrom(from.code_list_);
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::pb::ResultInfo::MergeFrom(from._internal_result());
  }
}

void CreditStockList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CreditStockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditStockList::CopyFrom(const CreditStockList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CreditStockList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditStockList::IsInitialized() const {
  return true;
}

void CreditStockList::InternalSwap(CreditStockList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_list_.InternalSwap(&other->code_list_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreditStockList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ServiceInfo* Arena::CreateMaybeMessage< ::pb::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::HeardbeatRequest* Arena::CreateMaybeMessage< ::pb::HeardbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::HeardbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::HeardbeatResponse* Arena::CreateMaybeMessage< ::pb::HeardbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::HeardbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradeDayRequest* Arena::CreateMaybeMessage< ::pb::TradeDayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TradeDayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradeDayResponse* Arena::CreateMaybeMessage< ::pb::TradeDayResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TradeDayResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CreditStockListRequest* Arena::CreateMaybeMessage< ::pb::CreditStockListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CreditStockListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CreditStockList* Arena::CreateMaybeMessage< ::pb::CreditStockList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CreditStockList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
