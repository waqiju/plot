// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/monitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fmonitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fmonitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fmonitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fmonitor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fmonitor_2eproto;
class CreditStockList;
class CreditStockListDefaultTypeInternal;
extern CreditStockListDefaultTypeInternal _CreditStockList_default_instance_;
class CreditStockListRequest;
class CreditStockListRequestDefaultTypeInternal;
extern CreditStockListRequestDefaultTypeInternal _CreditStockListRequest_default_instance_;
class HeardbeatRequest;
class HeardbeatRequestDefaultTypeInternal;
extern HeardbeatRequestDefaultTypeInternal _HeardbeatRequest_default_instance_;
class HeardbeatResponse;
class HeardbeatResponseDefaultTypeInternal;
extern HeardbeatResponseDefaultTypeInternal _HeardbeatResponse_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
class TradeDayRequest;
class TradeDayRequestDefaultTypeInternal;
extern TradeDayRequestDefaultTypeInternal _TradeDayRequest_default_instance_;
class TradeDayResponse;
class TradeDayResponseDefaultTypeInternal;
extern TradeDayResponseDefaultTypeInternal _TradeDayResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreditStockList* Arena::CreateMaybeMessage<::CreditStockList>(Arena*);
template<> ::CreditStockListRequest* Arena::CreateMaybeMessage<::CreditStockListRequest>(Arena*);
template<> ::HeardbeatRequest* Arena::CreateMaybeMessage<::HeardbeatRequest>(Arena*);
template<> ::HeardbeatResponse* Arena::CreateMaybeMessage<::HeardbeatResponse>(Arena*);
template<> ::ServiceInfo* Arena::CreateMaybeMessage<::ServiceInfo>(Arena*);
template<> ::TradeDayRequest* Arena::CreateMaybeMessage<::TradeDayRequest>(Arena*);
template<> ::TradeDayResponse* Arena::CreateMaybeMessage<::TradeDayResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SERVICE_NAME : int {
  SERVICE_NAME_NONE = 0,
  SERVICE_NAME_THS_TRADER = 1,
  SERVICE_NAME_CH_POLICY = 2,
  SERVICE_NAME_WX_PUSH = 3,
  SERVICE_NAME_PROPHET = 4,
  SERVICE_NAME_CH_TAG = 5,
  SERVICE_NAME_PORTFOLIO_STATS = 7,
  SERVICE_NAME_XUEQIU = 8,
  SERVICE_NAME_TEMPORARY_1 = 101,
  SERVICE_NAME_TEMPORARY_2 = 102,
  SERVICE_NAME_TEMPORARY_3 = 103,
  SERVICE_NAME_TEMPORARY_4 = 104,
  SERVICE_NAME_TEMPORARY_5 = 105,
  SERVICE_NAME_TEMPORARY_6 = 106,
  SERVICE_NAME_TEMPORARY_7 = 107,
  SERVICE_NAME_TEMPORARY_8 = 108,
  SERVICE_NAME_TEMPORARY_9 = 109,
  SERVICE_NAME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SERVICE_NAME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SERVICE_NAME_IsValid(int value);
constexpr SERVICE_NAME SERVICE_NAME_MIN = SERVICE_NAME_NONE;
constexpr SERVICE_NAME SERVICE_NAME_MAX = SERVICE_NAME_TEMPORARY_9;
constexpr int SERVICE_NAME_ARRAYSIZE = SERVICE_NAME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVICE_NAME_descriptor();
template<typename T>
inline const std::string& SERVICE_NAME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SERVICE_NAME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SERVICE_NAME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SERVICE_NAME_descriptor(), enum_t_value);
}
inline bool SERVICE_NAME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SERVICE_NAME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SERVICE_NAME>(
    SERVICE_NAME_descriptor(), name, value);
}
enum ALIVE_TIME : int {
  ALIVE_TIME_NONE = 0,
  ALIVE_TIME_ALWAYS = 1,
  ALIVE_TIME_WHEN_CH_MARKET_OPEN = 2,
  ALIVE_TIME_TEMPORARY = 3,
  ALIVE_TIME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ALIVE_TIME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ALIVE_TIME_IsValid(int value);
constexpr ALIVE_TIME ALIVE_TIME_MIN = ALIVE_TIME_NONE;
constexpr ALIVE_TIME ALIVE_TIME_MAX = ALIVE_TIME_TEMPORARY;
constexpr int ALIVE_TIME_ARRAYSIZE = ALIVE_TIME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ALIVE_TIME_descriptor();
template<typename T>
inline const std::string& ALIVE_TIME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ALIVE_TIME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ALIVE_TIME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ALIVE_TIME_descriptor(), enum_t_value);
}
inline bool ALIVE_TIME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ALIVE_TIME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ALIVE_TIME>(
    ALIVE_TIME_descriptor(), name, value);
}
// ===================================================================

class ServiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kNameFieldNumber = 1,
    kAliveTimeFieldNumber = 3,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .SERVICE_NAME name = 1;
  void clear_name();
  ::SERVICE_NAME name() const;
  void set_name(::SERVICE_NAME value);
  private:
  ::SERVICE_NAME _internal_name() const;
  void _internal_set_name(::SERVICE_NAME value);
  public:

  // .ALIVE_TIME alive_time = 3;
  void clear_alive_time();
  ::ALIVE_TIME alive_time() const;
  void set_alive_time(::ALIVE_TIME value);
  private:
  ::ALIVE_TIME _internal_alive_time() const;
  void _internal_set_alive_time(::ALIVE_TIME value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  int name_;
  int alive_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class HeardbeatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeardbeatRequest) */ {
 public:
  inline HeardbeatRequest() : HeardbeatRequest(nullptr) {}
  virtual ~HeardbeatRequest();

  HeardbeatRequest(const HeardbeatRequest& from);
  HeardbeatRequest(HeardbeatRequest&& from) noexcept
    : HeardbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeardbeatRequest& operator=(const HeardbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeardbeatRequest& operator=(HeardbeatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeardbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeardbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeardbeatRequest*>(
               &_HeardbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeardbeatRequest& a, HeardbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeardbeatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeardbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeardbeatRequest* New() const final {
    return CreateMaybeMessage<HeardbeatRequest>(nullptr);
  }

  HeardbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeardbeatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeardbeatRequest& from);
  void MergeFrom(const HeardbeatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeardbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeardbeatRequest";
  }
  protected:
  explicit HeardbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:HeardbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class HeardbeatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeardbeatResponse) */ {
 public:
  inline HeardbeatResponse() : HeardbeatResponse(nullptr) {}
  virtual ~HeardbeatResponse();

  HeardbeatResponse(const HeardbeatResponse& from);
  HeardbeatResponse(HeardbeatResponse&& from) noexcept
    : HeardbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeardbeatResponse& operator=(const HeardbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeardbeatResponse& operator=(HeardbeatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeardbeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeardbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeardbeatResponse*>(
               &_HeardbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeardbeatResponse& a, HeardbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeardbeatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeardbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeardbeatResponse* New() const final {
    return CreateMaybeMessage<HeardbeatResponse>(nullptr);
  }

  HeardbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeardbeatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeardbeatResponse& from);
  void MergeFrom(const HeardbeatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeardbeatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeardbeatResponse";
  }
  protected:
  explicit HeardbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:HeardbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class TradeDayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TradeDayRequest) */ {
 public:
  inline TradeDayRequest() : TradeDayRequest(nullptr) {}
  virtual ~TradeDayRequest();

  TradeDayRequest(const TradeDayRequest& from);
  TradeDayRequest(TradeDayRequest&& from) noexcept
    : TradeDayRequest() {
    *this = ::std::move(from);
  }

  inline TradeDayRequest& operator=(const TradeDayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeDayRequest& operator=(TradeDayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeDayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeDayRequest* internal_default_instance() {
    return reinterpret_cast<const TradeDayRequest*>(
               &_TradeDayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TradeDayRequest& a, TradeDayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeDayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeDayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeDayRequest* New() const final {
    return CreateMaybeMessage<TradeDayRequest>(nullptr);
  }

  TradeDayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeDayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeDayRequest& from);
  void MergeFrom(const TradeDayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeDayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TradeDayRequest";
  }
  protected:
  explicit TradeDayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
    kMarketTypeFieldNumber = 2,
  };
  // string date = 1;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // .MARKET_TYPE market_type = 2;
  void clear_market_type();
  ::MARKET_TYPE market_type() const;
  void set_market_type(::MARKET_TYPE value);
  private:
  ::MARKET_TYPE _internal_market_type() const;
  void _internal_set_market_type(::MARKET_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:TradeDayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  int market_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class TradeDayResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TradeDayResponse) */ {
 public:
  inline TradeDayResponse() : TradeDayResponse(nullptr) {}
  virtual ~TradeDayResponse();

  TradeDayResponse(const TradeDayResponse& from);
  TradeDayResponse(TradeDayResponse&& from) noexcept
    : TradeDayResponse() {
    *this = ::std::move(from);
  }

  inline TradeDayResponse& operator=(const TradeDayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeDayResponse& operator=(TradeDayResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeDayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeDayResponse* internal_default_instance() {
    return reinterpret_cast<const TradeDayResponse*>(
               &_TradeDayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TradeDayResponse& a, TradeDayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeDayResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeDayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeDayResponse* New() const final {
    return CreateMaybeMessage<TradeDayResponse>(nullptr);
  }

  TradeDayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeDayResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeDayResponse& from);
  void MergeFrom(const TradeDayResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeDayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TradeDayResponse";
  }
  protected:
  explicit TradeDayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kIsTradeDayFieldNumber = 2,
  };
  // .ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ResultInfo& result() const;
  ::ResultInfo* release_result();
  ::ResultInfo* mutable_result();
  void set_allocated_result(::ResultInfo* result);
  private:
  const ::ResultInfo& _internal_result() const;
  ::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ResultInfo* result);
  ::ResultInfo* unsafe_arena_release_result();

  // bool is_trade_day = 2;
  void clear_is_trade_day();
  bool is_trade_day() const;
  void set_is_trade_day(bool value);
  private:
  bool _internal_is_trade_day() const;
  void _internal_set_is_trade_day(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TradeDayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ResultInfo* result_;
  bool is_trade_day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class CreditStockListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreditStockListRequest) */ {
 public:
  inline CreditStockListRequest() : CreditStockListRequest(nullptr) {}
  virtual ~CreditStockListRequest();

  CreditStockListRequest(const CreditStockListRequest& from);
  CreditStockListRequest(CreditStockListRequest&& from) noexcept
    : CreditStockListRequest() {
    *this = ::std::move(from);
  }

  inline CreditStockListRequest& operator=(const CreditStockListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditStockListRequest& operator=(CreditStockListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditStockListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditStockListRequest* internal_default_instance() {
    return reinterpret_cast<const CreditStockListRequest*>(
               &_CreditStockListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreditStockListRequest& a, CreditStockListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditStockListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditStockListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditStockListRequest* New() const final {
    return CreateMaybeMessage<CreditStockListRequest>(nullptr);
  }

  CreditStockListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditStockListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditStockListRequest& from);
  void MergeFrom(const CreditStockListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditStockListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreditStockListRequest";
  }
  protected:
  explicit CreditStockListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CreditStockListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// -------------------------------------------------------------------

class CreditStockList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreditStockList) */ {
 public:
  inline CreditStockList() : CreditStockList(nullptr) {}
  virtual ~CreditStockList();

  CreditStockList(const CreditStockList& from);
  CreditStockList(CreditStockList&& from) noexcept
    : CreditStockList() {
    *this = ::std::move(from);
  }

  inline CreditStockList& operator=(const CreditStockList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditStockList& operator=(CreditStockList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditStockList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditStockList* internal_default_instance() {
    return reinterpret_cast<const CreditStockList*>(
               &_CreditStockList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreditStockList& a, CreditStockList& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditStockList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditStockList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditStockList* New() const final {
    return CreateMaybeMessage<CreditStockList>(nullptr);
  }

  CreditStockList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditStockList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditStockList& from);
  void MergeFrom(const CreditStockList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditStockList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreditStockList";
  }
  protected:
  explicit CreditStockList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fmonitor_2eproto);
    return ::descriptor_table_pb_2fmonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeListFieldNumber = 3,
    kDateFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated string code_list = 3;
  int code_list_size() const;
  private:
  int _internal_code_list_size() const;
  public:
  void clear_code_list();
  const std::string& code_list(int index) const;
  std::string* mutable_code_list(int index);
  void set_code_list(int index, const std::string& value);
  void set_code_list(int index, std::string&& value);
  void set_code_list(int index, const char* value);
  void set_code_list(int index, const char* value, size_t size);
  std::string* add_code_list();
  void add_code_list(const std::string& value);
  void add_code_list(std::string&& value);
  void add_code_list(const char* value);
  void add_code_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& code_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_code_list();
  private:
  const std::string& _internal_code_list(int index) const;
  std::string* _internal_add_code_list();
  public:

  // string date = 2;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // .ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ResultInfo& result() const;
  ::ResultInfo* release_result();
  ::ResultInfo* mutable_result();
  void set_allocated_result(::ResultInfo* result);
  private:
  const ::ResultInfo& _internal_result() const;
  ::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ResultInfo* result);
  ::ResultInfo* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:CreditStockList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> code_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::ResultInfo* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fmonitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInfo

// .SERVICE_NAME name = 1;
inline void ServiceInfo::clear_name() {
  name_ = 0;
}
inline ::SERVICE_NAME ServiceInfo::_internal_name() const {
  return static_cast< ::SERVICE_NAME >(name_);
}
inline ::SERVICE_NAME ServiceInfo::name() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.name)
  return _internal_name();
}
inline void ServiceInfo::_internal_set_name(::SERVICE_NAME value) {
  
  name_ = value;
}
inline void ServiceInfo::set_name(::SERVICE_NAME value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.name)
}

// string address = 2;
inline void ServiceInfo::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceInfo::address() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.address)
  return _internal_address();
}
inline void ServiceInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.address)
}
inline std::string* ServiceInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:ServiceInfo.address)
  return _internal_mutable_address();
}
inline const std::string& ServiceInfo::_internal_address() const {
  return address_.Get();
}
inline void ServiceInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceInfo::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceInfo.address)
}
inline void ServiceInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceInfo.address)
}
inline void ServiceInfo::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceInfo.address)
}
inline std::string* ServiceInfo::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceInfo::release_address() {
  // @@protoc_insertion_point(field_release:ServiceInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.address)
}

// .ALIVE_TIME alive_time = 3;
inline void ServiceInfo::clear_alive_time() {
  alive_time_ = 0;
}
inline ::ALIVE_TIME ServiceInfo::_internal_alive_time() const {
  return static_cast< ::ALIVE_TIME >(alive_time_);
}
inline ::ALIVE_TIME ServiceInfo::alive_time() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.alive_time)
  return _internal_alive_time();
}
inline void ServiceInfo::_internal_set_alive_time(::ALIVE_TIME value) {
  
  alive_time_ = value;
}
inline void ServiceInfo::set_alive_time(::ALIVE_TIME value) {
  _internal_set_alive_time(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.alive_time)
}

// -------------------------------------------------------------------

// HeardbeatRequest

// uint64 timestamp = 1;
inline void HeardbeatRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeardbeatRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeardbeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:HeardbeatRequest.timestamp)
  return _internal_timestamp();
}
inline void HeardbeatRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void HeardbeatRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:HeardbeatRequest.timestamp)
}

// -------------------------------------------------------------------

// HeardbeatResponse

// uint64 timestamp = 1;
inline void HeardbeatResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeardbeatResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeardbeatResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:HeardbeatResponse.timestamp)
  return _internal_timestamp();
}
inline void HeardbeatResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void HeardbeatResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:HeardbeatResponse.timestamp)
}

// -------------------------------------------------------------------

// TradeDayRequest

// string date = 1;
inline void TradeDayRequest::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TradeDayRequest::date() const {
  // @@protoc_insertion_point(field_get:TradeDayRequest.date)
  return _internal_date();
}
inline void TradeDayRequest::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:TradeDayRequest.date)
}
inline std::string* TradeDayRequest::mutable_date() {
  // @@protoc_insertion_point(field_mutable:TradeDayRequest.date)
  return _internal_mutable_date();
}
inline const std::string& TradeDayRequest::_internal_date() const {
  return date_.Get();
}
inline void TradeDayRequest::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TradeDayRequest::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TradeDayRequest.date)
}
inline void TradeDayRequest::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TradeDayRequest.date)
}
inline void TradeDayRequest::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TradeDayRequest.date)
}
inline std::string* TradeDayRequest::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TradeDayRequest::release_date() {
  // @@protoc_insertion_point(field_release:TradeDayRequest.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradeDayRequest::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TradeDayRequest.date)
}

// .MARKET_TYPE market_type = 2;
inline void TradeDayRequest::clear_market_type() {
  market_type_ = 0;
}
inline ::MARKET_TYPE TradeDayRequest::_internal_market_type() const {
  return static_cast< ::MARKET_TYPE >(market_type_);
}
inline ::MARKET_TYPE TradeDayRequest::market_type() const {
  // @@protoc_insertion_point(field_get:TradeDayRequest.market_type)
  return _internal_market_type();
}
inline void TradeDayRequest::_internal_set_market_type(::MARKET_TYPE value) {
  
  market_type_ = value;
}
inline void TradeDayRequest::set_market_type(::MARKET_TYPE value) {
  _internal_set_market_type(value);
  // @@protoc_insertion_point(field_set:TradeDayRequest.market_type)
}

// -------------------------------------------------------------------

// TradeDayResponse

// .ResultInfo result = 1;
inline bool TradeDayResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool TradeDayResponse::has_result() const {
  return _internal_has_result();
}
inline const ::ResultInfo& TradeDayResponse::_internal_result() const {
  const ::ResultInfo* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResultInfo*>(
      &::_ResultInfo_default_instance_);
}
inline const ::ResultInfo& TradeDayResponse::result() const {
  // @@protoc_insertion_point(field_get:TradeDayResponse.result)
  return _internal_result();
}
inline void TradeDayResponse::unsafe_arena_set_allocated_result(
    ::ResultInfo* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TradeDayResponse.result)
}
inline ::ResultInfo* TradeDayResponse::release_result() {
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResultInfo* TradeDayResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:TradeDayResponse.result)
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ResultInfo* TradeDayResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResultInfo>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::ResultInfo* TradeDayResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:TradeDayResponse.result)
  return _internal_mutable_result();
}
inline void TradeDayResponse::set_allocated_result(::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:TradeDayResponse.result)
}

// bool is_trade_day = 2;
inline void TradeDayResponse::clear_is_trade_day() {
  is_trade_day_ = false;
}
inline bool TradeDayResponse::_internal_is_trade_day() const {
  return is_trade_day_;
}
inline bool TradeDayResponse::is_trade_day() const {
  // @@protoc_insertion_point(field_get:TradeDayResponse.is_trade_day)
  return _internal_is_trade_day();
}
inline void TradeDayResponse::_internal_set_is_trade_day(bool value) {
  
  is_trade_day_ = value;
}
inline void TradeDayResponse::set_is_trade_day(bool value) {
  _internal_set_is_trade_day(value);
  // @@protoc_insertion_point(field_set:TradeDayResponse.is_trade_day)
}

// -------------------------------------------------------------------

// CreditStockListRequest

// -------------------------------------------------------------------

// CreditStockList

// .ResultInfo result = 1;
inline bool CreditStockList::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreditStockList::has_result() const {
  return _internal_has_result();
}
inline const ::ResultInfo& CreditStockList::_internal_result() const {
  const ::ResultInfo* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResultInfo*>(
      &::_ResultInfo_default_instance_);
}
inline const ::ResultInfo& CreditStockList::result() const {
  // @@protoc_insertion_point(field_get:CreditStockList.result)
  return _internal_result();
}
inline void CreditStockList::unsafe_arena_set_allocated_result(
    ::ResultInfo* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreditStockList.result)
}
inline ::ResultInfo* CreditStockList::release_result() {
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResultInfo* CreditStockList::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:CreditStockList.result)
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ResultInfo* CreditStockList::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResultInfo>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::ResultInfo* CreditStockList::mutable_result() {
  // @@protoc_insertion_point(field_mutable:CreditStockList.result)
  return _internal_mutable_result();
}
inline void CreditStockList::set_allocated_result(::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:CreditStockList.result)
}

// string date = 2;
inline void CreditStockList::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditStockList::date() const {
  // @@protoc_insertion_point(field_get:CreditStockList.date)
  return _internal_date();
}
inline void CreditStockList::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:CreditStockList.date)
}
inline std::string* CreditStockList::mutable_date() {
  // @@protoc_insertion_point(field_mutable:CreditStockList.date)
  return _internal_mutable_date();
}
inline const std::string& CreditStockList::_internal_date() const {
  return date_.Get();
}
inline void CreditStockList::_internal_set_date(const std::string& value) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditStockList::set_date(std::string&& value) {
  
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CreditStockList.date)
}
inline void CreditStockList::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CreditStockList.date)
}
inline void CreditStockList::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CreditStockList.date)
}
inline std::string* CreditStockList::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditStockList::release_date() {
  // @@protoc_insertion_point(field_release:CreditStockList.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditStockList::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CreditStockList.date)
}

// repeated string code_list = 3;
inline int CreditStockList::_internal_code_list_size() const {
  return code_list_.size();
}
inline int CreditStockList::code_list_size() const {
  return _internal_code_list_size();
}
inline void CreditStockList::clear_code_list() {
  code_list_.Clear();
}
inline std::string* CreditStockList::add_code_list() {
  // @@protoc_insertion_point(field_add_mutable:CreditStockList.code_list)
  return _internal_add_code_list();
}
inline const std::string& CreditStockList::_internal_code_list(int index) const {
  return code_list_.Get(index);
}
inline const std::string& CreditStockList::code_list(int index) const {
  // @@protoc_insertion_point(field_get:CreditStockList.code_list)
  return _internal_code_list(index);
}
inline std::string* CreditStockList::mutable_code_list(int index) {
  // @@protoc_insertion_point(field_mutable:CreditStockList.code_list)
  return code_list_.Mutable(index);
}
inline void CreditStockList::set_code_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CreditStockList.code_list)
  code_list_.Mutable(index)->assign(value);
}
inline void CreditStockList::set_code_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CreditStockList.code_list)
  code_list_.Mutable(index)->assign(std::move(value));
}
inline void CreditStockList::set_code_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CreditStockList.code_list)
}
inline void CreditStockList::set_code_list(int index, const char* value, size_t size) {
  code_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreditStockList.code_list)
}
inline std::string* CreditStockList::_internal_add_code_list() {
  return code_list_.Add();
}
inline void CreditStockList::add_code_list(const std::string& value) {
  code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CreditStockList.code_list)
}
inline void CreditStockList::add_code_list(std::string&& value) {
  code_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CreditStockList.code_list)
}
inline void CreditStockList::add_code_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CreditStockList.code_list)
}
inline void CreditStockList::add_code_list(const char* value, size_t size) {
  code_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CreditStockList.code_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreditStockList::code_list() const {
  // @@protoc_insertion_point(field_list:CreditStockList.code_list)
  return code_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreditStockList::mutable_code_list() {
  // @@protoc_insertion_point(field_mutable_list:CreditStockList.code_list)
  return &code_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SERVICE_NAME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SERVICE_NAME>() {
  return ::SERVICE_NAME_descriptor();
}
template <> struct is_proto_enum< ::ALIVE_TIME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ALIVE_TIME>() {
  return ::ALIVE_TIME_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fmonitor_2eproto
