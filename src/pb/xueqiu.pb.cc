// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/xueqiu.proto

#include "pb/xueqiu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pb_2fxueqiu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortfolioInfo_pb_2fxueqiu_2eproto;
namespace pb {
class PortfolioInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortfolioInfo> _instance;
} _PortfolioInfo_default_instance_;
class PortfolioInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PortfolioInfoList> _instance;
} _PortfolioInfoList_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_PortfolioInfo_pb_2fxueqiu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PortfolioInfo_default_instance_;
    new (ptr) ::pb::PortfolioInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PortfolioInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PortfolioInfo_pb_2fxueqiu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PortfolioInfo_pb_2fxueqiu_2eproto}, {}};

static void InitDefaultsscc_info_PortfolioInfoList_pb_2fxueqiu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PortfolioInfoList_default_instance_;
    new (ptr) ::pb::PortfolioInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PortfolioInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PortfolioInfoList_pb_2fxueqiu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PortfolioInfoList_pb_2fxueqiu_2eproto}, {
      &scc_info_PortfolioInfo_pb_2fxueqiu_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fxueqiu_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pb_2fxueqiu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fxueqiu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2fxueqiu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, id_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, code_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, last_touch_date_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, tags_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, actived_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, in_blacklist_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, market_kind_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, name_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, author_name_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, last_rebalacing_date_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, times_of_404_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, net_value_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, created_date_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, max_draw_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, follower_count_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, turnover_90_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, turnover_360_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, monthly_gain_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, zipped_zh_html_),
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfo, zipped_nav_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PortfolioInfoList, portfolio_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::PortfolioInfo)},
  { 25, -1, sizeof(::pb::PortfolioInfoList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PortfolioInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PortfolioInfoList_default_instance_),
};

const char descriptor_table_protodef_pb_2fxueqiu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017pb/xueqiu.proto\022\002pb\"\252\003\n\rPortfolioInfo\022"
  "\n\n\002id\030\001 \001(\003\022\014\n\004code\030\002 \001(\t\022\027\n\017last_touch_"
  "date\030\003 \001(\t\022\014\n\004tags\030\004 \001(\t\022\017\n\007actived\030\005 \001("
  "\010\022\024\n\014in_blacklist\030\006 \001(\010\022\023\n\013market_kind\030\007"
  " \001(\t\022\014\n\004name\030\010 \001(\t\022\023\n\013author_name\030\t \001(\t\022"
  "\034\n\024last_rebalacing_date\030\n \001(\t\022\024\n\014times_o"
  "f_404\030\013 \001(\005\022\021\n\tnet_value\030e \001(\002\022\024\n\014create"
  "d_date\030f \001(\t\022\020\n\010max_draw\030g \001(\002\022\026\n\016follow"
  "er_count\030h \001(\005\022\023\n\013turnover_90\030i \001(\002\022\024\n\014t"
  "urnover_360\030j \001(\002\022\024\n\014monthly_gain\030k \001(\002\022"
  "\027\n\016zipped_zh_html\030\351\007 \001(\014\022\030\n\017zipped_nav_j"
  "son\030\352\007 \001(\014\">\n\021PortfolioInfoList\022)\n\016portf"
  "olio_list\030\001 \003(\0132\021.pb.PortfolioInfob\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2fxueqiu_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pb_2fxueqiu_2eproto_sccs[2] = {
  &scc_info_PortfolioInfo_pb_2fxueqiu_2eproto.base,
  &scc_info_PortfolioInfoList_pb_2fxueqiu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fxueqiu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fxueqiu_2eproto = {
  false, false, descriptor_table_protodef_pb_2fxueqiu_2eproto, "pb/xueqiu.proto", 522,
  &descriptor_table_pb_2fxueqiu_2eproto_once, descriptor_table_pb_2fxueqiu_2eproto_sccs, descriptor_table_pb_2fxueqiu_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_pb_2fxueqiu_2eproto::offsets,
  file_level_metadata_pb_2fxueqiu_2eproto, 2, file_level_enum_descriptors_pb_2fxueqiu_2eproto, file_level_service_descriptors_pb_2fxueqiu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pb_2fxueqiu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pb_2fxueqiu_2eproto)), true);
namespace pb {

// ===================================================================

void PortfolioInfo::InitAsDefaultInstance() {
}
class PortfolioInfo::_Internal {
 public:
};

PortfolioInfo::PortfolioInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PortfolioInfo)
}
PortfolioInfo::PortfolioInfo(const PortfolioInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  last_touch_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_touch_date().empty()) {
    last_touch_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_touch_date(),
      GetArena());
  }
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tags().empty()) {
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tags(),
      GetArena());
  }
  market_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market_kind().empty()) {
    market_kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_market_kind(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author_name().empty()) {
    author_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_author_name(),
      GetArena());
  }
  last_rebalacing_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_rebalacing_date().empty()) {
    last_rebalacing_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_rebalacing_date(),
      GetArena());
  }
  created_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_date().empty()) {
    created_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_created_date(),
      GetArena());
  }
  zipped_zh_html_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zipped_zh_html().empty()) {
    zipped_zh_html_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_zipped_zh_html(),
      GetArena());
  }
  zipped_nav_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zipped_nav_json().empty()) {
    zipped_nav_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_zipped_nav_json(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&monthly_gain_) -
    reinterpret_cast<char*>(&id_)) + sizeof(monthly_gain_));
  // @@protoc_insertion_point(copy_constructor:pb.PortfolioInfo)
}

void PortfolioInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortfolioInfo_pb_2fxueqiu_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_touch_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_rebalacing_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zipped_zh_html_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zipped_nav_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monthly_gain_) -
      reinterpret_cast<char*>(&id_)) + sizeof(monthly_gain_));
}

PortfolioInfo::~PortfolioInfo() {
  // @@protoc_insertion_point(destructor:pb.PortfolioInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortfolioInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_touch_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_rebalacing_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zipped_zh_html_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zipped_nav_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortfolioInfo::ArenaDtor(void* object) {
  PortfolioInfo* _this = reinterpret_cast< PortfolioInfo* >(object);
  (void)_this;
}
void PortfolioInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortfolioInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortfolioInfo& PortfolioInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortfolioInfo_pb_2fxueqiu_2eproto.base);
  return *internal_default_instance();
}


void PortfolioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PortfolioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_touch_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_rebalacing_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  created_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zipped_zh_html_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zipped_nav_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monthly_gain_) -
      reinterpret_cast<char*>(&id_)) + sizeof(monthly_gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_touch_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_touch_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.last_touch_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.tags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool actived = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool in_blacklist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          in_blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market_kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_market_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.market_kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string author_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_author_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.author_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_rebalacing_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_last_rebalacing_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.last_rebalacing_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times_of_404 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          times_of_404_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float net_value = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          net_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string created_date = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_created_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PortfolioInfo.created_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_draw = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          max_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 follower_count = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          follower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float turnover_90 = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          turnover_90_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float turnover_360 = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          turnover_360_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float monthly_gain = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          monthly_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes zipped_zh_html = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_zipped_zh_html();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zipped_nav_json = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_zipped_nav_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortfolioInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PortfolioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string last_touch_date = 3;
  if (this->last_touch_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_touch_date().data(), static_cast<int>(this->_internal_last_touch_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.last_touch_date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_touch_date(), target);
  }

  // string tags = 4;
  if (this->tags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tags().data(), static_cast<int>(this->_internal_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.tags");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tags(), target);
  }

  // bool actived = 5;
  if (this->actived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_actived(), target);
  }

  // bool in_blacklist = 6;
  if (this->in_blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_in_blacklist(), target);
  }

  // string market_kind = 7;
  if (this->market_kind().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market_kind().data(), static_cast<int>(this->_internal_market_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.market_kind");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_market_kind(), target);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string author_name = 9;
  if (this->author_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_name().data(), static_cast<int>(this->_internal_author_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.author_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_author_name(), target);
  }

  // string last_rebalacing_date = 10;
  if (this->last_rebalacing_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_rebalacing_date().data(), static_cast<int>(this->_internal_last_rebalacing_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.last_rebalacing_date");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_last_rebalacing_date(), target);
  }

  // int32 times_of_404 = 11;
  if (this->times_of_404() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_times_of_404(), target);
  }

  // float net_value = 101;
  if (!(this->net_value() <= 0 && this->net_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(101, this->_internal_net_value(), target);
  }

  // string created_date = 102;
  if (this->created_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_date().data(), static_cast<int>(this->_internal_created_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PortfolioInfo.created_date");
    target = stream->WriteStringMaybeAliased(
        102, this->_internal_created_date(), target);
  }

  // float max_draw = 103;
  if (!(this->max_draw() <= 0 && this->max_draw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(103, this->_internal_max_draw(), target);
  }

  // int32 follower_count = 104;
  if (this->follower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_follower_count(), target);
  }

  // float turnover_90 = 105;
  if (!(this->turnover_90() <= 0 && this->turnover_90() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(105, this->_internal_turnover_90(), target);
  }

  // float turnover_360 = 106;
  if (!(this->turnover_360() <= 0 && this->turnover_360() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(106, this->_internal_turnover_360(), target);
  }

  // float monthly_gain = 107;
  if (!(this->monthly_gain() <= 0 && this->monthly_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(107, this->_internal_monthly_gain(), target);
  }

  // bytes zipped_zh_html = 1001;
  if (this->zipped_zh_html().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1001, this->_internal_zipped_zh_html(), target);
  }

  // bytes zipped_nav_json = 1002;
  if (this->zipped_nav_json().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1002, this->_internal_zipped_nav_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PortfolioInfo)
  return target;
}

size_t PortfolioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PortfolioInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string last_touch_date = 3;
  if (this->last_touch_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_touch_date());
  }

  // string tags = 4;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tags());
  }

  // string market_kind = 7;
  if (this->market_kind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market_kind());
  }

  // string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string author_name = 9;
  if (this->author_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author_name());
  }

  // string last_rebalacing_date = 10;
  if (this->last_rebalacing_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_rebalacing_date());
  }

  // string created_date = 102;
  if (this->created_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_date());
  }

  // bytes zipped_zh_html = 1001;
  if (this->zipped_zh_html().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zipped_zh_html());
  }

  // bytes zipped_nav_json = 1002;
  if (this->zipped_nav_json().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zipped_nav_json());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool actived = 5;
  if (this->actived() != 0) {
    total_size += 1 + 1;
  }

  // bool in_blacklist = 6;
  if (this->in_blacklist() != 0) {
    total_size += 1 + 1;
  }

  // int32 times_of_404 = 11;
  if (this->times_of_404() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times_of_404());
  }

  // float net_value = 101;
  if (!(this->net_value() <= 0 && this->net_value() >= 0)) {
    total_size += 2 + 4;
  }

  // float max_draw = 103;
  if (!(this->max_draw() <= 0 && this->max_draw() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 follower_count = 104;
  if (this->follower_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_follower_count());
  }

  // float turnover_90 = 105;
  if (!(this->turnover_90() <= 0 && this->turnover_90() >= 0)) {
    total_size += 2 + 4;
  }

  // float turnover_360 = 106;
  if (!(this->turnover_360() <= 0 && this->turnover_360() >= 0)) {
    total_size += 2 + 4;
  }

  // float monthly_gain = 107;
  if (!(this->monthly_gain() <= 0 && this->monthly_gain() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortfolioInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PortfolioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PortfolioInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortfolioInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PortfolioInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PortfolioInfo)
    MergeFrom(*source);
  }
}

void PortfolioInfo::MergeFrom(const PortfolioInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PortfolioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.last_touch_date().size() > 0) {
    _internal_set_last_touch_date(from._internal_last_touch_date());
  }
  if (from.tags().size() > 0) {
    _internal_set_tags(from._internal_tags());
  }
  if (from.market_kind().size() > 0) {
    _internal_set_market_kind(from._internal_market_kind());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.author_name().size() > 0) {
    _internal_set_author_name(from._internal_author_name());
  }
  if (from.last_rebalacing_date().size() > 0) {
    _internal_set_last_rebalacing_date(from._internal_last_rebalacing_date());
  }
  if (from.created_date().size() > 0) {
    _internal_set_created_date(from._internal_created_date());
  }
  if (from.zipped_zh_html().size() > 0) {
    _internal_set_zipped_zh_html(from._internal_zipped_zh_html());
  }
  if (from.zipped_nav_json().size() > 0) {
    _internal_set_zipped_nav_json(from._internal_zipped_nav_json());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.actived() != 0) {
    _internal_set_actived(from._internal_actived());
  }
  if (from.in_blacklist() != 0) {
    _internal_set_in_blacklist(from._internal_in_blacklist());
  }
  if (from.times_of_404() != 0) {
    _internal_set_times_of_404(from._internal_times_of_404());
  }
  if (!(from.net_value() <= 0 && from.net_value() >= 0)) {
    _internal_set_net_value(from._internal_net_value());
  }
  if (!(from.max_draw() <= 0 && from.max_draw() >= 0)) {
    _internal_set_max_draw(from._internal_max_draw());
  }
  if (from.follower_count() != 0) {
    _internal_set_follower_count(from._internal_follower_count());
  }
  if (!(from.turnover_90() <= 0 && from.turnover_90() >= 0)) {
    _internal_set_turnover_90(from._internal_turnover_90());
  }
  if (!(from.turnover_360() <= 0 && from.turnover_360() >= 0)) {
    _internal_set_turnover_360(from._internal_turnover_360());
  }
  if (!(from.monthly_gain() <= 0 && from.monthly_gain() >= 0)) {
    _internal_set_monthly_gain(from._internal_monthly_gain());
  }
}

void PortfolioInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PortfolioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioInfo::CopyFrom(const PortfolioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PortfolioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioInfo::IsInitialized() const {
  return true;
}

void PortfolioInfo::InternalSwap(PortfolioInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_touch_date_.Swap(&other->last_touch_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tags_.Swap(&other->tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  market_kind_.Swap(&other->market_kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_name_.Swap(&other->author_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_rebalacing_date_.Swap(&other->last_rebalacing_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  created_date_.Swap(&other->created_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zipped_zh_html_.Swap(&other->zipped_zh_html_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zipped_nav_json_.Swap(&other->zipped_nav_json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortfolioInfo, monthly_gain_)
      + sizeof(PortfolioInfo::monthly_gain_)
      - PROTOBUF_FIELD_OFFSET(PortfolioInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PortfolioInfoList::InitAsDefaultInstance() {
}
class PortfolioInfoList::_Internal {
 public:
};

PortfolioInfoList::PortfolioInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  portfolio_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PortfolioInfoList)
}
PortfolioInfoList::PortfolioInfoList(const PortfolioInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      portfolio_list_(from.portfolio_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.PortfolioInfoList)
}

void PortfolioInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PortfolioInfoList_pb_2fxueqiu_2eproto.base);
}

PortfolioInfoList::~PortfolioInfoList() {
  // @@protoc_insertion_point(destructor:pb.PortfolioInfoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortfolioInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PortfolioInfoList::ArenaDtor(void* object) {
  PortfolioInfoList* _this = reinterpret_cast< PortfolioInfoList* >(object);
  (void)_this;
}
void PortfolioInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortfolioInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PortfolioInfoList& PortfolioInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PortfolioInfoList_pb_2fxueqiu_2eproto.base);
  return *internal_default_instance();
}


void PortfolioInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PortfolioInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  portfolio_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortfolioInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.PortfolioInfo portfolio_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_portfolio_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortfolioInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PortfolioInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.PortfolioInfo portfolio_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_portfolio_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_portfolio_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PortfolioInfoList)
  return target;
}

size_t PortfolioInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PortfolioInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PortfolioInfo portfolio_list = 1;
  total_size += 1UL * this->_internal_portfolio_list_size();
  for (const auto& msg : this->portfolio_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortfolioInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PortfolioInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const PortfolioInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortfolioInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PortfolioInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PortfolioInfoList)
    MergeFrom(*source);
  }
}

void PortfolioInfoList::MergeFrom(const PortfolioInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PortfolioInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  portfolio_list_.MergeFrom(from.portfolio_list_);
}

void PortfolioInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PortfolioInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortfolioInfoList::CopyFrom(const PortfolioInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PortfolioInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortfolioInfoList::IsInitialized() const {
  return true;
}

void PortfolioInfoList::InternalSwap(PortfolioInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  portfolio_list_.InternalSwap(&other->portfolio_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortfolioInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::PortfolioInfo* Arena::CreateMaybeMessage< ::pb::PortfolioInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PortfolioInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PortfolioInfoList* Arena::CreateMaybeMessage< ::pb::PortfolioInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PortfolioInfoList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
