// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2ftrade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2ftrade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2ftrade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2ftrade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2ftrade_2eproto;
class OrderInfo;
class OrderInfoDefaultTypeInternal;
extern OrderInfoDefaultTypeInternal _OrderInfo_default_instance_;
class OrderStatus;
class OrderStatusDefaultTypeInternal;
extern OrderStatusDefaultTypeInternal _OrderStatus_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class PositionRequest;
class PositionRequestDefaultTypeInternal;
extern PositionRequestDefaultTypeInternal _PositionRequest_default_instance_;
class PositionResponse;
class PositionResponseDefaultTypeInternal;
extern PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;
class ThsStockOrderRequest;
class ThsStockOrderRequestDefaultTypeInternal;
extern ThsStockOrderRequestDefaultTypeInternal _ThsStockOrderRequest_default_instance_;
class ThsStockOrderResponse;
class ThsStockOrderResponseDefaultTypeInternal;
extern ThsStockOrderResponseDefaultTypeInternal _ThsStockOrderResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::OrderInfo* Arena::CreateMaybeMessage<::OrderInfo>(Arena*);
template<> ::OrderStatus* Arena::CreateMaybeMessage<::OrderStatus>(Arena*);
template<> ::PositionInfo* Arena::CreateMaybeMessage<::PositionInfo>(Arena*);
template<> ::PositionRequest* Arena::CreateMaybeMessage<::PositionRequest>(Arena*);
template<> ::PositionResponse* Arena::CreateMaybeMessage<::PositionResponse>(Arena*);
template<> ::ThsStockOrderRequest* Arena::CreateMaybeMessage<::ThsStockOrderRequest>(Arena*);
template<> ::ThsStockOrderResponse* Arena::CreateMaybeMessage<::ThsStockOrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum OrderStatusKind : int {
  ORDER_STATUS_NOT_FOUND = 0,
  ORDER_STATUS_PENDING = 1,
  ORDER_STATUS_FINISH = 2,
  OrderStatusKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderStatusKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderStatusKind_IsValid(int value);
constexpr OrderStatusKind OrderStatusKind_MIN = ORDER_STATUS_NOT_FOUND;
constexpr OrderStatusKind OrderStatusKind_MAX = ORDER_STATUS_FINISH;
constexpr int OrderStatusKind_ARRAYSIZE = OrderStatusKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatusKind_descriptor();
template<typename T>
inline const std::string& OrderStatusKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatusKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatusKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatusKind_descriptor(), enum_t_value);
}
inline bool OrderStatusKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatusKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatusKind>(
    OrderStatusKind_descriptor(), name, value);
}
enum OrderActionKind : int {
  ORDER_ACTION_LONG = 0,
  ORDER_ACTION_SHORT = 1,
  OrderActionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderActionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderActionKind_IsValid(int value);
constexpr OrderActionKind OrderActionKind_MIN = ORDER_ACTION_LONG;
constexpr OrderActionKind OrderActionKind_MAX = ORDER_ACTION_SHORT;
constexpr int OrderActionKind_ARRAYSIZE = OrderActionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderActionKind_descriptor();
template<typename T>
inline const std::string& OrderActionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderActionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderActionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderActionKind_descriptor(), enum_t_value);
}
inline bool OrderActionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderActionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderActionKind>(
    OrderActionKind_descriptor(), name, value);
}
// ===================================================================

class ThsStockOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ThsStockOrderRequest) */ {
 public:
  inline ThsStockOrderRequest() : ThsStockOrderRequest(nullptr) {}
  virtual ~ThsStockOrderRequest();

  ThsStockOrderRequest(const ThsStockOrderRequest& from);
  ThsStockOrderRequest(ThsStockOrderRequest&& from) noexcept
    : ThsStockOrderRequest() {
    *this = ::std::move(from);
  }

  inline ThsStockOrderRequest& operator=(const ThsStockOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThsStockOrderRequest& operator=(ThsStockOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThsStockOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThsStockOrderRequest* internal_default_instance() {
    return reinterpret_cast<const ThsStockOrderRequest*>(
               &_ThsStockOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThsStockOrderRequest& a, ThsStockOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ThsStockOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThsStockOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThsStockOrderRequest* New() const final {
    return CreateMaybeMessage<ThsStockOrderRequest>(nullptr);
  }

  ThsStockOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThsStockOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThsStockOrderRequest& from);
  void MergeFrom(const ThsStockOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThsStockOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ThsStockOrderRequest";
  }
  protected:
  explicit ThsStockOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
    kStockCodeFieldNumber = 3,
    kOptionsFieldNumber = 6,
    kPortfolioCodeFieldNumber = 7,
    kPriceFieldNumber = 4,
    kAmountFieldNumber = 5,
    kActionFieldNumber = 2,
  };
  // string auth = 1;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string stock_code = 3;
  void clear_stock_code();
  const std::string& stock_code() const;
  void set_stock_code(const std::string& value);
  void set_stock_code(std::string&& value);
  void set_stock_code(const char* value);
  void set_stock_code(const char* value, size_t size);
  std::string* mutable_stock_code();
  std::string* release_stock_code();
  void set_allocated_stock_code(std::string* stock_code);
  private:
  const std::string& _internal_stock_code() const;
  void _internal_set_stock_code(const std::string& value);
  std::string* _internal_mutable_stock_code();
  public:

  // string options = 6;
  void clear_options();
  const std::string& options() const;
  void set_options(const std::string& value);
  void set_options(std::string&& value);
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  std::string* mutable_options();
  std::string* release_options();
  void set_allocated_options(std::string* options);
  private:
  const std::string& _internal_options() const;
  void _internal_set_options(const std::string& value);
  std::string* _internal_mutable_options();
  public:

  // string portfolio_code = 7;
  void clear_portfolio_code();
  const std::string& portfolio_code() const;
  void set_portfolio_code(const std::string& value);
  void set_portfolio_code(std::string&& value);
  void set_portfolio_code(const char* value);
  void set_portfolio_code(const char* value, size_t size);
  std::string* mutable_portfolio_code();
  std::string* release_portfolio_code();
  void set_allocated_portfolio_code(std::string* portfolio_code);
  private:
  const std::string& _internal_portfolio_code() const;
  void _internal_set_portfolio_code(const std::string& value);
  std::string* _internal_mutable_portfolio_code();
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double amount = 5;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // .OrderActionKind action = 2;
  void clear_action();
  ::OrderActionKind action() const;
  void set_action(::OrderActionKind value);
  private:
  ::OrderActionKind _internal_action() const;
  void _internal_set_action(::OrderActionKind value);
  public:

  // @@protoc_insertion_point(class_scope:ThsStockOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr portfolio_code_;
  double price_;
  double amount_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class ThsStockOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ThsStockOrderResponse) */ {
 public:
  inline ThsStockOrderResponse() : ThsStockOrderResponse(nullptr) {}
  virtual ~ThsStockOrderResponse();

  ThsStockOrderResponse(const ThsStockOrderResponse& from);
  ThsStockOrderResponse(ThsStockOrderResponse&& from) noexcept
    : ThsStockOrderResponse() {
    *this = ::std::move(from);
  }

  inline ThsStockOrderResponse& operator=(const ThsStockOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThsStockOrderResponse& operator=(ThsStockOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThsStockOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThsStockOrderResponse* internal_default_instance() {
    return reinterpret_cast<const ThsStockOrderResponse*>(
               &_ThsStockOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThsStockOrderResponse& a, ThsStockOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ThsStockOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThsStockOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThsStockOrderResponse* New() const final {
    return CreateMaybeMessage<ThsStockOrderResponse>(nullptr);
  }

  ThsStockOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThsStockOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThsStockOrderResponse& from);
  void MergeFrom(const ThsStockOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThsStockOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ThsStockOrderResponse";
  }
  protected:
  explicit ThsStockOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 2,
    kBaseRespFieldNumber = 1,
  };
  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // .BaseResp baseResp = 1;
  bool has_baseresp() const;
  private:
  bool _internal_has_baseresp() const;
  public:
  void clear_baseresp();
  const ::BaseResp& baseresp() const;
  ::BaseResp* release_baseresp();
  ::BaseResp* mutable_baseresp();
  void set_allocated_baseresp(::BaseResp* baseresp);
  private:
  const ::BaseResp& _internal_baseresp() const;
  ::BaseResp* _internal_mutable_baseresp();
  public:
  void unsafe_arena_set_allocated_baseresp(
      ::BaseResp* baseresp);
  ::BaseResp* unsafe_arena_release_baseresp();

  // @@protoc_insertion_point(class_scope:ThsStockOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::BaseResp* baseresp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class OrderInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OrderInfo) */ {
 public:
  inline OrderInfo() : OrderInfo(nullptr) {}
  virtual ~OrderInfo();

  OrderInfo(const OrderInfo& from);
  OrderInfo(OrderInfo&& from) noexcept
    : OrderInfo() {
    *this = ::std::move(from);
  }

  inline OrderInfo& operator=(const OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderInfo& operator=(OrderInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderInfo* internal_default_instance() {
    return reinterpret_cast<const OrderInfo*>(
               &_OrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderInfo& a, OrderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderInfo* New() const final {
    return CreateMaybeMessage<OrderInfo>(nullptr);
  }

  OrderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderInfo& from);
  void MergeFrom(const OrderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrderInfo";
  }
  protected:
  explicit OrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:OrderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class OrderStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OrderStatus) */ {
 public:
  inline OrderStatus() : OrderStatus(nullptr) {}
  virtual ~OrderStatus();

  OrderStatus(const OrderStatus& from);
  OrderStatus(OrderStatus&& from) noexcept
    : OrderStatus() {
    *this = ::std::move(from);
  }

  inline OrderStatus& operator=(const OrderStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderStatus& operator=(OrderStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderStatus* internal_default_instance() {
    return reinterpret_cast<const OrderStatus*>(
               &_OrderStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderStatus& a, OrderStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderStatus* New() const final {
    return CreateMaybeMessage<OrderStatus>(nullptr);
  }

  OrderStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderStatus& from);
  void MergeFrom(const OrderStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrderStatus";
  }
  protected:
  explicit OrderStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .OrderStatusKind status = 1;
  void clear_status();
  ::OrderStatusKind status() const;
  void set_status(::OrderStatusKind value);
  private:
  ::OrderStatusKind _internal_status() const;
  void _internal_set_status(::OrderStatusKind value);
  public:

  // @@protoc_insertion_point(class_scope:OrderStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class PositionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  virtual ~PositionInfo();

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionInfo* New() const final {
    return CreateMaybeMessage<PositionInfo>(nullptr);
  }

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionInfo& from);
  void MergeFrom(const PositionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNameFieldNumber = 2,
    kBalanceFieldNumber = 3,
    kFreeBalanceFieldNumber = 4,
    kCostFieldNumber = 5,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double balance = 3;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // double free_balance = 4;
  void clear_free_balance();
  double free_balance() const;
  void set_free_balance(double value);
  private:
  double _internal_free_balance() const;
  void _internal_set_free_balance(double value);
  public:

  // double cost = 5;
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // @@protoc_insertion_point(class_scope:PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double balance_;
  double free_balance_;
  double cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class PositionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositionRequest) */ {
 public:
  inline PositionRequest() : PositionRequest(nullptr) {}
  virtual ~PositionRequest();

  PositionRequest(const PositionRequest& from);
  PositionRequest(PositionRequest&& from) noexcept
    : PositionRequest() {
    *this = ::std::move(from);
  }

  inline PositionRequest& operator=(const PositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRequest& operator=(PositionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRequest* internal_default_instance() {
    return reinterpret_cast<const PositionRequest*>(
               &_PositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PositionRequest& a, PositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRequest* New() const final {
    return CreateMaybeMessage<PositionRequest>(nullptr);
  }

  PositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRequest& from);
  void MergeFrom(const PositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositionRequest";
  }
  protected:
  explicit PositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
    kPortfolioCodeFieldNumber = 2,
  };
  // string auth = 1;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // string portfolio_code = 2;
  void clear_portfolio_code();
  const std::string& portfolio_code() const;
  void set_portfolio_code(const std::string& value);
  void set_portfolio_code(std::string&& value);
  void set_portfolio_code(const char* value);
  void set_portfolio_code(const char* value, size_t size);
  std::string* mutable_portfolio_code();
  std::string* release_portfolio_code();
  void set_allocated_portfolio_code(std::string* portfolio_code);
  private:
  const std::string& _internal_portfolio_code() const;
  void _internal_set_portfolio_code(const std::string& value);
  std::string* _internal_mutable_portfolio_code();
  public:

  // @@protoc_insertion_point(class_scope:PositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr portfolio_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// -------------------------------------------------------------------

class PositionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositionResponse) */ {
 public:
  inline PositionResponse() : PositionResponse(nullptr) {}
  virtual ~PositionResponse();

  PositionResponse(const PositionResponse& from);
  PositionResponse(PositionResponse&& from) noexcept
    : PositionResponse() {
    *this = ::std::move(from);
  }

  inline PositionResponse& operator=(const PositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResponse& operator=(PositionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionResponse* internal_default_instance() {
    return reinterpret_cast<const PositionResponse*>(
               &_PositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionResponse& a, PositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResponse* New() const final {
    return CreateMaybeMessage<PositionResponse>(nullptr);
  }

  PositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResponse& from);
  void MergeFrom(const PositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositionResponse";
  }
  protected:
  explicit PositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2ftrade_2eproto);
    return ::descriptor_table_pb_2ftrade_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionListFieldNumber = 2,
    kResultFieldNumber = 1,
    kCashFieldNumber = 3,
    kNetValueFieldNumber = 4,
  };
  // repeated .PositionInfo position_list = 2;
  int position_list_size() const;
  private:
  int _internal_position_list_size() const;
  public:
  void clear_position_list();
  ::PositionInfo* mutable_position_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionInfo >*
      mutable_position_list();
  private:
  const ::PositionInfo& _internal_position_list(int index) const;
  ::PositionInfo* _internal_add_position_list();
  public:
  const ::PositionInfo& position_list(int index) const;
  ::PositionInfo* add_position_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionInfo >&
      position_list() const;

  // .ResultInfo result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ResultInfo& result() const;
  ::ResultInfo* release_result();
  ::ResultInfo* mutable_result();
  void set_allocated_result(::ResultInfo* result);
  private:
  const ::ResultInfo& _internal_result() const;
  ::ResultInfo* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::ResultInfo* result);
  ::ResultInfo* unsafe_arena_release_result();

  // double cash = 3;
  void clear_cash();
  double cash() const;
  void set_cash(double value);
  private:
  double _internal_cash() const;
  void _internal_set_cash(double value);
  public:

  // double net_value = 4;
  void clear_net_value();
  double net_value() const;
  void set_net_value(double value);
  private:
  double _internal_net_value() const;
  void _internal_set_net_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:PositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionInfo > position_list_;
  ::ResultInfo* result_;
  double cash_;
  double net_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2ftrade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThsStockOrderRequest

// string auth = 1;
inline void ThsStockOrderRequest::clear_auth() {
  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThsStockOrderRequest::auth() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.auth)
  return _internal_auth();
}
inline void ThsStockOrderRequest::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.auth)
}
inline std::string* ThsStockOrderRequest::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderRequest.auth)
  return _internal_mutable_auth();
}
inline const std::string& ThsStockOrderRequest::_internal_auth() const {
  return auth_.Get();
}
inline void ThsStockOrderRequest::_internal_set_auth(const std::string& value) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThsStockOrderRequest::set_auth(std::string&& value) {
  
  auth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ThsStockOrderRequest.auth)
}
inline void ThsStockOrderRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ThsStockOrderRequest.auth)
}
inline void ThsStockOrderRequest::set_auth(const char* value,
    size_t size) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ThsStockOrderRequest.auth)
}
inline std::string* ThsStockOrderRequest::_internal_mutable_auth() {
  
  return auth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThsStockOrderRequest::release_auth() {
  // @@protoc_insertion_point(field_release:ThsStockOrderRequest.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThsStockOrderRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderRequest.auth)
}

// .OrderActionKind action = 2;
inline void ThsStockOrderRequest::clear_action() {
  action_ = 0;
}
inline ::OrderActionKind ThsStockOrderRequest::_internal_action() const {
  return static_cast< ::OrderActionKind >(action_);
}
inline ::OrderActionKind ThsStockOrderRequest::action() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.action)
  return _internal_action();
}
inline void ThsStockOrderRequest::_internal_set_action(::OrderActionKind value) {
  
  action_ = value;
}
inline void ThsStockOrderRequest::set_action(::OrderActionKind value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.action)
}

// string stock_code = 3;
inline void ThsStockOrderRequest::clear_stock_code() {
  stock_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThsStockOrderRequest::stock_code() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.stock_code)
  return _internal_stock_code();
}
inline void ThsStockOrderRequest::set_stock_code(const std::string& value) {
  _internal_set_stock_code(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.stock_code)
}
inline std::string* ThsStockOrderRequest::mutable_stock_code() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderRequest.stock_code)
  return _internal_mutable_stock_code();
}
inline const std::string& ThsStockOrderRequest::_internal_stock_code() const {
  return stock_code_.Get();
}
inline void ThsStockOrderRequest::_internal_set_stock_code(const std::string& value) {
  
  stock_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThsStockOrderRequest::set_stock_code(std::string&& value) {
  
  stock_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ThsStockOrderRequest.stock_code)
}
inline void ThsStockOrderRequest::set_stock_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stock_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ThsStockOrderRequest.stock_code)
}
inline void ThsStockOrderRequest::set_stock_code(const char* value,
    size_t size) {
  
  stock_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ThsStockOrderRequest.stock_code)
}
inline std::string* ThsStockOrderRequest::_internal_mutable_stock_code() {
  
  return stock_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThsStockOrderRequest::release_stock_code() {
  // @@protoc_insertion_point(field_release:ThsStockOrderRequest.stock_code)
  return stock_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThsStockOrderRequest::set_allocated_stock_code(std::string* stock_code) {
  if (stock_code != nullptr) {
    
  } else {
    
  }
  stock_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stock_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderRequest.stock_code)
}

// double price = 4;
inline void ThsStockOrderRequest::clear_price() {
  price_ = 0;
}
inline double ThsStockOrderRequest::_internal_price() const {
  return price_;
}
inline double ThsStockOrderRequest::price() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.price)
  return _internal_price();
}
inline void ThsStockOrderRequest::_internal_set_price(double value) {
  
  price_ = value;
}
inline void ThsStockOrderRequest::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.price)
}

// double amount = 5;
inline void ThsStockOrderRequest::clear_amount() {
  amount_ = 0;
}
inline double ThsStockOrderRequest::_internal_amount() const {
  return amount_;
}
inline double ThsStockOrderRequest::amount() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.amount)
  return _internal_amount();
}
inline void ThsStockOrderRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void ThsStockOrderRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.amount)
}

// string options = 6;
inline void ThsStockOrderRequest::clear_options() {
  options_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThsStockOrderRequest::options() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.options)
  return _internal_options();
}
inline void ThsStockOrderRequest::set_options(const std::string& value) {
  _internal_set_options(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.options)
}
inline std::string* ThsStockOrderRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderRequest.options)
  return _internal_mutable_options();
}
inline const std::string& ThsStockOrderRequest::_internal_options() const {
  return options_.Get();
}
inline void ThsStockOrderRequest::_internal_set_options(const std::string& value) {
  
  options_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThsStockOrderRequest::set_options(std::string&& value) {
  
  options_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ThsStockOrderRequest.options)
}
inline void ThsStockOrderRequest::set_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  options_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ThsStockOrderRequest.options)
}
inline void ThsStockOrderRequest::set_options(const char* value,
    size_t size) {
  
  options_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ThsStockOrderRequest.options)
}
inline std::string* ThsStockOrderRequest::_internal_mutable_options() {
  
  return options_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThsStockOrderRequest::release_options() {
  // @@protoc_insertion_point(field_release:ThsStockOrderRequest.options)
  return options_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThsStockOrderRequest::set_allocated_options(std::string* options) {
  if (options != nullptr) {
    
  } else {
    
  }
  options_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), options,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderRequest.options)
}

// string portfolio_code = 7;
inline void ThsStockOrderRequest::clear_portfolio_code() {
  portfolio_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThsStockOrderRequest::portfolio_code() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderRequest.portfolio_code)
  return _internal_portfolio_code();
}
inline void ThsStockOrderRequest::set_portfolio_code(const std::string& value) {
  _internal_set_portfolio_code(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderRequest.portfolio_code)
}
inline std::string* ThsStockOrderRequest::mutable_portfolio_code() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderRequest.portfolio_code)
  return _internal_mutable_portfolio_code();
}
inline const std::string& ThsStockOrderRequest::_internal_portfolio_code() const {
  return portfolio_code_.Get();
}
inline void ThsStockOrderRequest::_internal_set_portfolio_code(const std::string& value) {
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThsStockOrderRequest::set_portfolio_code(std::string&& value) {
  
  portfolio_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ThsStockOrderRequest.portfolio_code)
}
inline void ThsStockOrderRequest::set_portfolio_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ThsStockOrderRequest.portfolio_code)
}
inline void ThsStockOrderRequest::set_portfolio_code(const char* value,
    size_t size) {
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ThsStockOrderRequest.portfolio_code)
}
inline std::string* ThsStockOrderRequest::_internal_mutable_portfolio_code() {
  
  return portfolio_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThsStockOrderRequest::release_portfolio_code() {
  // @@protoc_insertion_point(field_release:ThsStockOrderRequest.portfolio_code)
  return portfolio_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThsStockOrderRequest::set_allocated_portfolio_code(std::string* portfolio_code) {
  if (portfolio_code != nullptr) {
    
  } else {
    
  }
  portfolio_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), portfolio_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderRequest.portfolio_code)
}

// -------------------------------------------------------------------

// ThsStockOrderResponse

// .BaseResp baseResp = 1;
inline bool ThsStockOrderResponse::_internal_has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != nullptr;
}
inline bool ThsStockOrderResponse::has_baseresp() const {
  return _internal_has_baseresp();
}
inline const ::BaseResp& ThsStockOrderResponse::_internal_baseresp() const {
  const ::BaseResp* p = baseresp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BaseResp*>(
      &::_BaseResp_default_instance_);
}
inline const ::BaseResp& ThsStockOrderResponse::baseresp() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderResponse.baseResp)
  return _internal_baseresp();
}
inline void ThsStockOrderResponse::unsafe_arena_set_allocated_baseresp(
    ::BaseResp* baseresp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresp_);
  }
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThsStockOrderResponse.baseResp)
}
inline ::BaseResp* ThsStockOrderResponse::release_baseresp() {
  
  ::BaseResp* temp = baseresp_;
  baseresp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BaseResp* ThsStockOrderResponse::unsafe_arena_release_baseresp() {
  // @@protoc_insertion_point(field_release:ThsStockOrderResponse.baseResp)
  
  ::BaseResp* temp = baseresp_;
  baseresp_ = nullptr;
  return temp;
}
inline ::BaseResp* ThsStockOrderResponse::_internal_mutable_baseresp() {
  
  if (baseresp_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseResp>(GetArena());
    baseresp_ = p;
  }
  return baseresp_;
}
inline ::BaseResp* ThsStockOrderResponse::mutable_baseresp() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderResponse.baseResp)
  return _internal_mutable_baseresp();
}
inline void ThsStockOrderResponse::set_allocated_baseresp(::BaseResp* baseresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresp_);
  }
  if (baseresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresp)->GetArena();
    if (message_arena != submessage_arena) {
      baseresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseresp, submessage_arena);
    }
    
  } else {
    
  }
  baseresp_ = baseresp;
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderResponse.baseResp)
}

// string order_id = 2;
inline void ThsStockOrderResponse::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThsStockOrderResponse::order_id() const {
  // @@protoc_insertion_point(field_get:ThsStockOrderResponse.order_id)
  return _internal_order_id();
}
inline void ThsStockOrderResponse::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:ThsStockOrderResponse.order_id)
}
inline std::string* ThsStockOrderResponse::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:ThsStockOrderResponse.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& ThsStockOrderResponse::_internal_order_id() const {
  return order_id_.Get();
}
inline void ThsStockOrderResponse::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThsStockOrderResponse::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ThsStockOrderResponse.order_id)
}
inline void ThsStockOrderResponse::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ThsStockOrderResponse.order_id)
}
inline void ThsStockOrderResponse::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ThsStockOrderResponse.order_id)
}
inline std::string* ThsStockOrderResponse::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThsStockOrderResponse::release_order_id() {
  // @@protoc_insertion_point(field_release:ThsStockOrderResponse.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThsStockOrderResponse::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ThsStockOrderResponse.order_id)
}

// -------------------------------------------------------------------

// OrderInfo

// string order_id = 1;
inline void OrderInfo::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderInfo::order_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_id)
  return _internal_order_id();
}
inline void OrderInfo::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.order_id)
}
inline std::string* OrderInfo::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderInfo::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderInfo::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderInfo::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OrderInfo.order_id)
}
inline void OrderInfo::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OrderInfo.order_id)
}
inline void OrderInfo::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OrderInfo.order_id)
}
inline std::string* OrderInfo::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderInfo::release_order_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderInfo::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_id)
}

// -------------------------------------------------------------------

// OrderStatus

// .OrderStatusKind status = 1;
inline void OrderStatus::clear_status() {
  status_ = 0;
}
inline ::OrderStatusKind OrderStatus::_internal_status() const {
  return static_cast< ::OrderStatusKind >(status_);
}
inline ::OrderStatusKind OrderStatus::status() const {
  // @@protoc_insertion_point(field_get:OrderStatus.status)
  return _internal_status();
}
inline void OrderStatus::_internal_set_status(::OrderStatusKind value) {
  
  status_ = value;
}
inline void OrderStatus::set_status(::OrderStatusKind value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:OrderStatus.status)
}

// -------------------------------------------------------------------

// PositionInfo

// string code = 1;
inline void PositionInfo::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionInfo::code() const {
  // @@protoc_insertion_point(field_get:PositionInfo.code)
  return _internal_code();
}
inline void PositionInfo::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PositionInfo.code)
}
inline std::string* PositionInfo::mutable_code() {
  // @@protoc_insertion_point(field_mutable:PositionInfo.code)
  return _internal_mutable_code();
}
inline const std::string& PositionInfo::_internal_code() const {
  return code_.Get();
}
inline void PositionInfo::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionInfo::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PositionInfo.code)
}
inline void PositionInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PositionInfo.code)
}
inline void PositionInfo::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PositionInfo.code)
}
inline std::string* PositionInfo::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionInfo::release_code() {
  // @@protoc_insertion_point(field_release:PositionInfo.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionInfo::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PositionInfo.code)
}

// string name = 2;
inline void PositionInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionInfo::name() const {
  // @@protoc_insertion_point(field_get:PositionInfo.name)
  return _internal_name();
}
inline void PositionInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PositionInfo.name)
}
inline std::string* PositionInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PositionInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PositionInfo::_internal_name() const {
  return name_.Get();
}
inline void PositionInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PositionInfo.name)
}
inline void PositionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PositionInfo.name)
}
inline void PositionInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PositionInfo.name)
}
inline std::string* PositionInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionInfo::release_name() {
  // @@protoc_insertion_point(field_release:PositionInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PositionInfo.name)
}

// double balance = 3;
inline void PositionInfo::clear_balance() {
  balance_ = 0;
}
inline double PositionInfo::_internal_balance() const {
  return balance_;
}
inline double PositionInfo::balance() const {
  // @@protoc_insertion_point(field_get:PositionInfo.balance)
  return _internal_balance();
}
inline void PositionInfo::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void PositionInfo::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:PositionInfo.balance)
}

// double free_balance = 4;
inline void PositionInfo::clear_free_balance() {
  free_balance_ = 0;
}
inline double PositionInfo::_internal_free_balance() const {
  return free_balance_;
}
inline double PositionInfo::free_balance() const {
  // @@protoc_insertion_point(field_get:PositionInfo.free_balance)
  return _internal_free_balance();
}
inline void PositionInfo::_internal_set_free_balance(double value) {
  
  free_balance_ = value;
}
inline void PositionInfo::set_free_balance(double value) {
  _internal_set_free_balance(value);
  // @@protoc_insertion_point(field_set:PositionInfo.free_balance)
}

// double cost = 5;
inline void PositionInfo::clear_cost() {
  cost_ = 0;
}
inline double PositionInfo::_internal_cost() const {
  return cost_;
}
inline double PositionInfo::cost() const {
  // @@protoc_insertion_point(field_get:PositionInfo.cost)
  return _internal_cost();
}
inline void PositionInfo::_internal_set_cost(double value) {
  
  cost_ = value;
}
inline void PositionInfo::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:PositionInfo.cost)
}

// -------------------------------------------------------------------

// PositionRequest

// string auth = 1;
inline void PositionRequest::clear_auth() {
  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionRequest::auth() const {
  // @@protoc_insertion_point(field_get:PositionRequest.auth)
  return _internal_auth();
}
inline void PositionRequest::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:PositionRequest.auth)
}
inline std::string* PositionRequest::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:PositionRequest.auth)
  return _internal_mutable_auth();
}
inline const std::string& PositionRequest::_internal_auth() const {
  return auth_.Get();
}
inline void PositionRequest::_internal_set_auth(const std::string& value) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionRequest::set_auth(std::string&& value) {
  
  auth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PositionRequest.auth)
}
inline void PositionRequest::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PositionRequest.auth)
}
inline void PositionRequest::set_auth(const char* value,
    size_t size) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PositionRequest.auth)
}
inline std::string* PositionRequest::_internal_mutable_auth() {
  
  return auth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionRequest::release_auth() {
  // @@protoc_insertion_point(field_release:PositionRequest.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionRequest::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PositionRequest.auth)
}

// string portfolio_code = 2;
inline void PositionRequest::clear_portfolio_code() {
  portfolio_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionRequest::portfolio_code() const {
  // @@protoc_insertion_point(field_get:PositionRequest.portfolio_code)
  return _internal_portfolio_code();
}
inline void PositionRequest::set_portfolio_code(const std::string& value) {
  _internal_set_portfolio_code(value);
  // @@protoc_insertion_point(field_set:PositionRequest.portfolio_code)
}
inline std::string* PositionRequest::mutable_portfolio_code() {
  // @@protoc_insertion_point(field_mutable:PositionRequest.portfolio_code)
  return _internal_mutable_portfolio_code();
}
inline const std::string& PositionRequest::_internal_portfolio_code() const {
  return portfolio_code_.Get();
}
inline void PositionRequest::_internal_set_portfolio_code(const std::string& value) {
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionRequest::set_portfolio_code(std::string&& value) {
  
  portfolio_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PositionRequest.portfolio_code)
}
inline void PositionRequest::set_portfolio_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PositionRequest.portfolio_code)
}
inline void PositionRequest::set_portfolio_code(const char* value,
    size_t size) {
  
  portfolio_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PositionRequest.portfolio_code)
}
inline std::string* PositionRequest::_internal_mutable_portfolio_code() {
  
  return portfolio_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionRequest::release_portfolio_code() {
  // @@protoc_insertion_point(field_release:PositionRequest.portfolio_code)
  return portfolio_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionRequest::set_allocated_portfolio_code(std::string* portfolio_code) {
  if (portfolio_code != nullptr) {
    
  } else {
    
  }
  portfolio_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), portfolio_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PositionRequest.portfolio_code)
}

// -------------------------------------------------------------------

// PositionResponse

// .ResultInfo result = 1;
inline bool PositionResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool PositionResponse::has_result() const {
  return _internal_has_result();
}
inline const ::ResultInfo& PositionResponse::_internal_result() const {
  const ::ResultInfo* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ResultInfo*>(
      &::_ResultInfo_default_instance_);
}
inline const ::ResultInfo& PositionResponse::result() const {
  // @@protoc_insertion_point(field_get:PositionResponse.result)
  return _internal_result();
}
inline void PositionResponse::unsafe_arena_set_allocated_result(
    ::ResultInfo* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PositionResponse.result)
}
inline ::ResultInfo* PositionResponse::release_result() {
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResultInfo* PositionResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:PositionResponse.result)
  
  ::ResultInfo* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ResultInfo* PositionResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResultInfo>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::ResultInfo* PositionResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:PositionResponse.result)
  return _internal_mutable_result();
}
inline void PositionResponse::set_allocated_result(::ResultInfo* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:PositionResponse.result)
}

// repeated .PositionInfo position_list = 2;
inline int PositionResponse::_internal_position_list_size() const {
  return position_list_.size();
}
inline int PositionResponse::position_list_size() const {
  return _internal_position_list_size();
}
inline void PositionResponse::clear_position_list() {
  position_list_.Clear();
}
inline ::PositionInfo* PositionResponse::mutable_position_list(int index) {
  // @@protoc_insertion_point(field_mutable:PositionResponse.position_list)
  return position_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionInfo >*
PositionResponse::mutable_position_list() {
  // @@protoc_insertion_point(field_mutable_list:PositionResponse.position_list)
  return &position_list_;
}
inline const ::PositionInfo& PositionResponse::_internal_position_list(int index) const {
  return position_list_.Get(index);
}
inline const ::PositionInfo& PositionResponse::position_list(int index) const {
  // @@protoc_insertion_point(field_get:PositionResponse.position_list)
  return _internal_position_list(index);
}
inline ::PositionInfo* PositionResponse::_internal_add_position_list() {
  return position_list_.Add();
}
inline ::PositionInfo* PositionResponse::add_position_list() {
  // @@protoc_insertion_point(field_add:PositionResponse.position_list)
  return _internal_add_position_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionInfo >&
PositionResponse::position_list() const {
  // @@protoc_insertion_point(field_list:PositionResponse.position_list)
  return position_list_;
}

// double cash = 3;
inline void PositionResponse::clear_cash() {
  cash_ = 0;
}
inline double PositionResponse::_internal_cash() const {
  return cash_;
}
inline double PositionResponse::cash() const {
  // @@protoc_insertion_point(field_get:PositionResponse.cash)
  return _internal_cash();
}
inline void PositionResponse::_internal_set_cash(double value) {
  
  cash_ = value;
}
inline void PositionResponse::set_cash(double value) {
  _internal_set_cash(value);
  // @@protoc_insertion_point(field_set:PositionResponse.cash)
}

// double net_value = 4;
inline void PositionResponse::clear_net_value() {
  net_value_ = 0;
}
inline double PositionResponse::_internal_net_value() const {
  return net_value_;
}
inline double PositionResponse::net_value() const {
  // @@protoc_insertion_point(field_get:PositionResponse.net_value)
  return _internal_net_value();
}
inline void PositionResponse::_internal_set_net_value(double value) {
  
  net_value_ = value;
}
inline void PositionResponse::set_net_value(double value) {
  _internal_set_net_value(value);
  // @@protoc_insertion_point(field_set:PositionResponse.net_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OrderStatusKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OrderStatusKind>() {
  return ::OrderStatusKind_descriptor();
}
template <> struct is_proto_enum< ::OrderActionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OrderActionKind>() {
  return ::OrderActionKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2ftrade_2eproto
