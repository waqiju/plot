// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/chimera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2fchimera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2fchimera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pb/prefab.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2fchimera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2fchimera_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fchimera_2eproto;
namespace pb {
class CommandList;
class CommandListDefaultTypeInternal;
extern CommandListDefaultTypeInternal _CommandList_default_instance_;
class CommandParameter;
class CommandParameterDefaultTypeInternal;
extern CommandParameterDefaultTypeInternal _CommandParameter_default_instance_;
class CommandReply;
class CommandReplyDefaultTypeInternal;
extern CommandReplyDefaultTypeInternal _CommandReply_default_instance_;
class CommandRequest;
class CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class EchoReply;
class EchoReplyDefaultTypeInternal;
extern EchoReplyDefaultTypeInternal _EchoReply_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CommandList* Arena::CreateMaybeMessage<::pb::CommandList>(Arena*);
template<> ::pb::CommandParameter* Arena::CreateMaybeMessage<::pb::CommandParameter>(Arena*);
template<> ::pb::CommandReply* Arena::CreateMaybeMessage<::pb::CommandReply>(Arena*);
template<> ::pb::CommandRequest* Arena::CreateMaybeMessage<::pb::CommandRequest>(Arena*);
template<> ::pb::EchoReply* Arena::CreateMaybeMessage<::pb::EchoReply>(Arena*);
template<> ::pb::EchoRequest* Arena::CreateMaybeMessage<::pb::EchoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum ERROR_CODE : int {
  ERROR_CODE_SUCCESS = 0,
  ERROR_CODE_PARAMETER_INVALID = 1,
  ERROR_CODE_AUTHORIZATION_FAILED = 2,
  ERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERROR_CODE_IsValid(int value);
constexpr ERROR_CODE ERROR_CODE_MIN = ERROR_CODE_SUCCESS;
constexpr ERROR_CODE ERROR_CODE_MAX = ERROR_CODE_AUTHORIZATION_FAILED;
constexpr int ERROR_CODE_ARRAYSIZE = ERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERROR_CODE_descriptor();
template<typename T>
inline const std::string& ERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERROR_CODE_descriptor(), enum_t_value);
}
inline bool ERROR_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERROR_CODE>(
    ERROR_CODE_descriptor(), name, value);
}
// ===================================================================

class EchoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:pb.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// -------------------------------------------------------------------

class EchoReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.EchoReply) */ {
 public:
  inline EchoReply() : EchoReply(nullptr) {}
  virtual ~EchoReply();

  EchoReply(const EchoReply& from);
  EchoReply(EchoReply&& from) noexcept
    : EchoReply() {
    *this = ::std::move(from);
  }

  inline EchoReply& operator=(const EchoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoReply& operator=(EchoReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoReply* internal_default_instance() {
    return reinterpret_cast<const EchoReply*>(
               &_EchoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoReply& a, EchoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoReply* New() const final {
    return CreateMaybeMessage<EchoReply>(nullptr);
  }

  EchoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoReply& from);
  void MergeFrom(const EchoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.EchoReply";
  }
  protected:
  explicit EchoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:pb.EchoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// -------------------------------------------------------------------

class CommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {}
  virtual ~CommandRequest();

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRequest* New() const final {
    return CreateMaybeMessage<CommandRequest>(nullptr);
  }

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRequest& from);
  void MergeFrom(const CommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CommandRequest";
  }
  protected:
  explicit CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .pb.CommandParameter parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::pb::CommandParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandParameter >*
      mutable_parameters();
  private:
  const ::pb::CommandParameter& _internal_parameters(int index) const;
  ::pb::CommandParameter* _internal_add_parameters();
  public:
  const ::pb::CommandParameter& parameters(int index) const;
  ::pb::CommandParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandParameter >&
      parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.CommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandParameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// -------------------------------------------------------------------

class CommandParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CommandParameter) */ {
 public:
  inline CommandParameter() : CommandParameter(nullptr) {}
  virtual ~CommandParameter();

  CommandParameter(const CommandParameter& from);
  CommandParameter(CommandParameter&& from) noexcept
    : CommandParameter() {
    *this = ::std::move(from);
  }

  inline CommandParameter& operator=(const CommandParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandParameter& operator=(CommandParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandParameter* internal_default_instance() {
    return reinterpret_cast<const CommandParameter*>(
               &_CommandParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandParameter& a, CommandParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandParameter* New() const final {
    return CreateMaybeMessage<CommandParameter>(nullptr);
  }

  CommandParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandParameter& from);
  void MergeFrom(const CommandParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CommandParameter";
  }
  protected:
  explicit CommandParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPStringFieldNumber = 5,
    kPBytesFieldNumber = 6,
    kPrefabFieldNumber = 7,
    kPBoolFieldNumber = 1,
    kPIntFieldNumber = 2,
    kPDoubleFieldNumber = 4,
    kPFloatFieldNumber = 3,
  };
  // string p_string = 5;
  void clear_p_string();
  const std::string& p_string() const;
  void set_p_string(const std::string& value);
  void set_p_string(std::string&& value);
  void set_p_string(const char* value);
  void set_p_string(const char* value, size_t size);
  std::string* mutable_p_string();
  std::string* release_p_string();
  void set_allocated_p_string(std::string* p_string);
  private:
  const std::string& _internal_p_string() const;
  void _internal_set_p_string(const std::string& value);
  std::string* _internal_mutable_p_string();
  public:

  // bytes p_bytes = 6;
  void clear_p_bytes();
  const std::string& p_bytes() const;
  void set_p_bytes(const std::string& value);
  void set_p_bytes(std::string&& value);
  void set_p_bytes(const char* value);
  void set_p_bytes(const void* value, size_t size);
  std::string* mutable_p_bytes();
  std::string* release_p_bytes();
  void set_allocated_p_bytes(std::string* p_bytes);
  private:
  const std::string& _internal_p_bytes() const;
  void _internal_set_p_bytes(const std::string& value);
  std::string* _internal_mutable_p_bytes();
  public:

  // .pb.Prefab prefab = 7;
  bool has_prefab() const;
  private:
  bool _internal_has_prefab() const;
  public:
  void clear_prefab();
  const ::pb::Prefab& prefab() const;
  ::pb::Prefab* release_prefab();
  ::pb::Prefab* mutable_prefab();
  void set_allocated_prefab(::pb::Prefab* prefab);
  private:
  const ::pb::Prefab& _internal_prefab() const;
  ::pb::Prefab* _internal_mutable_prefab();
  public:
  void unsafe_arena_set_allocated_prefab(
      ::pb::Prefab* prefab);
  ::pb::Prefab* unsafe_arena_release_prefab();

  // bool p_bool = 1;
  void clear_p_bool();
  bool p_bool() const;
  void set_p_bool(bool value);
  private:
  bool _internal_p_bool() const;
  void _internal_set_p_bool(bool value);
  public:

  // int32 p_int = 2;
  void clear_p_int();
  ::PROTOBUF_NAMESPACE_ID::int32 p_int() const;
  void set_p_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_p_int() const;
  void _internal_set_p_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double p_double = 4;
  void clear_p_double();
  double p_double() const;
  void set_p_double(double value);
  private:
  double _internal_p_double() const;
  void _internal_set_p_double(double value);
  public:

  // float p_float = 3;
  void clear_p_float();
  float p_float() const;
  void set_p_float(float value);
  private:
  float _internal_p_float() const;
  void _internal_set_p_float(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CommandParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_bytes_;
  ::pb::Prefab* prefab_;
  bool p_bool_;
  ::PROTOBUF_NAMESPACE_ID::int32 p_int_;
  double p_double_;
  float p_float_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// -------------------------------------------------------------------

class CommandReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CommandReply) */ {
 public:
  inline CommandReply() : CommandReply(nullptr) {}
  virtual ~CommandReply();

  CommandReply(const CommandReply& from);
  CommandReply(CommandReply&& from) noexcept
    : CommandReply() {
    *this = ::std::move(from);
  }

  inline CommandReply& operator=(const CommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandReply& operator=(CommandReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandReply* internal_default_instance() {
    return reinterpret_cast<const CommandReply*>(
               &_CommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommandReply& a, CommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandReply* New() const final {
    return CreateMaybeMessage<CommandReply>(nullptr);
  }

  CommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandReply& from);
  void MergeFrom(const CommandReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CommandReply";
  }
  protected:
  explicit CommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CommandReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// -------------------------------------------------------------------

class CommandList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CommandList) */ {
 public:
  inline CommandList() : CommandList(nullptr) {}
  virtual ~CommandList();

  CommandList(const CommandList& from);
  CommandList(CommandList&& from) noexcept
    : CommandList() {
    *this = ::std::move(from);
  }

  inline CommandList& operator=(const CommandList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandList& operator=(CommandList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandList* internal_default_instance() {
    return reinterpret_cast<const CommandList*>(
               &_CommandList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommandList& a, CommandList& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandList* New() const final {
    return CreateMaybeMessage<CommandList>(nullptr);
  }

  CommandList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandList& from);
  void MergeFrom(const CommandList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CommandList";
  }
  protected:
  explicit CommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pb_2fchimera_2eproto);
    return ::descriptor_table_pb_2fchimera_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandListFieldNumber = 1,
  };
  // repeated .pb.CommandRequest command_list = 1;
  int command_list_size() const;
  private:
  int _internal_command_list_size() const;
  public:
  void clear_command_list();
  ::pb::CommandRequest* mutable_command_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandRequest >*
      mutable_command_list();
  private:
  const ::pb::CommandRequest& _internal_command_list(int index) const;
  ::pb::CommandRequest* _internal_add_command_list();
  public:
  const ::pb::CommandRequest& command_list(int index) const;
  ::pb::CommandRequest* add_command_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandRequest >&
      command_list() const;

  // @@protoc_insertion_point(class_scope:pb.CommandList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandRequest > command_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2fchimera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// string text = 1;
inline void EchoRequest::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoRequest::text() const {
  // @@protoc_insertion_point(field_get:pb.EchoRequest.text)
  return _internal_text();
}
inline void EchoRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:pb.EchoRequest.text)
}
inline std::string* EchoRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:pb.EchoRequest.text)
  return _internal_mutable_text();
}
inline const std::string& EchoRequest::_internal_text() const {
  return text_.Get();
}
inline void EchoRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoRequest::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.EchoRequest.text)
}
inline void EchoRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.EchoRequest.text)
}
inline void EchoRequest::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.EchoRequest.text)
}
inline std::string* EchoRequest::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoRequest::release_text() {
  // @@protoc_insertion_point(field_release:pb.EchoRequest.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.EchoRequest.text)
}

// -------------------------------------------------------------------

// EchoReply

// string text = 1;
inline void EchoReply::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoReply::text() const {
  // @@protoc_insertion_point(field_get:pb.EchoReply.text)
  return _internal_text();
}
inline void EchoReply::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:pb.EchoReply.text)
}
inline std::string* EchoReply::mutable_text() {
  // @@protoc_insertion_point(field_mutable:pb.EchoReply.text)
  return _internal_mutable_text();
}
inline const std::string& EchoReply::_internal_text() const {
  return text_.Get();
}
inline void EchoReply::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoReply::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.EchoReply.text)
}
inline void EchoReply::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.EchoReply.text)
}
inline void EchoReply::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.EchoReply.text)
}
inline std::string* EchoReply::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoReply::release_text() {
  // @@protoc_insertion_point(field_release:pb.EchoReply.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoReply::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.EchoReply.text)
}

// -------------------------------------------------------------------

// CommandRequest

// string name = 1;
inline void CommandRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandRequest::name() const {
  // @@protoc_insertion_point(field_get:pb.CommandRequest.name)
  return _internal_name();
}
inline void CommandRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.CommandRequest.name)
}
inline std::string* CommandRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.CommandRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CommandRequest::_internal_name() const {
  return name_.Get();
}
inline void CommandRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.CommandRequest.name)
}
inline void CommandRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.CommandRequest.name)
}
inline void CommandRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.CommandRequest.name)
}
inline std::string* CommandRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandRequest::release_name() {
  // @@protoc_insertion_point(field_release:pb.CommandRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.CommandRequest.name)
}

// repeated .pb.CommandParameter parameters = 2;
inline int CommandRequest::_internal_parameters_size() const {
  return parameters_.size();
}
inline int CommandRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void CommandRequest::clear_parameters() {
  parameters_.Clear();
}
inline ::pb::CommandParameter* CommandRequest::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CommandRequest.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandParameter >*
CommandRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:pb.CommandRequest.parameters)
  return &parameters_;
}
inline const ::pb::CommandParameter& CommandRequest::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::pb::CommandParameter& CommandRequest::parameters(int index) const {
  // @@protoc_insertion_point(field_get:pb.CommandRequest.parameters)
  return _internal_parameters(index);
}
inline ::pb::CommandParameter* CommandRequest::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::pb::CommandParameter* CommandRequest::add_parameters() {
  // @@protoc_insertion_point(field_add:pb.CommandRequest.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandParameter >&
CommandRequest::parameters() const {
  // @@protoc_insertion_point(field_list:pb.CommandRequest.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// CommandParameter

// bool p_bool = 1;
inline void CommandParameter::clear_p_bool() {
  p_bool_ = false;
}
inline bool CommandParameter::_internal_p_bool() const {
  return p_bool_;
}
inline bool CommandParameter::p_bool() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_bool)
  return _internal_p_bool();
}
inline void CommandParameter::_internal_set_p_bool(bool value) {
  
  p_bool_ = value;
}
inline void CommandParameter::set_p_bool(bool value) {
  _internal_set_p_bool(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_bool)
}

// int32 p_int = 2;
inline void CommandParameter::clear_p_int() {
  p_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandParameter::_internal_p_int() const {
  return p_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandParameter::p_int() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_int)
  return _internal_p_int();
}
inline void CommandParameter::_internal_set_p_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  p_int_ = value;
}
inline void CommandParameter::set_p_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_p_int(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_int)
}

// float p_float = 3;
inline void CommandParameter::clear_p_float() {
  p_float_ = 0;
}
inline float CommandParameter::_internal_p_float() const {
  return p_float_;
}
inline float CommandParameter::p_float() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_float)
  return _internal_p_float();
}
inline void CommandParameter::_internal_set_p_float(float value) {
  
  p_float_ = value;
}
inline void CommandParameter::set_p_float(float value) {
  _internal_set_p_float(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_float)
}

// double p_double = 4;
inline void CommandParameter::clear_p_double() {
  p_double_ = 0;
}
inline double CommandParameter::_internal_p_double() const {
  return p_double_;
}
inline double CommandParameter::p_double() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_double)
  return _internal_p_double();
}
inline void CommandParameter::_internal_set_p_double(double value) {
  
  p_double_ = value;
}
inline void CommandParameter::set_p_double(double value) {
  _internal_set_p_double(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_double)
}

// string p_string = 5;
inline void CommandParameter::clear_p_string() {
  p_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandParameter::p_string() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_string)
  return _internal_p_string();
}
inline void CommandParameter::set_p_string(const std::string& value) {
  _internal_set_p_string(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_string)
}
inline std::string* CommandParameter::mutable_p_string() {
  // @@protoc_insertion_point(field_mutable:pb.CommandParameter.p_string)
  return _internal_mutable_p_string();
}
inline const std::string& CommandParameter::_internal_p_string() const {
  return p_string_.Get();
}
inline void CommandParameter::_internal_set_p_string(const std::string& value) {
  
  p_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandParameter::set_p_string(std::string&& value) {
  
  p_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.CommandParameter.p_string)
}
inline void CommandParameter::set_p_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.CommandParameter.p_string)
}
inline void CommandParameter::set_p_string(const char* value,
    size_t size) {
  
  p_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.CommandParameter.p_string)
}
inline std::string* CommandParameter::_internal_mutable_p_string() {
  
  return p_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandParameter::release_p_string() {
  // @@protoc_insertion_point(field_release:pb.CommandParameter.p_string)
  return p_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandParameter::set_allocated_p_string(std::string* p_string) {
  if (p_string != nullptr) {
    
  } else {
    
  }
  p_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.CommandParameter.p_string)
}

// bytes p_bytes = 6;
inline void CommandParameter::clear_p_bytes() {
  p_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandParameter::p_bytes() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.p_bytes)
  return _internal_p_bytes();
}
inline void CommandParameter::set_p_bytes(const std::string& value) {
  _internal_set_p_bytes(value);
  // @@protoc_insertion_point(field_set:pb.CommandParameter.p_bytes)
}
inline std::string* CommandParameter::mutable_p_bytes() {
  // @@protoc_insertion_point(field_mutable:pb.CommandParameter.p_bytes)
  return _internal_mutable_p_bytes();
}
inline const std::string& CommandParameter::_internal_p_bytes() const {
  return p_bytes_.Get();
}
inline void CommandParameter::_internal_set_p_bytes(const std::string& value) {
  
  p_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandParameter::set_p_bytes(std::string&& value) {
  
  p_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.CommandParameter.p_bytes)
}
inline void CommandParameter::set_p_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.CommandParameter.p_bytes)
}
inline void CommandParameter::set_p_bytes(const void* value,
    size_t size) {
  
  p_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.CommandParameter.p_bytes)
}
inline std::string* CommandParameter::_internal_mutable_p_bytes() {
  
  return p_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandParameter::release_p_bytes() {
  // @@protoc_insertion_point(field_release:pb.CommandParameter.p_bytes)
  return p_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandParameter::set_allocated_p_bytes(std::string* p_bytes) {
  if (p_bytes != nullptr) {
    
  } else {
    
  }
  p_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.CommandParameter.p_bytes)
}

// .pb.Prefab prefab = 7;
inline bool CommandParameter::_internal_has_prefab() const {
  return this != internal_default_instance() && prefab_ != nullptr;
}
inline bool CommandParameter::has_prefab() const {
  return _internal_has_prefab();
}
inline const ::pb::Prefab& CommandParameter::_internal_prefab() const {
  const ::pb::Prefab* p = prefab_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Prefab*>(
      &::pb::_Prefab_default_instance_);
}
inline const ::pb::Prefab& CommandParameter::prefab() const {
  // @@protoc_insertion_point(field_get:pb.CommandParameter.prefab)
  return _internal_prefab();
}
inline void CommandParameter::unsafe_arena_set_allocated_prefab(
    ::pb::Prefab* prefab) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefab_);
  }
  prefab_ = prefab;
  if (prefab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.CommandParameter.prefab)
}
inline ::pb::Prefab* CommandParameter::release_prefab() {
  
  ::pb::Prefab* temp = prefab_;
  prefab_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb::Prefab* CommandParameter::unsafe_arena_release_prefab() {
  // @@protoc_insertion_point(field_release:pb.CommandParameter.prefab)
  
  ::pb::Prefab* temp = prefab_;
  prefab_ = nullptr;
  return temp;
}
inline ::pb::Prefab* CommandParameter::_internal_mutable_prefab() {
  
  if (prefab_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Prefab>(GetArena());
    prefab_ = p;
  }
  return prefab_;
}
inline ::pb::Prefab* CommandParameter::mutable_prefab() {
  // @@protoc_insertion_point(field_mutable:pb.CommandParameter.prefab)
  return _internal_mutable_prefab();
}
inline void CommandParameter::set_allocated_prefab(::pb::Prefab* prefab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefab_);
  }
  if (prefab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefab)->GetArena();
    if (message_arena != submessage_arena) {
      prefab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefab, submessage_arena);
    }
    
  } else {
    
  }
  prefab_ = prefab;
  // @@protoc_insertion_point(field_set_allocated:pb.CommandParameter.prefab)
}

// -------------------------------------------------------------------

// CommandReply

// int32 error_code = 1;
inline void CommandReply::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandReply::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandReply::error_code() const {
  // @@protoc_insertion_point(field_get:pb.CommandReply.error_code)
  return _internal_error_code();
}
inline void CommandReply::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void CommandReply::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:pb.CommandReply.error_code)
}

// string error_message = 2;
inline void CommandReply::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandReply::error_message() const {
  // @@protoc_insertion_point(field_get:pb.CommandReply.error_message)
  return _internal_error_message();
}
inline void CommandReply::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:pb.CommandReply.error_message)
}
inline std::string* CommandReply::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:pb.CommandReply.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& CommandReply::_internal_error_message() const {
  return error_message_.Get();
}
inline void CommandReply::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandReply::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb.CommandReply.error_message)
}
inline void CommandReply::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb.CommandReply.error_message)
}
inline void CommandReply::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb.CommandReply.error_message)
}
inline std::string* CommandReply::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandReply::release_error_message() {
  // @@protoc_insertion_point(field_release:pb.CommandReply.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandReply::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb.CommandReply.error_message)
}

// -------------------------------------------------------------------

// CommandList

// repeated .pb.CommandRequest command_list = 1;
inline int CommandList::_internal_command_list_size() const {
  return command_list_.size();
}
inline int CommandList::command_list_size() const {
  return _internal_command_list_size();
}
inline void CommandList::clear_command_list() {
  command_list_.Clear();
}
inline ::pb::CommandRequest* CommandList::mutable_command_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.CommandList.command_list)
  return command_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandRequest >*
CommandList::mutable_command_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.CommandList.command_list)
  return &command_list_;
}
inline const ::pb::CommandRequest& CommandList::_internal_command_list(int index) const {
  return command_list_.Get(index);
}
inline const ::pb::CommandRequest& CommandList::command_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.CommandList.command_list)
  return _internal_command_list(index);
}
inline ::pb::CommandRequest* CommandList::_internal_add_command_list() {
  return command_list_.Add();
}
inline ::pb::CommandRequest* CommandList::add_command_list() {
  // @@protoc_insertion_point(field_add:pb.CommandList.command_list)
  return _internal_add_command_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::CommandRequest >&
CommandList::command_list() const {
  // @@protoc_insertion_point(field_list:pb.CommandList.command_list)
  return command_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::ERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERROR_CODE>() {
  return ::pb::ERROR_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2fchimera_2eproto
